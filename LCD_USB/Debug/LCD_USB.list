
LCD_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009684  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002828  08009834  08009834  00019834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c05c  0800c05c  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c05c  0800c05c  0001c05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c064  0800c064  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c064  0800c064  0001c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c068  0800c068  0001c068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  0800c06c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f4  2**0
                  CONTENTS
 10 .bss          00000610  200000f4  200000f4  000200f4  2**2
                  ALLOC
 11 ._user_heap_stack 00004004  20000704  20000704  000200f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002117f  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004aec  00000000  00000000  000412a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b60  00000000  00000000  00045d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001930  00000000  00000000  000478f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029ca4  00000000  00000000  00049220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000217b8  00000000  00000000  00072ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebaac  00000000  00000000  0009467c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00180128  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b04  00000000  00000000  0018017c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800981c 	.word	0x0800981c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f8 	.word	0x200000f8
 80001ec:	0800981c 	.word	0x0800981c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_CRC_Init+0x20>)
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <MX_CRC_Init+0x24>)
 8000590:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_CRC_Init+0x20>)
 8000594:	f003 fc13 	bl	8003dbe <HAL_CRC_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800059e:	f000 ff23 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200004f4 	.word	0x200004f4
 80005ac:	40023000 	.word	0x40023000

080005b0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <HAL_CRC_MspInit+0x3c>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d10d      	bne.n	80005de <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <HAL_CRC_MspInit+0x40>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a09      	ldr	r2, [pc, #36]	; (80005f0 <HAL_CRC_MspInit+0x40>)
 80005cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <HAL_CRC_MspInit+0x40>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40023000 	.word	0x40023000
 80005f0:	40023800 	.word	0x40023800

080005f4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_DMA2D_Init+0x5c>)
 80005fa:	4a16      	ldr	r2, [pc, #88]	; (8000654 <MX_DMA2D_Init+0x60>)
 80005fc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_DMA2D_Init+0x5c>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_DMA2D_Init+0x5c>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_DMA2D_Init+0x5c>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_DMA2D_Init+0x5c>)
 8000612:	2200      	movs	r2, #0
 8000614:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_DMA2D_Init+0x5c>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_DMA2D_Init+0x5c>)
 800061e:	2200      	movs	r2, #0
 8000620:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_DMA2D_Init+0x5c>)
 8000624:	2200      	movs	r2, #0
 8000626:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000628:	4809      	ldr	r0, [pc, #36]	; (8000650 <MX_DMA2D_Init+0x5c>)
 800062a:	f003 fda3 	bl	8004174 <HAL_DMA2D_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000634:	f000 fed8 	bl	80013e8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000638:	2101      	movs	r1, #1
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_DMA2D_Init+0x5c>)
 800063c:	f003 fef8 	bl	8004430 <HAL_DMA2D_ConfigLayer>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000646:	f000 fecf 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200004fc 	.word	0x200004fc
 8000654:	4002b000 	.word	0x4002b000

08000658 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <HAL_DMA2D_MspInit+0x3c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d10d      	bne.n	8000686 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <HAL_DMA2D_MspInit+0x40>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a09      	ldr	r2, [pc, #36]	; (8000698 <HAL_DMA2D_MspInit+0x40>)
 8000674:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <HAL_DMA2D_MspInit+0x40>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	4002b000 	.word	0x4002b000
 8000698:	40023800 	.word	0x40023800

0800069c <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006b0:	4b3b      	ldr	r3, [pc, #236]	; (80007a0 <HAL_FMC_MspInit+0x104>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d16f      	bne.n	8000798 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80006b8:	4b39      	ldr	r3, [pc, #228]	; (80007a0 <HAL_FMC_MspInit+0x104>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	4b38      	ldr	r3, [pc, #224]	; (80007a4 <HAL_FMC_MspInit+0x108>)
 80006c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006c6:	4a37      	ldr	r2, [pc, #220]	; (80007a4 <HAL_FMC_MspInit+0x108>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6393      	str	r3, [r2, #56]	; 0x38
 80006ce:	4b35      	ldr	r3, [pc, #212]	; (80007a4 <HAL_FMC_MspInit+0x108>)
 80006d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80006da:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80006de:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	2302      	movs	r3, #2
 80006e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e8:	2303      	movs	r3, #3
 80006ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006ec:	230c      	movs	r3, #12
 80006ee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	4619      	mov	r1, r3
 80006f4:	482c      	ldr	r0, [pc, #176]	; (80007a8 <HAL_FMC_MspInit+0x10c>)
 80006f6:	f003 ffc9 	bl	800468c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006fa:	2301      	movs	r3, #1
 80006fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fe:	2302      	movs	r3, #2
 8000700:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000706:	2303      	movs	r3, #3
 8000708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800070a:	230c      	movs	r3, #12
 800070c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4826      	ldr	r0, [pc, #152]	; (80007ac <HAL_FMC_MspInit+0x110>)
 8000714:	f003 ffba 	bl	800468c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000718:	f248 1333 	movw	r3, #33075	; 0x8133
 800071c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071e:	2302      	movs	r3, #2
 8000720:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000726:	2303      	movs	r3, #3
 8000728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800072a:	230c      	movs	r3, #12
 800072c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4619      	mov	r1, r3
 8000732:	481f      	ldr	r0, [pc, #124]	; (80007b0 <HAL_FMC_MspInit+0x114>)
 8000734:	f003 ffaa 	bl	800468c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000738:	f64f 7380 	movw	r3, #65408	; 0xff80
 800073c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800074a:	230c      	movs	r3, #12
 800074c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4619      	mov	r1, r3
 8000752:	4818      	ldr	r0, [pc, #96]	; (80007b4 <HAL_FMC_MspInit+0x118>)
 8000754:	f003 ff9a 	bl	800468c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000758:	f24c 7303 	movw	r3, #50947	; 0xc703
 800075c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800076a:	230c      	movs	r3, #12
 800076c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4619      	mov	r1, r3
 8000772:	4811      	ldr	r0, [pc, #68]	; (80007b8 <HAL_FMC_MspInit+0x11c>)
 8000774:	f003 ff8a 	bl	800468c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000778:	2360      	movs	r3, #96	; 0x60
 800077a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077c:	2302      	movs	r3, #2
 800077e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000784:	2303      	movs	r3, #3
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000788:	230c      	movs	r3, #12
 800078a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4619      	mov	r1, r3
 8000790:	480a      	ldr	r0, [pc, #40]	; (80007bc <HAL_FMC_MspInit+0x120>)
 8000792:	f003 ff7b 	bl	800468c <HAL_GPIO_Init>
 8000796:	e000      	b.n	800079a <HAL_FMC_MspInit+0xfe>
    return;
 8000798:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000110 	.word	0x20000110
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40021400 	.word	0x40021400
 80007ac:	40020800 	.word	0x40020800
 80007b0:	40021800 	.word	0x40021800
 80007b4:	40021000 	.word	0x40021000
 80007b8:	40020c00 	.word	0x40020c00
 80007bc:	40020400 	.word	0x40020400

080007c0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80007c8:	f7ff ff68 	bl	800069c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08e      	sub	sp, #56	; 0x38
 80007d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
 80007ee:	4b43      	ldr	r3, [pc, #268]	; (80008fc <MX_GPIO_Init+0x128>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a42      	ldr	r2, [pc, #264]	; (80008fc <MX_GPIO_Init+0x128>)
 80007f4:	f043 0320 	orr.w	r3, r3, #32
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b40      	ldr	r3, [pc, #256]	; (80008fc <MX_GPIO_Init+0x128>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0320 	and.w	r3, r3, #32
 8000802:	623b      	str	r3, [r7, #32]
 8000804:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
 800080a:	4b3c      	ldr	r3, [pc, #240]	; (80008fc <MX_GPIO_Init+0x128>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a3b      	ldr	r2, [pc, #236]	; (80008fc <MX_GPIO_Init+0x128>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b39      	ldr	r3, [pc, #228]	; (80008fc <MX_GPIO_Init+0x128>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	61fb      	str	r3, [r7, #28]
 8000820:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
 8000826:	4b35      	ldr	r3, [pc, #212]	; (80008fc <MX_GPIO_Init+0x128>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a34      	ldr	r2, [pc, #208]	; (80008fc <MX_GPIO_Init+0x128>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b32      	ldr	r3, [pc, #200]	; (80008fc <MX_GPIO_Init+0x128>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	4b2e      	ldr	r3, [pc, #184]	; (80008fc <MX_GPIO_Init+0x128>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a2d      	ldr	r2, [pc, #180]	; (80008fc <MX_GPIO_Init+0x128>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <MX_GPIO_Init+0x128>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b27      	ldr	r3, [pc, #156]	; (80008fc <MX_GPIO_Init+0x128>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a26      	ldr	r2, [pc, #152]	; (80008fc <MX_GPIO_Init+0x128>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b24      	ldr	r3, [pc, #144]	; (80008fc <MX_GPIO_Init+0x128>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <MX_GPIO_Init+0x128>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a1f      	ldr	r2, [pc, #124]	; (80008fc <MX_GPIO_Init+0x128>)
 8000880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <MX_GPIO_Init+0x128>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <MX_GPIO_Init+0x128>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a18      	ldr	r2, [pc, #96]	; (80008fc <MX_GPIO_Init+0x128>)
 800089c:	f043 0310 	orr.w	r3, r3, #16
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <MX_GPIO_Init+0x128>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0310 	and.w	r3, r3, #16
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_GPIO_Init+0x128>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <MX_GPIO_Init+0x128>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_GPIO_Init+0x128>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80008d0:	480b      	ldr	r0, [pc, #44]	; (8000900 <MX_GPIO_Init+0x12c>)
 80008d2:	f004 f993 	bl	8004bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 80008d6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ec:	4619      	mov	r1, r3
 80008ee:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_GPIO_Init+0x12c>)
 80008f0:	f003 fecc 	bl	800468c <HAL_GPIO_Init>

}
 80008f4:	bf00      	nop
 80008f6:	3738      	adds	r7, #56	; 0x38
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40021800 	.word	0x40021800

08000904 <HAL_I2C_MspInit>:
  /* USER CODE END I2C3_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a29      	ldr	r2, [pc, #164]	; (80009c8 <HAL_I2C_MspInit+0xc4>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d14b      	bne.n	80009be <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	4b28      	ldr	r3, [pc, #160]	; (80009cc <HAL_I2C_MspInit+0xc8>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a27      	ldr	r2, [pc, #156]	; (80009cc <HAL_I2C_MspInit+0xc8>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <HAL_I2C_MspInit+0xc8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <HAL_I2C_MspInit+0xc8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a20      	ldr	r2, [pc, #128]	; (80009cc <HAL_I2C_MspInit+0xc8>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <HAL_I2C_MspInit+0xc8>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800095e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000964:	2312      	movs	r3, #18
 8000966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000970:	2304      	movs	r3, #4
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	4815      	ldr	r0, [pc, #84]	; (80009d0 <HAL_I2C_MspInit+0xcc>)
 800097c:	f003 fe86 	bl	800468c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000986:	2312      	movs	r3, #18
 8000988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000992:	2304      	movs	r3, #4
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <HAL_I2C_MspInit+0xd0>)
 800099e:	f003 fe75 	bl	800468c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_I2C_MspInit+0xc8>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_I2C_MspInit+0xc8>)
 80009ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_I2C_MspInit+0xc8>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40005c00 	.word	0x40005c00
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40020000 	.word	0x40020000

080009d8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <HAL_I2C_MspDeInit+0x3c>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d10f      	bne.n	8000a0a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <HAL_I2C_MspDeInit+0x40>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <HAL_I2C_MspDeInit+0x40>)
 80009f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80009f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009fa:	4808      	ldr	r0, [pc, #32]	; (8000a1c <HAL_I2C_MspDeInit+0x44>)
 80009fc:	f003 fff2 	bl	80049e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8000a00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a04:	4806      	ldr	r0, [pc, #24]	; (8000a20 <HAL_I2C_MspDeInit+0x48>)
 8000a06:	f003 ffed 	bl	80049e4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40005c00 	.word	0x40005c00
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020000 	.word	0x40020000

08000a24 <HAL_LTDC_MspInit>:
  /* USER CODE END LTDC_Init 2 */

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b09a      	sub	sp, #104	; 0x68
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a40:	2230      	movs	r2, #48	; 0x30
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f007 fe6f 	bl	8008728 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a81      	ldr	r2, [pc, #516]	; (8000c54 <HAL_LTDC_MspInit+0x230>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	f040 80fa 	bne.w	8000c4a <HAL_LTDC_MspInit+0x226>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000a56:	2308      	movs	r3, #8
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8000a5a:	2364      	movs	r3, #100	; 0x64
 8000a5c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000a5e:	2305      	movs	r3, #5
 8000a60:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000a62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a66:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f006 f80d 	bl	8006a8c <HAL_RCCEx_PeriphCLKConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8000a78:	f000 fcb6 	bl	80013e8 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
 8000a80:	4b75      	ldr	r3, [pc, #468]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a84:	4a74      	ldr	r2, [pc, #464]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000a86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a8a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8c:	4b72      	ldr	r3, [pc, #456]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a94:	623b      	str	r3, [r7, #32]
 8000a96:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
 8000a9c:	4b6e      	ldr	r3, [pc, #440]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	4a6d      	ldr	r2, [pc, #436]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000aa2:	f043 0320 	orr.w	r3, r3, #32
 8000aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa8:	4b6b      	ldr	r3, [pc, #428]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f003 0320 	and.w	r3, r3, #32
 8000ab0:	61fb      	str	r3, [r7, #28]
 8000ab2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
 8000ab8:	4b67      	ldr	r3, [pc, #412]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	4a66      	ldr	r2, [pc, #408]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac4:	4b64      	ldr	r3, [pc, #400]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	61bb      	str	r3, [r7, #24]
 8000ace:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	4b60      	ldr	r3, [pc, #384]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	4a5f      	ldr	r2, [pc, #380]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000ada:	f043 0302 	orr.w	r3, r3, #2
 8000ade:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae0:	4b5d      	ldr	r3, [pc, #372]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	4b59      	ldr	r3, [pc, #356]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	4a58      	ldr	r2, [pc, #352]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000afa:	6313      	str	r3, [r2, #48]	; 0x30
 8000afc:	4b56      	ldr	r3, [pc, #344]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	4b52      	ldr	r3, [pc, #328]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	4a51      	ldr	r2, [pc, #324]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6313      	str	r3, [r2, #48]	; 0x30
 8000b18:	4b4f      	ldr	r3, [pc, #316]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	4b4b      	ldr	r3, [pc, #300]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	4a4a      	ldr	r2, [pc, #296]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000b2e:	f043 0308 	orr.w	r3, r3, #8
 8000b32:	6313      	str	r3, [r2, #48]	; 0x30
 8000b34:	4b48      	ldr	r3, [pc, #288]	; (8000c58 <HAL_LTDC_MspInit+0x234>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	f003 0308 	and.w	r3, r3, #8
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b44:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b52:	230e      	movs	r3, #14
 8000b54:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	483f      	ldr	r0, [pc, #252]	; (8000c5c <HAL_LTDC_MspInit+0x238>)
 8000b5e:	f003 fd95 	bl	800468c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8000b62:	f641 0358 	movw	r3, #6232	; 0x1858
 8000b66:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b74:	230e      	movs	r3, #14
 8000b76:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4838      	ldr	r0, [pc, #224]	; (8000c60 <HAL_LTDC_MspInit+0x23c>)
 8000b80:	f003 fd84 	bl	800468c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b84:	2303      	movs	r3, #3
 8000b86:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b94:	2309      	movs	r3, #9
 8000b96:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4831      	ldr	r0, [pc, #196]	; (8000c64 <HAL_LTDC_MspInit+0x240>)
 8000ba0:	f003 fd74 	bl	800468c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000ba4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000ba8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bb6:	230e      	movs	r3, #14
 8000bb8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4828      	ldr	r0, [pc, #160]	; (8000c64 <HAL_LTDC_MspInit+0x240>)
 8000bc2:	f003 fd63 	bl	800468c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8000bc6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000bca:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bd8:	230e      	movs	r3, #14
 8000bda:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bdc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000be0:	4619      	mov	r1, r3
 8000be2:	4821      	ldr	r0, [pc, #132]	; (8000c68 <HAL_LTDC_MspInit+0x244>)
 8000be4:	f003 fd52 	bl	800468c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000be8:	23c0      	movs	r3, #192	; 0xc0
 8000bea:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bf8:	230e      	movs	r3, #14
 8000bfa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c00:	4619      	mov	r1, r3
 8000c02:	481a      	ldr	r0, [pc, #104]	; (8000c6c <HAL_LTDC_MspInit+0x248>)
 8000c04:	f003 fd42 	bl	800468c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c08:	2308      	movs	r3, #8
 8000c0a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c18:	230e      	movs	r3, #14
 8000c1a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c20:	4619      	mov	r1, r3
 8000c22:	4813      	ldr	r0, [pc, #76]	; (8000c70 <HAL_LTDC_MspInit+0x24c>)
 8000c24:	f003 fd32 	bl	800468c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000c28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c2c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c3a:	2309      	movs	r3, #9
 8000c3c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c42:	4619      	mov	r1, r3
 8000c44:	4808      	ldr	r0, [pc, #32]	; (8000c68 <HAL_LTDC_MspInit+0x244>)
 8000c46:	f003 fd21 	bl	800468c <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3768      	adds	r7, #104	; 0x68
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40016800 	.word	0x40016800
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40021400 	.word	0x40021400
 8000c60:	40020000 	.word	0x40020000
 8000c64:	40020400 	.word	0x40020400
 8000c68:	40021800 	.word	0x40021800
 8000c6c:	40020800 	.word	0x40020800
 8000c70:	40020c00 	.word	0x40020c00

08000c74 <drawSquare>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void drawSquare(uint16_t x, uint16_t y, uint8_t color) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	80fb      	strh	r3, [r7, #6]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	80bb      	strh	r3, [r7, #4]
 8000c82:	4613      	mov	r3, r2
 8000c84:	70fb      	strb	r3, [r7, #3]
	if ( color == EMPTY ) {
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d104      	bne.n	8000c96 <drawSquare+0x22>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c8c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000c90:	f001 ff12 	bl	8002ab8 <BSP_LCD_SetTextColor>
 8000c94:	e00d      	b.n	8000cb2 <drawSquare+0x3e>
	} else if ( color == SNAKE ) {
 8000c96:	78fb      	ldrb	r3, [r7, #3]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d104      	bne.n	8000ca6 <drawSquare+0x32>
		BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000c9c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000ca0:	f001 ff0a 	bl	8002ab8 <BSP_LCD_SetTextColor>
 8000ca4:	e005      	b.n	8000cb2 <drawSquare+0x3e>
	} else if ( color == FRUIT ) {
 8000ca6:	78fb      	ldrb	r3, [r7, #3]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d102      	bne.n	8000cb2 <drawSquare+0x3e>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <drawSquare+0x6c>)
 8000cae:	f001 ff03 	bl	8002ab8 <BSP_LCD_SetTextColor>
	}
	BSP_LCD_FillRect((x*9)+41, (y*9)+61, 9, 9);
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	00d2      	lsls	r2, r2, #3
 8000cb8:	4413      	add	r3, r2
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	3329      	adds	r3, #41	; 0x29
 8000cbe:	b298      	uxth	r0, r3
 8000cc0:	88bb      	ldrh	r3, [r7, #4]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	00d2      	lsls	r2, r2, #3
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	333d      	adds	r3, #61	; 0x3d
 8000ccc:	b299      	uxth	r1, r3
 8000cce:	2309      	movs	r3, #9
 8000cd0:	2209      	movs	r2, #9
 8000cd2:	f002 f9bf 	bl	8003054 <BSP_LCD_FillRect>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	ffff0000 	.word	0xffff0000

08000ce4 <updateHead>:


void updateHead() {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	if ( dir[0] == LEFT ) {	// HEAD MOVEMENT
 8000ce8:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <updateHead+0xa4>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d106      	bne.n	8000cfe <updateHead+0x1a>
		x--;
 8000cf0:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <updateHead+0xa8>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <updateHead+0xa8>)
 8000cfa:	801a      	strh	r2, [r3, #0]
 8000cfc:	e01f      	b.n	8000d3e <updateHead+0x5a>
	} else if ( dir[0] == RIGHT ) {
 8000cfe:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <updateHead+0xa4>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d106      	bne.n	8000d14 <updateHead+0x30>
		x++;
 8000d06:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <updateHead+0xa8>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <updateHead+0xa8>)
 8000d10:	801a      	strh	r2, [r3, #0]
 8000d12:	e014      	b.n	8000d3e <updateHead+0x5a>
	} else if ( dir[0] == DOWN ) {
 8000d14:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <updateHead+0xa4>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	d106      	bne.n	8000d2a <updateHead+0x46>
		y++;
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <updateHead+0xac>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <updateHead+0xac>)
 8000d26:	801a      	strh	r2, [r3, #0]
 8000d28:	e009      	b.n	8000d3e <updateHead+0x5a>
	} else if ( dir[0] == UP ) {
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <updateHead+0xa4>)
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d105      	bne.n	8000d3e <updateHead+0x5a>
		y--;
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <updateHead+0xac>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <updateHead+0xac>)
 8000d3c:	801a      	strh	r2, [r3, #0]
	}
	if (BSP_LCD_ReadPixel((x*9)+41, (y*9)+61) == LCD_COLOR_GREEN) {
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <updateHead+0xa8>)
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	00d2      	lsls	r2, r2, #3
 8000d46:	4413      	add	r3, r2
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	3329      	adds	r3, #41	; 0x29
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <updateHead+0xac>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	4619      	mov	r1, r3
 8000d54:	00c9      	lsls	r1, r1, #3
 8000d56:	440b      	add	r3, r1
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	333d      	adds	r3, #61	; 0x3d
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4610      	mov	r0, r2
 8000d62:	f001 fef5 	bl	8002b50 <BSP_LCD_ReadPixel>
 8000d66:	4603      	mov	r3, r0
 8000d68:	f1b3 2fff 	cmp.w	r3, #4278255360	; 0xff00ff00
 8000d6c:	d102      	bne.n	8000d74 <updateHead+0x90>
		run = 0;
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <updateHead+0xb0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
	}
	drawSquare(x, y, SNAKE);
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <updateHead+0xa8>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <updateHead+0xac>)
 8000d7a:	8811      	ldrh	r1, [r2, #0]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff78 	bl	8000c74 <drawSquare>
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000114 	.word	0x20000114
 8000d8c:	2000053e 	.word	0x2000053e
 8000d90:	20000590 	.word	0x20000590
 8000d94:	20000006 	.word	0x20000006

08000d98 <updateTail>:


void updateTail() {	// kill tail block, call before updateMovement
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
	if (fruitEaten == 0) {
 8000d9e:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <updateTail+0xf4>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d157      	bne.n	8000e56 <updateTail+0xbe>
		drawSquare(lstX, lstY, EMPTY);
 8000da6:	4b3a      	ldr	r3, [pc, #232]	; (8000e90 <updateTail+0xf8>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	4a3a      	ldr	r2, [pc, #232]	; (8000e94 <updateTail+0xfc>)
 8000dac:	8811      	ldrh	r1, [r2, #0]
 8000dae:	2200      	movs	r2, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff5f 	bl	8000c74 <drawSquare>
		if ( dir[len-1] == LEFT ) {	// TAIL MOVEMENT
 8000db6:	4b38      	ldr	r3, [pc, #224]	; (8000e98 <updateTail+0x100>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	4a37      	ldr	r2, [pc, #220]	; (8000e9c <updateTail+0x104>)
 8000dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d106      	bne.n	8000dd4 <updateTail+0x3c>
			lstX--;
 8000dc6:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <updateTail+0xf8>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	4b30      	ldr	r3, [pc, #192]	; (8000e90 <updateTail+0xf8>)
 8000dd0:	801a      	strh	r2, [r3, #0]
 8000dd2:	e02b      	b.n	8000e2c <updateTail+0x94>
		} else if ( dir[len-1] == RIGHT ) {
 8000dd4:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <updateTail+0x100>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	4a30      	ldr	r2, [pc, #192]	; (8000e9c <updateTail+0x104>)
 8000ddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d106      	bne.n	8000df2 <updateTail+0x5a>
			lstX++;
 8000de4:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <updateTail+0xf8>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <updateTail+0xf8>)
 8000dee:	801a      	strh	r2, [r3, #0]
 8000df0:	e01c      	b.n	8000e2c <updateTail+0x94>
		} else if ( dir[len-1] == DOWN ) {
 8000df2:	4b29      	ldr	r3, [pc, #164]	; (8000e98 <updateTail+0x100>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	4a28      	ldr	r2, [pc, #160]	; (8000e9c <updateTail+0x104>)
 8000dfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d106      	bne.n	8000e10 <updateTail+0x78>
			lstY++;
 8000e02:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <updateTail+0xfc>)
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	3301      	adds	r3, #1
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <updateTail+0xfc>)
 8000e0c:	801a      	strh	r2, [r3, #0]
 8000e0e:	e00d      	b.n	8000e2c <updateTail+0x94>
		} else if ( dir[len-1] == UP ) {
 8000e10:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <updateTail+0x100>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	3b01      	subs	r3, #1
 8000e16:	4a21      	ldr	r2, [pc, #132]	; (8000e9c <updateTail+0x104>)
 8000e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d105      	bne.n	8000e2c <updateTail+0x94>
			lstY--;
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <updateTail+0xfc>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <updateTail+0xfc>)
 8000e2a:	801a      	strh	r2, [r3, #0]
		}
		for (int i = len-1; i>0; i--) {
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <updateTail+0x100>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	e00b      	b.n	8000e4e <updateTail+0xb6>
			dir[i] = dir[i-1];
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <updateTail+0x104>)
 8000e3c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000e40:	4a16      	ldr	r2, [pc, #88]	; (8000e9c <updateTail+0x104>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = len-1; i>0; i--) {
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	dcf0      	bgt.n	8000e36 <updateTail+0x9e>
		fruitEaten = 0;
		for (int i = len; i>0; i--) {
			dir[i] = dir[i-1];
		}
	}
}
 8000e54:	e015      	b.n	8000e82 <updateTail+0xea>
		fruitEaten = 0;
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <updateTail+0xf4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
		for (int i = len; i>0; i--) {
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <updateTail+0x100>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	e00b      	b.n	8000e7c <updateTail+0xe4>
			dir[i] = dir[i-1];
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	4a0c      	ldr	r2, [pc, #48]	; (8000e9c <updateTail+0x104>)
 8000e6a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <updateTail+0x104>)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = len; i>0; i--) {
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	dcf0      	bgt.n	8000e64 <updateTail+0xcc>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000322 	.word	0x20000322
 8000e90:	200005a4 	.word	0x200005a4
 8000e94:	200005a6 	.word	0x200005a6
 8000e98:	20000004 	.word	0x20000004
 8000e9c:	20000114 	.word	0x20000114

08000ea0 <newFruit>:


void newFruit() {	// randomize position of new fruit
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	do {
		frtX = (rand() % (width-1)) + 1;
 8000ea4:	f007 fc76 	bl	8008794 <rand>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <newFruit+0xa0>)
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	fb92 f1f3 	sdiv	r1, r2, r3
 8000eb4:	fb03 f301 	mul.w	r3, r3, r1
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <newFruit+0xa4>)
 8000ec2:	801a      	strh	r2, [r3, #0]
		frtY = (rand() % (height-1)) + 1;
 8000ec4:	f007 fc66 	bl	8008794 <rand>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <newFruit+0xa8>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	fb92 f1f3 	sdiv	r1, r2, r3
 8000ed4:	fb03 f301 	mul.w	r3, r3, r1
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	3301      	adds	r3, #1
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <newFruit+0xac>)
 8000ee2:	801a      	strh	r2, [r3, #0]
	} while(( frtX == x && frtY == y ) || ( BSP_LCD_ReadPixel((frtX*9)+41, (frtY*9)+61) == LCD_COLOR_GREEN ));
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <newFruit+0xa4>)
 8000ee6:	881a      	ldrh	r2, [r3, #0]
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <newFruit+0xb0>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d105      	bne.n	8000efc <newFruit+0x5c>
 8000ef0:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <newFruit+0xac>)
 8000ef2:	881a      	ldrh	r2, [r3, #0]
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <newFruit+0xb4>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d0d3      	beq.n	8000ea4 <newFruit+0x4>
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <newFruit+0xa4>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	00d2      	lsls	r2, r2, #3
 8000f04:	4413      	add	r3, r2
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	3329      	adds	r3, #41	; 0x29
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <newFruit+0xac>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	00c9      	lsls	r1, r1, #3
 8000f14:	440b      	add	r3, r1
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	333d      	adds	r3, #61	; 0x3d
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4610      	mov	r0, r2
 8000f20:	f001 fe16 	bl	8002b50 <BSP_LCD_ReadPixel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	f1b3 2fff 	cmp.w	r3, #4278255360	; 0xff00ff00
 8000f2a:	d0bb      	beq.n	8000ea4 <newFruit+0x4>
	drawSquare(frtX, frtY, FRUIT);
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <newFruit+0xa4>)
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <newFruit+0xac>)
 8000f32:	8811      	ldrh	r1, [r2, #0]
 8000f34:	2202      	movs	r2, #2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fe9c 	bl	8000c74 <drawSquare>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000000 	.word	0x20000000
 8000f44:	2000058c 	.word	0x2000058c
 8000f48:	20000002 	.word	0x20000002
 8000f4c:	20000540 	.word	0x20000540
 8000f50:	2000053e 	.word	0x2000053e
 8000f54:	20000590 	.word	0x20000590

08000f58 <endGame>:

void endGame() {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	run = 0;
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <endGame+0x1c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
	BSP_LCD_Clear(LCD_COLOR_RED);
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <endGame+0x20>)
 8000f64:	f001 fe9a 	bl	8002c9c <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f001 fda4 	bl	8002ab8 <BSP_LCD_SetTextColor>

}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000006 	.word	0x20000006
 8000f78:	ffff0000 	.word	0xffff0000

08000f7c <checkDeath>:

void checkDeath() {
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
	if ((x>width-1) || (x<0) || (y>height-1) || (y<0)) {
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <checkDeath+0x2c>)
 8000f82:	881a      	ldrh	r2, [r3, #0]
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <checkDeath+0x30>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d905      	bls.n	8000f98 <checkDeath+0x1c>
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <checkDeath+0x34>)
 8000f8e:	881a      	ldrh	r2, [r3, #0]
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <checkDeath+0x38>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d802      	bhi.n	8000f9e <checkDeath+0x22>
		run = 0;
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <checkDeath+0x3c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
	}
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	2000053e 	.word	0x2000053e
 8000fb0:	20000002 	.word	0x20000002
 8000fb4:	20000590 	.word	0x20000590
 8000fb8:	20000006 	.word	0x20000006

08000fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc2:	f002 fd55 	bl	8003a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc6:	f000 f957 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fca:	f7ff fc03 	bl	80007d4 <MX_GPIO_Init>
  MX_CRC_Init();
 8000fce:	f7ff fadb 	bl	8000588 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000fd2:	f7ff fb0f 	bl	80005f4 <MX_DMA2D_Init>
  MX_TIM2_Init();
 8000fd6:	f000 fbdd 	bl	8001794 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fda:	f000 fc29 	bl	8001830 <MX_TIM3_Init>
  MX_RNG_Init();
 8000fde:	f000 fa09 	bl	80013f4 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  BSP_TS_Init(320,240);
 8000fe2:	21f0      	movs	r1, #240	; 0xf0
 8000fe4:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000fe8:	f002 fc56 	bl	8003898 <BSP_TS_Init>
  BSP_LCD_Init();
 8000fec:	f001 fc6e 	bl	80028cc <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000ff0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f001 fceb 	bl	80029d0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f001 fd4c 	bl	8002a98 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8001000:	f002 f882 	bl	8003108 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001004:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001008:	f001 fe48 	bl	8002c9c <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f001 fd52 	bl	8002ab8 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(40, 60, 163, 163);
 8001014:	23a3      	movs	r3, #163	; 0xa3
 8001016:	22a3      	movs	r2, #163	; 0xa3
 8001018:	213c      	movs	r1, #60	; 0x3c
 800101a:	2028      	movs	r0, #40	; 0x28
 800101c:	f001 ffe8 	bl	8002ff0 <BSP_LCD_DrawRect>
  BSP_LCD_SetFont(&Font16);
 8001020:	4880      	ldr	r0, [pc, #512]	; (8001224 <main+0x268>)
 8001022:	f001 fd7b 	bl	8002b1c <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001026:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800102a:	f001 fd5d 	bl	8002ae8 <BSP_LCD_SetBackColor>

  dir[0] = RIGHT;
 800102e:	4b7e      	ldr	r3, [pc, #504]	; (8001228 <main+0x26c>)
 8001030:	2201      	movs	r2, #1
 8001032:	801a      	strh	r2, [r3, #0]
  dir[1] = RIGHT;
 8001034:	4b7c      	ldr	r3, [pc, #496]	; (8001228 <main+0x26c>)
 8001036:	2201      	movs	r2, #1
 8001038:	805a      	strh	r2, [r3, #2]
  x = width/2; // head x
 800103a:	4b7c      	ldr	r3, [pc, #496]	; (800122c <main+0x270>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	085b      	lsrs	r3, r3, #1
 8001040:	b29a      	uxth	r2, r3
 8001042:	4b7b      	ldr	r3, [pc, #492]	; (8001230 <main+0x274>)
 8001044:	801a      	strh	r2, [r3, #0]
  y = height/2; // head y
 8001046:	4b7b      	ldr	r3, [pc, #492]	; (8001234 <main+0x278>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	085b      	lsrs	r3, r3, #1
 800104c:	b29a      	uxth	r2, r3
 800104e:	4b7a      	ldr	r3, [pc, #488]	; (8001238 <main+0x27c>)
 8001050:	801a      	strh	r2, [r3, #0]
  lstX = x-1; // tail x
 8001052:	4b77      	ldr	r3, [pc, #476]	; (8001230 <main+0x274>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	3b01      	subs	r3, #1
 8001058:	b29a      	uxth	r2, r3
 800105a:	4b78      	ldr	r3, [pc, #480]	; (800123c <main+0x280>)
 800105c:	801a      	strh	r2, [r3, #0]
  lstY = y; // tail y
 800105e:	4b76      	ldr	r3, [pc, #472]	; (8001238 <main+0x27c>)
 8001060:	881a      	ldrh	r2, [r3, #0]
 8001062:	4b77      	ldr	r3, [pc, #476]	; (8001240 <main+0x284>)
 8001064:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 8001066:	4877      	ldr	r0, [pc, #476]	; (8001244 <main+0x288>)
 8001068:	f006 fda6 	bl	8007bb8 <HAL_TIM_Base_Start_IT>
  srand( TIM2->CNT );
 800106c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	4618      	mov	r0, r3
 8001074:	f007 fb60 	bl	8008738 <srand>
  newFruit();
 8001078:	f7ff ff12 	bl	8000ea0 <newFruit>

  HAL_TIM_Base_Start_IT(&htim3);
 800107c:	4872      	ldr	r0, [pc, #456]	; (8001248 <main+0x28c>)
 800107e:	f006 fd9b 	bl	8007bb8 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  BSP_TS_GetState(&TS_State);
 8001082:	4872      	ldr	r0, [pc, #456]	; (800124c <main+0x290>)
 8001084:	f002 fc42 	bl	800390c <BSP_TS_GetState>
	  if ( frtX == x && frtY == y ) {
 8001088:	4b71      	ldr	r3, [pc, #452]	; (8001250 <main+0x294>)
 800108a:	881a      	ldrh	r2, [r3, #0]
 800108c:	4b68      	ldr	r3, [pc, #416]	; (8001230 <main+0x274>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d11c      	bne.n	80010ce <main+0x112>
 8001094:	4b6f      	ldr	r3, [pc, #444]	; (8001254 <main+0x298>)
 8001096:	881a      	ldrh	r2, [r3, #0]
 8001098:	4b67      	ldr	r3, [pc, #412]	; (8001238 <main+0x27c>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	429a      	cmp	r2, r3
 800109e:	d116      	bne.n	80010ce <main+0x112>
		  fruitEaten = 1;
 80010a0:	4b6d      	ldr	r3, [pc, #436]	; (8001258 <main+0x29c>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
		  srand( TIM2->CNT );
 80010a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ac:	4618      	mov	r0, r3
 80010ae:	f007 fb43 	bl	8008738 <srand>
		  newFruit();
 80010b2:	f7ff fef5 	bl	8000ea0 <newFruit>
		  scr++;
 80010b6:	4b69      	ldr	r3, [pc, #420]	; (800125c <main+0x2a0>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	b29a      	uxth	r2, r3
 80010be:	4b67      	ldr	r3, [pc, #412]	; (800125c <main+0x2a0>)
 80010c0:	801a      	strh	r2, [r3, #0]
		  len++;
 80010c2:	4b67      	ldr	r3, [pc, #412]	; (8001260 <main+0x2a4>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	4b65      	ldr	r3, [pc, #404]	; (8001260 <main+0x2a4>)
 80010cc:	801a      	strh	r2, [r3, #0]
	  }

	  if ( TS_State.TouchDetected ) {
 80010ce:	4b5f      	ldr	r3, [pc, #380]	; (800124c <main+0x290>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0d5      	beq.n	8001082 <main+0xc6>
	      		  float a = TS_State.X;
 80010d6:	4b5d      	ldr	r3, [pc, #372]	; (800124c <main+0x290>)
 80010d8:	885b      	ldrh	r3, [r3, #2]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010e2:	edc7 7a01 	vstr	s15, [r7, #4]
	      		  float b = TS_State.Y;
 80010e6:	4b59      	ldr	r3, [pc, #356]	; (800124c <main+0x290>)
 80010e8:	889b      	ldrh	r3, [r3, #4]
 80010ea:	ee07 3a90 	vmov	s15, r3
 80010ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f2:	edc7 7a00 	vstr	s15, [r7]

	      		  if ((40 < a && a < 202 )  && (222 < b )  && ( dir[1] != UP )) {
 80010f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010fa:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001264 <main+0x2a8>
 80010fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	dd19      	ble.n	800113c <main+0x180>
 8001108:	edd7 7a01 	vldr	s15, [r7, #4]
 800110c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001268 <main+0x2ac>
 8001110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001118:	d510      	bpl.n	800113c <main+0x180>
 800111a:	edd7 7a00 	vldr	s15, [r7]
 800111e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800126c <main+0x2b0>
 8001122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112a:	dd07      	ble.n	800113c <main+0x180>
 800112c:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <main+0x26c>)
 800112e:	885b      	ldrh	r3, [r3, #2]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d003      	beq.n	800113c <main+0x180>
	      			  dir[0] = DOWN;
 8001134:	4b3c      	ldr	r3, [pc, #240]	; (8001228 <main+0x26c>)
 8001136:	2203      	movs	r2, #3
 8001138:	801a      	strh	r2, [r3, #0]
 800113a:	e071      	b.n	8001220 <main+0x264>
	      		  } else if ((40 < a && a < 202 )  && (b < 60 )  && ( dir[1] != DOWN )) {
 800113c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001140:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001264 <main+0x2a8>
 8001144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114c:	dd19      	ble.n	8001182 <main+0x1c6>
 800114e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001152:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001268 <main+0x2ac>
 8001156:	eef4 7ac7 	vcmpe.f32	s15, s14
 800115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115e:	d510      	bpl.n	8001182 <main+0x1c6>
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001270 <main+0x2b4>
 8001168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800116c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001170:	d507      	bpl.n	8001182 <main+0x1c6>
 8001172:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <main+0x26c>)
 8001174:	885b      	ldrh	r3, [r3, #2]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d003      	beq.n	8001182 <main+0x1c6>
	      			  dir[0] = UP;
 800117a:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <main+0x26c>)
 800117c:	2202      	movs	r2, #2
 800117e:	801a      	strh	r2, [r3, #0]
 8001180:	e04e      	b.n	8001220 <main+0x264>
	      		  } else if ((40 > a )  && (60 < b && b < 222 )  && ( dir[1] != RIGHT )) {
 8001182:	edd7 7a01 	vldr	s15, [r7, #4]
 8001186:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001264 <main+0x2a8>
 800118a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001192:	d519      	bpl.n	80011c8 <main+0x20c>
 8001194:	edd7 7a00 	vldr	s15, [r7]
 8001198:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001270 <main+0x2b4>
 800119c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	dd10      	ble.n	80011c8 <main+0x20c>
 80011a6:	edd7 7a00 	vldr	s15, [r7]
 80011aa:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800126c <main+0x2b0>
 80011ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b6:	d507      	bpl.n	80011c8 <main+0x20c>
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <main+0x26c>)
 80011ba:	885b      	ldrh	r3, [r3, #2]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d003      	beq.n	80011c8 <main+0x20c>
	      			  dir[0] = LEFT;
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <main+0x26c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	801a      	strh	r2, [r3, #0]
 80011c6:	e02b      	b.n	8001220 <main+0x264>
	      		  } else if (( a > 202 && a < 240 ) && ( b > 60 && b < 222 ) && ( dir[1] != LEFT )) {
 80011c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011cc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001268 <main+0x2ac>
 80011d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d8:	dd22      	ble.n	8001220 <main+0x264>
 80011da:	edd7 7a01 	vldr	s15, [r7, #4]
 80011de:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001274 <main+0x2b8>
 80011e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ea:	d519      	bpl.n	8001220 <main+0x264>
 80011ec:	edd7 7a00 	vldr	s15, [r7]
 80011f0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001270 <main+0x2b4>
 80011f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	dd10      	ble.n	8001220 <main+0x264>
 80011fe:	edd7 7a00 	vldr	s15, [r7]
 8001202:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800126c <main+0x2b0>
 8001206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120e:	d507      	bpl.n	8001220 <main+0x264>
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <main+0x26c>)
 8001212:	885b      	ldrh	r3, [r3, #2]
 8001214:	2b00      	cmp	r3, #0
 8001216:	f43f af34 	beq.w	8001082 <main+0xc6>
	      			  dir[0] = RIGHT;
 800121a:	4b03      	ldr	r3, [pc, #12]	; (8001228 <main+0x26c>)
 800121c:	2201      	movs	r2, #1
 800121e:	801a      	strh	r2, [r3, #0]
	  BSP_TS_GetState(&TS_State);
 8001220:	e72f      	b.n	8001082 <main+0xc6>
 8001222:	bf00      	nop
 8001224:	2000007c 	.word	0x2000007c
 8001228:	20000114 	.word	0x20000114
 800122c:	20000000 	.word	0x20000000
 8001230:	2000053e 	.word	0x2000053e
 8001234:	20000002 	.word	0x20000002
 8001238:	20000590 	.word	0x20000590
 800123c:	200005a4 	.word	0x200005a4
 8001240:	200005a6 	.word	0x200005a6
 8001244:	200005a8 	.word	0x200005a8
 8001248:	20000544 	.word	0x20000544
 800124c:	20000324 	.word	0x20000324
 8001250:	2000058c 	.word	0x2000058c
 8001254:	20000540 	.word	0x20000540
 8001258:	20000322 	.word	0x20000322
 800125c:	20000314 	.word	0x20000314
 8001260:	20000004 	.word	0x20000004
 8001264:	42200000 	.word	0x42200000
 8001268:	434a0000 	.word	0x434a0000
 800126c:	435e0000 	.word	0x435e0000
 8001270:	42700000 	.word	0x42700000
 8001274:	43700000 	.word	0x43700000

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	; 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	2230      	movs	r2, #48	; 0x30
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f007 fa4e 	bl	8008728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	4b28      	ldr	r3, [pc, #160]	; (8001344 <SystemClock_Config+0xcc>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	4a27      	ldr	r2, [pc, #156]	; (8001344 <SystemClock_Config+0xcc>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012aa:	6413      	str	r3, [r2, #64]	; 0x40
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <SystemClock_Config+0xcc>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <SystemClock_Config+0xd0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012c4:	4a20      	ldr	r2, [pc, #128]	; (8001348 <SystemClock_Config+0xd0>)
 80012c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <SystemClock_Config+0xd0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d8:	2301      	movs	r3, #1
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e2:	2302      	movs	r3, #2
 80012e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012ec:	2304      	movs	r3, #4
 80012ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012f0:	2348      	movs	r3, #72	; 0x48
 80012f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80012f8:	2303      	movs	r3, #3
 80012fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 0320 	add.w	r3, r7, #32
 8001300:	4618      	mov	r0, r3
 8001302:	f004 ff63 	bl	80061cc <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800130c:	f000 f86c 	bl	80013e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001310:	230f      	movs	r3, #15
 8001312:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001314:	2302      	movs	r3, #2
 8001316:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800131c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001320:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	2102      	movs	r1, #2
 800132c:	4618      	mov	r0, r3
 800132e:	f005 f9c5 	bl	80066bc <HAL_RCC_ClockConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001338:	f000 f856 	bl	80013e8 <Error_Handler>
  }
}
 800133c:	bf00      	nop
 800133e:	3750      	adds	r7, #80	; 0x50
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	40007000 	.word	0x40007000

0800134c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM3) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d12d      	bne.n	80013ba <HAL_TIM_PeriodElapsedCallback+0x6e>
		if ( run == 1 ) {
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d129      	bne.n	80013ba <HAL_TIM_PeriodElapsedCallback+0x6e>
			updateTail();
 8001366:	f7ff fd17 	bl	8000d98 <updateTail>
			updateHead();
 800136a:	f7ff fcbb 	bl	8000ce4 <updateHead>
			checkDeath();
 800136e:	f7ff fe05 	bl	8000f7c <checkDeath>
			itoa(scr, score, 10);
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	220a      	movs	r2, #10
 8001378:	4918      	ldr	r1, [pc, #96]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 800137a:	4618      	mov	r0, r3
 800137c:	f007 f9d2 	bl	8008724 <itoa>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f001 fb98 	bl	8002ab8 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(150, 100, score, CENTER_MODE);
 8001388:	2301      	movs	r3, #1
 800138a:	4a14      	ldr	r2, [pc, #80]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 800138c:	2164      	movs	r1, #100	; 0x64
 800138e:	2096      	movs	r0, #150	; 0x96
 8001390:	f001 fcf0 	bl	8002d74 <BSP_LCD_DisplayStringAt>
			if (run == 0) {
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10e      	bne.n	80013ba <HAL_TIM_PeriodElapsedCallback+0x6e>
				endGame();
 800139c:	f7ff fddc 	bl	8000f58 <endGame>
				BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80013a0:	480f      	ldr	r0, [pc, #60]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80013a2:	f001 fba1 	bl	8002ae8 <BSP_LCD_SetBackColor>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80013a6:	f04f 30ff 	mov.w	r0, #4294967295
 80013aa:	f001 fb85 	bl	8002ab8 <BSP_LCD_SetTextColor>
				BSP_LCD_DisplayStringAt(0, 136, score, CENTER_MODE);
 80013ae:	2301      	movs	r3, #1
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 80013b2:	2188      	movs	r1, #136	; 0x88
 80013b4:	2000      	movs	r0, #0
 80013b6:	f001 fcdd 	bl	8002d74 <BSP_LCD_DisplayStringAt>
			}
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d101      	bne.n	80013c8 <HAL_TIM_PeriodElapsedCallback+0x7c>
    HAL_IncTick();
 80013c4:	f002 fba6 	bl	8003b14 <HAL_IncTick>
  }
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40000400 	.word	0x40000400
 80013d4:	20000006 	.word	0x20000006
 80013d8:	20000314 	.word	0x20000314
 80013dc:	20000318 	.word	0x20000318
 80013e0:	ffff0000 	.word	0xffff0000
 80013e4:	40010000 	.word	0x40010000

080013e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ec:	b672      	cpsid	i
}
 80013ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <Error_Handler+0x8>
	...

080013f4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_RNG_Init+0x20>)
 80013fa:	4a07      	ldr	r2, [pc, #28]	; (8001418 <MX_RNG_Init+0x24>)
 80013fc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_RNG_Init+0x20>)
 8001400:	f005 fd02 	bl	8006e08 <HAL_RNG_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800140a:	f7ff ffed 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000594 	.word	0x20000594
 8001418:	50060800 	.word	0x50060800

0800141c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <HAL_RNG_MspInit+0x3c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d10d      	bne.n	800144a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_RNG_MspInit+0x40>)
 8001434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001436:	4a09      	ldr	r2, [pc, #36]	; (800145c <HAL_RNG_MspInit+0x40>)
 8001438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800143c:	6353      	str	r3, [r2, #52]	; 0x34
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <HAL_RNG_MspInit+0x40>)
 8001440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	50060800 	.word	0x50060800
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_SPI_MspInit>:
  /* USER CODE END SPI5_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <HAL_SPI_MspInit+0x84>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d12c      	bne.n	80014dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_SPI_MspInit+0x88>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <HAL_SPI_MspInit+0x88>)
 800148c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_SPI_MspInit+0x88>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_SPI_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <HAL_SPI_MspInit+0x88>)
 80014a8:	f043 0320 	orr.w	r3, r3, #32
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <HAL_SPI_MspInit+0x88>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0320 	and.w	r3, r3, #32
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80014ba:	f44f 7360 	mov.w	r3, #896	; 0x380
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80014cc:	2305      	movs	r3, #5
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <HAL_SPI_MspInit+0x8c>)
 80014d8:	f003 f8d8 	bl	800468c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	; 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40015000 	.word	0x40015000
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40021400 	.word	0x40021400

080014f0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a08      	ldr	r2, [pc, #32]	; (8001520 <HAL_SPI_MspDeInit+0x30>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d10a      	bne.n	8001518 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_SPI_MspDeInit+0x34>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HAL_SPI_MspDeInit+0x34>)
 8001508:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 800150e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <HAL_SPI_MspDeInit+0x38>)
 8001514:	f003 fa66 	bl	80049e4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40015000 	.word	0x40015000
 8001524:	40023800 	.word	0x40023800
 8001528:	40021400 	.word	0x40021400

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_MspInit+0x4c>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	4a0f      	ldr	r2, [pc, #60]	; (8001578 <HAL_MspInit+0x4c>)
 800153c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001540:	6453      	str	r3, [r2, #68]	; 0x44
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_MspInit+0x4c>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_MspInit+0x4c>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_MspInit+0x4c>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_MspInit+0x4c>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800

0800157c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <NMI_Handler+0x4>

08001582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <HardFault_Handler+0x4>

08001588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <MemManage_Handler+0x4>

0800158e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <BusFault_Handler+0x4>

08001594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <UsageFault_Handler+0x4>

0800159a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c8:	f002 faa4 	bl	8003b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <TIM3_IRQHandler+0x10>)
 80015d6:	f006 fb5f 	bl	8007c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000544 	.word	0x20000544

080015e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
	return 1;
 80015e8:	2301      	movs	r3, #1
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_kill>:

int _kill(int pid, int sig)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015fe:	f007 f84f 	bl	80086a0 <__errno>
 8001602:	4603      	mov	r3, r0
 8001604:	2216      	movs	r2, #22
 8001606:	601a      	str	r2, [r3, #0]
	return -1;
 8001608:	f04f 33ff 	mov.w	r3, #4294967295
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <_exit>:

void _exit (int status)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ffe7 	bl	80015f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001626:	e7fe      	b.n	8001626 <_exit+0x12>

08001628 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	e00a      	b.n	8001650 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800163a:	f3af 8000 	nop.w
 800163e:	4601      	mov	r1, r0
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	60ba      	str	r2, [r7, #8]
 8001646:	b2ca      	uxtb	r2, r1
 8001648:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3301      	adds	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	429a      	cmp	r2, r3
 8001656:	dbf0      	blt.n	800163a <_read+0x12>
	}

return len;
 8001658:	687b      	ldr	r3, [r7, #4]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	e009      	b.n	8001688 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	60ba      	str	r2, [r7, #8]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	dbf1      	blt.n	8001674 <_write+0x12>
	}
	return len;
 8001690:	687b      	ldr	r3, [r7, #4]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <_close>:

int _close(int file)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
	return -1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016c2:	605a      	str	r2, [r3, #4]
	return 0;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <_isatty>:

int _isatty(int file)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
	return 1;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
	return 0;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800170c:	4a14      	ldr	r2, [pc, #80]	; (8001760 <_sbrk+0x5c>)
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <_sbrk+0x60>)
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <_sbrk+0x64>)
 8001722:	4a12      	ldr	r2, [pc, #72]	; (800176c <_sbrk+0x68>)
 8001724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	429a      	cmp	r2, r3
 8001732:	d207      	bcs.n	8001744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001734:	f006 ffb4 	bl	80086a0 <__errno>
 8001738:	4603      	mov	r3, r0
 800173a:	220c      	movs	r2, #12
 800173c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	e009      	b.n	8001758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174a:	4b07      	ldr	r3, [pc, #28]	; (8001768 <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	4a05      	ldr	r2, [pc, #20]	; (8001768 <_sbrk+0x64>)
 8001754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001756:	68fb      	ldr	r3, [r7, #12]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20030000 	.word	0x20030000
 8001764:	00002000 	.word	0x00002000
 8001768:	2000032c 	.word	0x2000032c
 800176c:	20000708 	.word	0x20000708

08001770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <SystemInit+0x20>)
 8001776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800177a:	4a05      	ldr	r2, [pc, #20]	; (8001790 <SystemInit+0x20>)
 800177c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179a:	f107 0308 	add.w	r3, r7, #8
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a8:	463b      	mov	r3, r7
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <MX_TIM2_Init+0x98>)
 80017b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 80017b8:	4b1c      	ldr	r3, [pc, #112]	; (800182c <MX_TIM2_Init+0x98>)
 80017ba:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80017be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <MX_TIM2_Init+0x98>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <MX_TIM2_Init+0x98>)
 80017c8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80017cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	4b17      	ldr	r3, [pc, #92]	; (800182c <MX_TIM2_Init+0x98>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <MX_TIM2_Init+0x98>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017da:	4814      	ldr	r0, [pc, #80]	; (800182c <MX_TIM2_Init+0x98>)
 80017dc:	f006 f99c 	bl	8007b18 <HAL_TIM_Base_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017e6:	f7ff fdff 	bl	80013e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	4619      	mov	r1, r3
 80017f6:	480d      	ldr	r0, [pc, #52]	; (800182c <MX_TIM2_Init+0x98>)
 80017f8:	f006 fb56 	bl	8007ea8 <HAL_TIM_ConfigClockSource>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001802:	f7ff fdf1 	bl	80013e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800180e:	463b      	mov	r3, r7
 8001810:	4619      	mov	r1, r3
 8001812:	4806      	ldr	r0, [pc, #24]	; (800182c <MX_TIM2_Init+0x98>)
 8001814:	f006 fd72 	bl	80082fc <HAL_TIMEx_MasterConfigSynchronization>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800181e:	f7ff fde3 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200005a8 	.word	0x200005a8

08001830 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	463b      	mov	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800184c:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <MX_TIM3_Init+0x94>)
 800184e:	4a1e      	ldr	r2, [pc, #120]	; (80018c8 <MX_TIM3_Init+0x98>)
 8001850:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 8001852:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <MX_TIM3_Init+0x94>)
 8001854:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001858:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <MX_TIM3_Init+0x94>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2999;
 8001860:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <MX_TIM3_Init+0x94>)
 8001862:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001866:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <MX_TIM3_Init+0x94>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <MX_TIM3_Init+0x94>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001874:	4813      	ldr	r0, [pc, #76]	; (80018c4 <MX_TIM3_Init+0x94>)
 8001876:	f006 f94f 	bl	8007b18 <HAL_TIM_Base_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001880:	f7ff fdb2 	bl	80013e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001888:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	4619      	mov	r1, r3
 8001890:	480c      	ldr	r0, [pc, #48]	; (80018c4 <MX_TIM3_Init+0x94>)
 8001892:	f006 fb09 	bl	8007ea8 <HAL_TIM_ConfigClockSource>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800189c:	f7ff fda4 	bl	80013e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018a8:	463b      	mov	r3, r7
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MX_TIM3_Init+0x94>)
 80018ae:	f006 fd25 	bl	80082fc <HAL_TIMEx_MasterConfigSynchronization>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80018b8:	f7ff fd96 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000544 	.word	0x20000544
 80018c8:	40000400 	.word	0x40000400

080018cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018dc:	d10e      	bne.n	80018fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <HAL_TIM_Base_MspInit+0x70>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a15      	ldr	r2, [pc, #84]	; (800193c <HAL_TIM_Base_MspInit+0x70>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b13      	ldr	r3, [pc, #76]	; (800193c <HAL_TIM_Base_MspInit+0x70>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80018fa:	e01a      	b.n	8001932 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM3)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <HAL_TIM_Base_MspInit+0x74>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d115      	bne.n	8001932 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_TIM_Base_MspInit+0x70>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	4a0b      	ldr	r2, [pc, #44]	; (800193c <HAL_TIM_Base_MspInit+0x70>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6413      	str	r3, [r2, #64]	; 0x40
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_TIM_Base_MspInit+0x70>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	201d      	movs	r0, #29
 8001928:	f002 fa13 	bl	8003d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800192c:	201d      	movs	r0, #29
 800192e:	f002 fa2c 	bl	8003d8a <HAL_NVIC_EnableIRQ>
}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	40000400 	.word	0x40000400

08001944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800197c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001948:	480d      	ldr	r0, [pc, #52]	; (8001980 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800194a:	490e      	ldr	r1, [pc, #56]	; (8001984 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800194c:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001960:	4c0b      	ldr	r4, [pc, #44]	; (8001990 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800196e:	f7ff feff 	bl	8001770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001972:	f006 fe9b 	bl	80086ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001976:	f7ff fb21 	bl	8000fbc <main>
  bx  lr    
 800197a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800197c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8001988:	0800c06c 	.word	0x0800c06c
  ldr r2, =_sbss
 800198c:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8001990:	20000704 	.word	0x20000704

08001994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC_IRQHandler>

08001996 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800199a:	f000 fe49 	bl	8002630 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800199e:	20ca      	movs	r0, #202	; 0xca
 80019a0:	f000 f95d 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80019a4:	20c3      	movs	r0, #195	; 0xc3
 80019a6:	f000 f967 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80019aa:	2008      	movs	r0, #8
 80019ac:	f000 f964 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80019b0:	2050      	movs	r0, #80	; 0x50
 80019b2:	f000 f961 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80019b6:	20cf      	movs	r0, #207	; 0xcf
 80019b8:	f000 f951 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019bc:	2000      	movs	r0, #0
 80019be:	f000 f95b 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80019c2:	20c1      	movs	r0, #193	; 0xc1
 80019c4:	f000 f958 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80019c8:	2030      	movs	r0, #48	; 0x30
 80019ca:	f000 f955 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80019ce:	20ed      	movs	r0, #237	; 0xed
 80019d0:	f000 f945 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80019d4:	2064      	movs	r0, #100	; 0x64
 80019d6:	f000 f94f 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80019da:	2003      	movs	r0, #3
 80019dc:	f000 f94c 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80019e0:	2012      	movs	r0, #18
 80019e2:	f000 f949 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80019e6:	2081      	movs	r0, #129	; 0x81
 80019e8:	f000 f946 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80019ec:	20e8      	movs	r0, #232	; 0xe8
 80019ee:	f000 f936 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80019f2:	2085      	movs	r0, #133	; 0x85
 80019f4:	f000 f940 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80019f8:	2000      	movs	r0, #0
 80019fa:	f000 f93d 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80019fe:	2078      	movs	r0, #120	; 0x78
 8001a00:	f000 f93a 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001a04:	20cb      	movs	r0, #203	; 0xcb
 8001a06:	f000 f92a 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001a0a:	2039      	movs	r0, #57	; 0x39
 8001a0c:	f000 f934 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001a10:	202c      	movs	r0, #44	; 0x2c
 8001a12:	f000 f931 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a16:	2000      	movs	r0, #0
 8001a18:	f000 f92e 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001a1c:	2034      	movs	r0, #52	; 0x34
 8001a1e:	f000 f92b 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001a22:	2002      	movs	r0, #2
 8001a24:	f000 f928 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001a28:	20f7      	movs	r0, #247	; 0xf7
 8001a2a:	f000 f918 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001a2e:	2020      	movs	r0, #32
 8001a30:	f000 f922 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001a34:	20ea      	movs	r0, #234	; 0xea
 8001a36:	f000 f912 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f000 f91c 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a40:	2000      	movs	r0, #0
 8001a42:	f000 f919 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001a46:	20b1      	movs	r0, #177	; 0xb1
 8001a48:	f000 f909 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f000 f913 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001a52:	201b      	movs	r0, #27
 8001a54:	f000 f910 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001a58:	20b6      	movs	r0, #182	; 0xb6
 8001a5a:	f000 f900 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001a5e:	200a      	movs	r0, #10
 8001a60:	f000 f90a 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001a64:	20a2      	movs	r0, #162	; 0xa2
 8001a66:	f000 f907 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001a6a:	20c0      	movs	r0, #192	; 0xc0
 8001a6c:	f000 f8f7 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001a70:	2010      	movs	r0, #16
 8001a72:	f000 f901 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001a76:	20c1      	movs	r0, #193	; 0xc1
 8001a78:	f000 f8f1 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001a7c:	2010      	movs	r0, #16
 8001a7e:	f000 f8fb 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001a82:	20c5      	movs	r0, #197	; 0xc5
 8001a84:	f000 f8eb 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001a88:	2045      	movs	r0, #69	; 0x45
 8001a8a:	f000 f8f5 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001a8e:	2015      	movs	r0, #21
 8001a90:	f000 f8f2 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001a94:	20c7      	movs	r0, #199	; 0xc7
 8001a96:	f000 f8e2 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001a9a:	2090      	movs	r0, #144	; 0x90
 8001a9c:	f000 f8ec 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001aa0:	2036      	movs	r0, #54	; 0x36
 8001aa2:	f000 f8dc 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001aa6:	20c8      	movs	r0, #200	; 0xc8
 8001aa8:	f000 f8e6 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001aac:	20f2      	movs	r0, #242	; 0xf2
 8001aae:	f000 f8d6 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f000 f8e0 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001ab8:	20b0      	movs	r0, #176	; 0xb0
 8001aba:	f000 f8d0 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001abe:	20c2      	movs	r0, #194	; 0xc2
 8001ac0:	f000 f8da 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001ac4:	20b6      	movs	r0, #182	; 0xb6
 8001ac6:	f000 f8ca 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001aca:	200a      	movs	r0, #10
 8001acc:	f000 f8d4 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001ad0:	20a7      	movs	r0, #167	; 0xa7
 8001ad2:	f000 f8d1 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001ad6:	2027      	movs	r0, #39	; 0x27
 8001ad8:	f000 f8ce 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001adc:	2004      	movs	r0, #4
 8001ade:	f000 f8cb 	bl	8001c78 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001ae2:	202a      	movs	r0, #42	; 0x2a
 8001ae4:	f000 f8bb 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f000 f8c5 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001aee:	2000      	movs	r0, #0
 8001af0:	f000 f8c2 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f000 f8bf 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001afa:	20ef      	movs	r0, #239	; 0xef
 8001afc:	f000 f8bc 	bl	8001c78 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001b00:	202b      	movs	r0, #43	; 0x2b
 8001b02:	f000 f8ac 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f000 f8b6 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f000 f8b3 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001b12:	2001      	movs	r0, #1
 8001b14:	f000 f8b0 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001b18:	203f      	movs	r0, #63	; 0x3f
 8001b1a:	f000 f8ad 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001b1e:	20f6      	movs	r0, #246	; 0xf6
 8001b20:	f000 f89d 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001b24:	2001      	movs	r0, #1
 8001b26:	f000 f8a7 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f000 f8a4 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001b30:	2006      	movs	r0, #6
 8001b32:	f000 f8a1 	bl	8001c78 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001b36:	202c      	movs	r0, #44	; 0x2c
 8001b38:	f000 f891 	bl	8001c5e <ili9341_WriteReg>
  LCD_Delay(200);
 8001b3c:	20c8      	movs	r0, #200	; 0xc8
 8001b3e:	f000 fe65 	bl	800280c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001b42:	2026      	movs	r0, #38	; 0x26
 8001b44:	f000 f88b 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f000 f895 	bl	8001c78 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001b4e:	20e0      	movs	r0, #224	; 0xe0
 8001b50:	f000 f885 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001b54:	200f      	movs	r0, #15
 8001b56:	f000 f88f 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001b5a:	2029      	movs	r0, #41	; 0x29
 8001b5c:	f000 f88c 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001b60:	2024      	movs	r0, #36	; 0x24
 8001b62:	f000 f889 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001b66:	200c      	movs	r0, #12
 8001b68:	f000 f886 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001b6c:	200e      	movs	r0, #14
 8001b6e:	f000 f883 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001b72:	2009      	movs	r0, #9
 8001b74:	f000 f880 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001b78:	204e      	movs	r0, #78	; 0x4e
 8001b7a:	f000 f87d 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001b7e:	2078      	movs	r0, #120	; 0x78
 8001b80:	f000 f87a 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001b84:	203c      	movs	r0, #60	; 0x3c
 8001b86:	f000 f877 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001b8a:	2009      	movs	r0, #9
 8001b8c:	f000 f874 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001b90:	2013      	movs	r0, #19
 8001b92:	f000 f871 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001b96:	2005      	movs	r0, #5
 8001b98:	f000 f86e 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001b9c:	2017      	movs	r0, #23
 8001b9e:	f000 f86b 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001ba2:	2011      	movs	r0, #17
 8001ba4:	f000 f868 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ba8:	2000      	movs	r0, #0
 8001baa:	f000 f865 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001bae:	20e1      	movs	r0, #225	; 0xe1
 8001bb0:	f000 f855 	bl	8001c5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f000 f85f 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001bba:	2016      	movs	r0, #22
 8001bbc:	f000 f85c 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001bc0:	201b      	movs	r0, #27
 8001bc2:	f000 f859 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001bc6:	2004      	movs	r0, #4
 8001bc8:	f000 f856 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001bcc:	2011      	movs	r0, #17
 8001bce:	f000 f853 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001bd2:	2007      	movs	r0, #7
 8001bd4:	f000 f850 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001bd8:	2031      	movs	r0, #49	; 0x31
 8001bda:	f000 f84d 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001bde:	2033      	movs	r0, #51	; 0x33
 8001be0:	f000 f84a 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001be4:	2042      	movs	r0, #66	; 0x42
 8001be6:	f000 f847 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001bea:	2005      	movs	r0, #5
 8001bec:	f000 f844 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001bf0:	200c      	movs	r0, #12
 8001bf2:	f000 f841 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001bf6:	200a      	movs	r0, #10
 8001bf8:	f000 f83e 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001bfc:	2028      	movs	r0, #40	; 0x28
 8001bfe:	f000 f83b 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001c02:	202f      	movs	r0, #47	; 0x2f
 8001c04:	f000 f838 	bl	8001c78 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001c08:	200f      	movs	r0, #15
 8001c0a:	f000 f835 	bl	8001c78 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001c0e:	2011      	movs	r0, #17
 8001c10:	f000 f825 	bl	8001c5e <ili9341_WriteReg>
  LCD_Delay(200);
 8001c14:	20c8      	movs	r0, #200	; 0xc8
 8001c16:	f000 fdf9 	bl	800280c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001c1a:	2029      	movs	r0, #41	; 0x29
 8001c1c:	f000 f81f 	bl	8001c5e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001c20:	202c      	movs	r0, #44	; 0x2c
 8001c22:	f000 f81c 	bl	8001c5e <ili9341_WriteReg>
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001c2e:	f000 fcff 	bl	8002630 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001c32:	2103      	movs	r1, #3
 8001c34:	20d3      	movs	r0, #211	; 0xd3
 8001c36:	f000 f82c 	bl	8001c92 <ili9341_ReadData>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	b29b      	uxth	r3, r3
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001c46:	2029      	movs	r0, #41	; 0x29
 8001c48:	f000 f809 	bl	8001c5e <ili9341_WriteReg>
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001c54:	2028      	movs	r0, #40	; 0x28
 8001c56:	f000 f802 	bl	8001c5e <ili9341_WriteReg>
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 fd7a 	bl	8002764 <LCD_IO_WriteReg>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 fd4b 	bl	8002720 <LCD_IO_WriteData>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	460a      	mov	r2, r1
 8001c9c:	80fb      	strh	r3, [r7, #6]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001ca2:	797a      	ldrb	r2, [r7, #5]
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 fd7d 	bl	80027a8 <LCD_IO_ReadData>
 8001cae:	4603      	mov	r3, r0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001cbc:	23f0      	movs	r3, #240	; 0xf0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001ccc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 fa59 	bl	80021a0 <stmpe811_GetInstance>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	2bff      	cmp	r3, #255	; 0xff
 8001cf6:	d112      	bne.n	8001d1e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f000 fa51 	bl	80021a0 <stmpe811_GetInstance>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8001d02:	7bbb      	ldrb	r3, [r7, #14]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d80a      	bhi.n	8001d1e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8001d08:	7bbb      	ldrb	r3, [r7, #14]
 8001d0a:	88fa      	ldrh	r2, [r7, #6]
 8001d0c:	b2d1      	uxtb	r1, r2
 8001d0e:	4a06      	ldr	r2, [pc, #24]	; (8001d28 <stmpe811_Init+0x4c>)
 8001d10:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8001d12:	f000 fd86 	bl	8002822 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 f807 	bl	8001d2c <stmpe811_Reset>
    }
  }
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000330 	.word	0x20000330

08001d2c <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	2103      	movs	r1, #3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fd7b 	bl	800283a <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8001d44:	200a      	movs	r0, #10
 8001d46:	f000 fdb5 	bl	80028b4 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2103      	movs	r1, #3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 fd71 	bl	800283a <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8001d58:	2002      	movs	r0, #2
 8001d5a:	f000 fdab 	bl	80028b4 <IOE_Delay>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8001d66:	b590      	push	{r4, r7, lr}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8001d70:	f000 fd57 	bl	8002822 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fd70 	bl	8002860 <IOE_Read>
 8001d80:	4603      	mov	r3, r0
 8001d82:	021b      	lsls	r3, r3, #8
 8001d84:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 fd67 	bl	8002860 <IOE_Read>
 8001d92:	4603      	mov	r3, r0
 8001d94:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001d96:	4323      	orrs	r3, r4
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	b29b      	uxth	r3, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd90      	pop	{r4, r7, pc}

08001da4 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2109      	movs	r1, #9
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 fd51 	bl	8002860 <IOE_Read>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	2109      	movs	r1, #9
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 fd31 	bl	800283a <IOE_Write>
}
 8001dd8:	bf00      	nop
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2109      	movs	r1, #9
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 fd33 	bl	8002860 <IOE_Read>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	2109      	movs	r1, #9
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fd13 	bl	800283a <IOE_Write>
    
}
 8001e14:	bf00      	nop
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	460a      	mov	r2, r1
 8001e26:	80fb      	strh	r3, [r7, #6]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	210a      	movs	r1, #10
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 fd12 	bl	8002860 <IOE_Read>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	797b      	ldrb	r3, [r7, #5]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001e48:	88fb      	ldrh	r3, [r7, #6]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	210a      	movs	r1, #10
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fcf2 	bl	800283a <IOE_Write>
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	460a      	mov	r2, r1
 8001e68:	80fb      	strh	r3, [r7, #6]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	210a      	movs	r1, #10
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 fcf1 	bl	8002860 <IOE_Read>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8001e82:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	b25a      	sxtb	r2, r3
 8001e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	b25b      	sxtb	r3, r3
 8001e92:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	7bfa      	ldrb	r2, [r7, #15]
 8001e9a:	210a      	movs	r1, #10
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 fccc 	bl	800283a <IOE_Write>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	460a      	mov	r2, r1
 8001eb4:	80fb      	strh	r3, [r7, #6]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	210b      	movs	r1, #11
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 fccd 	bl	8002860 <IOE_Read>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	461a      	mov	r2, r3
 8001eca:	797b      	ldrb	r3, [r7, #5]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	b2db      	uxtb	r3, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	460a      	mov	r2, r1
 8001ee2:	80fb      	strh	r3, [r7, #6]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	797a      	ldrb	r2, [r7, #5]
 8001eee:	210b      	movs	r1, #11
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 fca2 	bl	800283a <IOE_Write>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	6039      	str	r1, [r7, #0]
 8001f08:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2117      	movs	r1, #23
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 fca3 	bl	8002860 <IOE_Read>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b25b      	sxtb	r3, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	b25a      	sxtb	r2, r3
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	b25b      	sxtb	r3, r3
 8001f2e:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	2117      	movs	r1, #23
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 fc7e 	bl	800283a <IOE_Write>
}
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2104      	movs	r1, #4
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 fc82 	bl	8002860 <IOE_Read>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	f023 0304 	bic.w	r3, r3, #4
 8001f66:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	2104      	movs	r1, #4
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 fc62 	bl	800283a <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	21f0      	movs	r1, #240	; 0xf0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ffbf 	bl	8001efe <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	f023 0303 	bic.w	r3, r3, #3
 8001f86:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	2104      	movs	r1, #4
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fc52 	bl	800283a <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2249      	movs	r2, #73	; 0x49
 8001f9c:	2120      	movs	r1, #32
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 fc4b 	bl	800283a <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8001fa4:	2002      	movs	r0, #2
 8001fa6:	f000 fc85 	bl	80028b4 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2201      	movs	r2, #1
 8001fb0:	2121      	movs	r1, #33	; 0x21
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fc41 	bl	800283a <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	229a      	movs	r2, #154	; 0x9a
 8001fbe:	2141      	movs	r1, #65	; 0x41
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fc3a 	bl	800283a <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2201      	movs	r2, #1
 8001fcc:	214a      	movs	r1, #74	; 0x4a
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fc33 	bl	800283a <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2201      	movs	r2, #1
 8001fda:	214b      	movs	r1, #75	; 0x4b
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 fc2c 	bl	800283a <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	214b      	movs	r1, #75	; 0x4b
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fc25 	bl	800283a <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	2156      	movs	r1, #86	; 0x56
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fc1e 	bl	800283a <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2201      	movs	r2, #1
 8002004:	2158      	movs	r1, #88	; 0x58
 8002006:	4618      	mov	r0, r3
 8002008:	f000 fc17 	bl	800283a <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2201      	movs	r2, #1
 8002012:	2140      	movs	r1, #64	; 0x40
 8002014:	4618      	mov	r0, r3
 8002016:	f000 fc10 	bl	800283a <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	22ff      	movs	r2, #255	; 0xff
 8002020:	210b      	movs	r1, #11
 8002022:	4618      	mov	r0, r3
 8002024:	f000 fc09 	bl	800283a <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002028:	2002      	movs	r0, #2
 800202a:	f000 fc43 	bl	80028b4 <IOE_Delay>
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2140      	movs	r1, #64	; 0x40
 800204a:	4618      	mov	r0, r3
 800204c:	f000 fc08 	bl	8002860 <IOE_Read>
 8002050:	4603      	mov	r3, r0
 8002052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002056:	2b80      	cmp	r3, #128	; 0x80
 8002058:	bf0c      	ite	eq
 800205a:	2301      	moveq	r3, #1
 800205c:	2300      	movne	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8002062:	7bbb      	ldrb	r3, [r7, #14]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00b      	beq.n	8002080 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	214c      	movs	r1, #76	; 0x4c
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fbf6 	bl	8002860 <IOE_Read>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d010      	beq.n	800209c <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 800207a:	2301      	movs	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
 800207e:	e00d      	b.n	800209c <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2201      	movs	r2, #1
 8002086:	214b      	movs	r1, #75	; 0x4b
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fbd6 	bl	800283a <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2200      	movs	r2, #0
 8002094:	214b      	movs	r1, #75	; 0x4b
 8002096:	4618      	mov	r0, r3
 8002098:	f000 fbcf 	bl	800283a <IOE_Write>
  }
  
  return ret;
 800209c:	7bfb      	ldrb	r3, [r7, #15]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80020b4:	89fb      	ldrh	r3, [r7, #14]
 80020b6:	b2d8      	uxtb	r0, r3
 80020b8:	f107 0210 	add.w	r2, r7, #16
 80020bc:	2304      	movs	r3, #4
 80020be:	21d7      	movs	r1, #215	; 0xd7
 80020c0:	f000 fbe1 	bl	8002886 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80020c4:	7c3b      	ldrb	r3, [r7, #16]
 80020c6:	061a      	lsls	r2, r3, #24
 80020c8:	7c7b      	ldrb	r3, [r7, #17]
 80020ca:	041b      	lsls	r3, r3, #16
 80020cc:	431a      	orrs	r2, r3
 80020ce:	7cbb      	ldrb	r3, [r7, #18]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	4313      	orrs	r3, r2
 80020d4:	7cfa      	ldrb	r2, [r7, #19]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	0d1b      	lsrs	r3, r3, #20
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	0a1b      	lsrs	r3, r3, #8
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80020f4:	89fb      	ldrh	r3, [r7, #14]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2201      	movs	r2, #1
 80020fa:	214b      	movs	r1, #75	; 0x4b
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fb9c 	bl	800283a <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002102:	89fb      	ldrh	r3, [r7, #14]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2200      	movs	r2, #0
 8002108:	214b      	movs	r1, #75	; 0x4b
 800210a:	4618      	mov	r0, r3
 800210c:	f000 fb95 	bl	800283a <IOE_Write>
}
 8002110:	bf00      	nop
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002122:	f000 fb84 	bl	800282e <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	211f      	movs	r1, #31
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fe76 	bl	8001e1c <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fe36 	bl	8001da4 <stmpe811_EnableGlobalIT>
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fe47 	bl	8001de0 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	211f      	movs	r1, #31
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fe81 	bl	8001e5e <stmpe811_DisableITSource>
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	211f      	movs	r1, #31
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fe99 	bl	8001eaa <stmpe811_ReadGITStatus>
 8002178:	4603      	mov	r3, r0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	211f      	movs	r1, #31
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fea1 	bl	8001ed8 <stmpe811_ClearGlobalIT>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	73fb      	strb	r3, [r7, #15]
 80021b2:	e00b      	b.n	80021cc <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <stmpe811_GetInstance+0x40>)
 80021b8:	5cd3      	ldrb	r3, [r2, r3]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	88fa      	ldrh	r2, [r7, #6]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d101      	bne.n	80021c6 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	e006      	b.n	80021d4 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	3301      	adds	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d9f0      	bls.n	80021b4 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80021d2:	23ff      	movs	r3, #255	; 0xff
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	20000330 	.word	0x20000330

080021e4 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a33      	ldr	r2, [pc, #204]	; (80022c0 <I2Cx_MspInit+0xdc>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d15f      	bne.n	80022b6 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <I2Cx_MspInit+0xe0>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a31      	ldr	r2, [pc, #196]	; (80022c4 <I2Cx_MspInit+0xe0>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b2f      	ldr	r3, [pc, #188]	; (80022c4 <I2Cx_MspInit+0xe0>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <I2Cx_MspInit+0xe0>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a2a      	ldr	r2, [pc, #168]	; (80022c4 <I2Cx_MspInit+0xe0>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b28      	ldr	r3, [pc, #160]	; (80022c4 <I2Cx_MspInit+0xe0>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800222e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002234:	2312      	movs	r3, #18
 8002236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800223c:	2302      	movs	r3, #2
 800223e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002240:	2304      	movs	r3, #4
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	4619      	mov	r1, r3
 800224a:	481f      	ldr	r0, [pc, #124]	; (80022c8 <I2Cx_MspInit+0xe4>)
 800224c:	f002 fa1e 	bl	800468c <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002254:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002256:	f107 0314 	add.w	r3, r7, #20
 800225a:	4619      	mov	r1, r3
 800225c:	481b      	ldr	r0, [pc, #108]	; (80022cc <I2Cx_MspInit+0xe8>)
 800225e:	f002 fa15 	bl	800468c <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <I2Cx_MspInit+0xe0>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	4a16      	ldr	r2, [pc, #88]	; (80022c4 <I2Cx_MspInit+0xe0>)
 800226c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002270:	6413      	str	r3, [r2, #64]	; 0x40
 8002272:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <I2Cx_MspInit+0xe0>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <I2Cx_MspInit+0xe0>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	4a10      	ldr	r2, [pc, #64]	; (80022c4 <I2Cx_MspInit+0xe0>)
 8002284:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002288:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <I2Cx_MspInit+0xe0>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <I2Cx_MspInit+0xe0>)
 8002290:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002294:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002296:	2200      	movs	r2, #0
 8002298:	210f      	movs	r1, #15
 800229a:	2048      	movs	r0, #72	; 0x48
 800229c:	f001 fd59 	bl	8003d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80022a0:	2048      	movs	r0, #72	; 0x48
 80022a2:	f001 fd72 	bl	8003d8a <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	210f      	movs	r1, #15
 80022aa:	2049      	movs	r0, #73	; 0x49
 80022ac:	f001 fd51 	bl	8003d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80022b0:	2049      	movs	r0, #73	; 0x49
 80022b2:	f001 fd6a 	bl	8003d8a <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80022b6:	bf00      	nop
 80022b8:	3728      	adds	r7, #40	; 0x28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40005c00 	.word	0x40005c00
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40020000 	.word	0x40020000
 80022cc:	40020800 	.word	0x40020800

080022d0 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80022d4:	4814      	ldr	r0, [pc, #80]	; (8002328 <I2Cx_Init+0x58>)
 80022d6:	f003 f93f 	bl	8005558 <HAL_I2C_GetState>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d121      	bne.n	8002324 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <I2Cx_Init+0x58>)
 80022e2:	4a12      	ldr	r2, [pc, #72]	; (800232c <I2Cx_Init+0x5c>)
 80022e4:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <I2Cx_Init+0x58>)
 80022e8:	4a11      	ldr	r2, [pc, #68]	; (8002330 <I2Cx_Init+0x60>)
 80022ea:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80022ec:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <I2Cx_Init+0x58>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80022f2:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <I2Cx_Init+0x58>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <I2Cx_Init+0x58>)
 80022fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022fe:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <I2Cx_Init+0x58>)
 8002302:	2200      	movs	r2, #0
 8002304:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002306:	4b08      	ldr	r3, [pc, #32]	; (8002328 <I2Cx_Init+0x58>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <I2Cx_Init+0x58>)
 800230e:	2200      	movs	r2, #0
 8002310:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8002312:	4b05      	ldr	r3, [pc, #20]	; (8002328 <I2Cx_Init+0x58>)
 8002314:	2200      	movs	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002318:	4803      	ldr	r0, [pc, #12]	; (8002328 <I2Cx_Init+0x58>)
 800231a:	f7ff ff63 	bl	80021e4 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800231e:	4802      	ldr	r0, [pc, #8]	; (8002328 <I2Cx_Init+0x58>)
 8002320:	f002 fc86 	bl	8004c30 <HAL_I2C_Init>
  }
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	200005f0 	.word	0x200005f0
 800232c:	40005c00 	.word	0x40005c00
 8002330:	000186a0 	.word	0x000186a0

08002334 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <I2Cx_ITConfig+0x58>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a12      	ldr	r2, [pc, #72]	; (800238c <I2Cx_ITConfig+0x58>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <I2Cx_ITConfig+0x58>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8002356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800235a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800235c:	2301      	movs	r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8002364:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002368:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	4619      	mov	r1, r3
 800236e:	4808      	ldr	r0, [pc, #32]	; (8002390 <I2Cx_ITConfig+0x5c>)
 8002370:	f002 f98c 	bl	800468c <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8002374:	2200      	movs	r2, #0
 8002376:	210f      	movs	r1, #15
 8002378:	2028      	movs	r0, #40	; 0x28
 800237a:	f001 fcea 	bl	8003d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 800237e:	2028      	movs	r0, #40	; 0x28
 8002380:	f001 fd03 	bl	8003d8a <HAL_NVIC_EnableIRQ>
}
 8002384:	bf00      	nop
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40023800 	.word	0x40023800
 8002390:	40020000 	.word	0x40020000

08002394 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af04      	add	r7, sp, #16
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
 800239e:	460b      	mov	r3, r1
 80023a0:	71bb      	strb	r3, [r7, #6]
 80023a2:	4613      	mov	r3, r2
 80023a4:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	b299      	uxth	r1, r3
 80023ae:	79bb      	ldrb	r3, [r7, #6]
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <I2Cx_WriteData+0x4c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	9302      	str	r3, [sp, #8]
 80023b8:	2301      	movs	r3, #1
 80023ba:	9301      	str	r3, [sp, #4]
 80023bc:	1d7b      	adds	r3, r7, #5
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2301      	movs	r3, #1
 80023c2:	4808      	ldr	r0, [pc, #32]	; (80023e4 <I2Cx_WriteData+0x50>)
 80023c4:	f002 fda8 	bl	8004f18 <HAL_I2C_Mem_Write>
 80023c8:	4603      	mov	r3, r0
 80023ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80023d2:	f000 f863 	bl	800249c <I2Cx_Error>
  }        
}
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	2000006c 	.word	0x2000006c
 80023e4:	200005f0 	.word	0x200005f0

080023e8 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af04      	add	r7, sp, #16
 80023ee:	4603      	mov	r3, r0
 80023f0:	460a      	mov	r2, r1
 80023f2:	71fb      	strb	r3, [r7, #7]
 80023f4:	4613      	mov	r3, r2
 80023f6:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	b299      	uxth	r1, r3
 8002404:	79bb      	ldrb	r3, [r7, #6]
 8002406:	b29a      	uxth	r2, r3
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <I2Cx_ReadData+0x50>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	9302      	str	r3, [sp, #8]
 800240e:	2301      	movs	r3, #1
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	f107 030e 	add.w	r3, r7, #14
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2301      	movs	r3, #1
 800241a:	4808      	ldr	r0, [pc, #32]	; (800243c <I2Cx_ReadData+0x54>)
 800241c:	f002 fe76 	bl	800510c <HAL_I2C_Mem_Read>
 8002420:	4603      	mov	r3, r0
 8002422:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800242a:	f000 f837 	bl	800249c <I2Cx_Error>
  
  }
  return value;
 800242e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	2000006c 	.word	0x2000006c
 800243c:	200005f0 	.word	0x200005f0

08002440 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af04      	add	r7, sp, #16
 8002446:	603a      	str	r2, [r7, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
 800244e:	460b      	mov	r3, r1
 8002450:	71bb      	strb	r3, [r7, #6]
 8002452:	4613      	mov	r3, r2
 8002454:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	b299      	uxth	r1, r3
 800245e:	79bb      	ldrb	r3, [r7, #6]
 8002460:	b29a      	uxth	r2, r3
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <I2Cx_ReadBuffer+0x54>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	9302      	str	r3, [sp, #8]
 8002468:	88bb      	ldrh	r3, [r7, #4]
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2301      	movs	r3, #1
 8002472:	4809      	ldr	r0, [pc, #36]	; (8002498 <I2Cx_ReadBuffer+0x58>)
 8002474:	f002 fe4a 	bl	800510c <HAL_I2C_Mem_Read>
 8002478:	4603      	mov	r3, r0
 800247a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8002482:	2300      	movs	r3, #0
 8002484:	e002      	b.n	800248c <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002486:	f000 f809 	bl	800249c <I2Cx_Error>

    return 1;
 800248a:	2301      	movs	r3, #1
  }
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	2000006c 	.word	0x2000006c
 8002498:	200005f0 	.word	0x200005f0

0800249c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80024a0:	4803      	ldr	r0, [pc, #12]	; (80024b0 <I2Cx_Error+0x14>)
 80024a2:	f002 fd09 	bl	8004eb8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 80024a6:	f7ff ff13 	bl	80022d0 <I2Cx_Init>
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200005f0 	.word	0x200005f0

080024b4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80024b8:	4819      	ldr	r0, [pc, #100]	; (8002520 <SPIx_Init+0x6c>)
 80024ba:	f005 f9ee 	bl	800789a <HAL_SPI_GetState>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d12b      	bne.n	800251c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80024c4:	4b16      	ldr	r3, [pc, #88]	; (8002520 <SPIx_Init+0x6c>)
 80024c6:	4a17      	ldr	r2, [pc, #92]	; (8002524 <SPIx_Init+0x70>)
 80024c8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <SPIx_Init+0x6c>)
 80024cc:	2218      	movs	r2, #24
 80024ce:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80024d0:	4b13      	ldr	r3, [pc, #76]	; (8002520 <SPIx_Init+0x6c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <SPIx_Init+0x6c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80024dc:	4b10      	ldr	r3, [pc, #64]	; (8002520 <SPIx_Init+0x6c>)
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80024e2:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <SPIx_Init+0x6c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80024e8:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <SPIx_Init+0x6c>)
 80024ea:	2207      	movs	r2, #7
 80024ec:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80024ee:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <SPIx_Init+0x6c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <SPIx_Init+0x6c>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <SPIx_Init+0x6c>)
 80024fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002500:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <SPIx_Init+0x6c>)
 8002504:	2200      	movs	r2, #0
 8002506:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <SPIx_Init+0x6c>)
 800250a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800250e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002510:	4803      	ldr	r0, [pc, #12]	; (8002520 <SPIx_Init+0x6c>)
 8002512:	f000 f853 	bl	80025bc <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002516:	4802      	ldr	r0, [pc, #8]	; (8002520 <SPIx_Init+0x6c>)
 8002518:	f004 fd1f 	bl	8006f5a <HAL_SPI_Init>
  } 
}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000334 	.word	0x20000334
 8002524:	40015000 	.word	0x40015000

08002528 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	b29a      	uxth	r2, r3
 800253a:	4b09      	ldr	r3, [pc, #36]	; (8002560 <SPIx_Read+0x38>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f107 0108 	add.w	r1, r7, #8
 8002542:	4808      	ldr	r0, [pc, #32]	; (8002564 <SPIx_Read+0x3c>)
 8002544:	f004 fef6 	bl	8007334 <HAL_SPI_Receive>
 8002548:	4603      	mov	r3, r0
 800254a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002552:	f000 f827 	bl	80025a4 <SPIx_Error>
  }
  
  return readvalue;
 8002556:	68bb      	ldr	r3, [r7, #8]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20000070 	.word	0x20000070
 8002564:	20000334 	.word	0x20000334

08002568 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <SPIx_Write+0x34>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	1db9      	adds	r1, r7, #6
 800257c:	2201      	movs	r2, #1
 800257e:	4808      	ldr	r0, [pc, #32]	; (80025a0 <SPIx_Write+0x38>)
 8002580:	f004 fd9c 	bl	80070bc <HAL_SPI_Transmit>
 8002584:	4603      	mov	r3, r0
 8002586:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800258e:	f000 f809 	bl	80025a4 <SPIx_Error>
  }
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000070 	.word	0x20000070
 80025a0:	20000334 	.word	0x20000334

080025a4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80025a8:	4803      	ldr	r0, [pc, #12]	; (80025b8 <SPIx_Error+0x14>)
 80025aa:	f004 fd5f 	bl	800706c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80025ae:	f7ff ff81 	bl	80024b4 <SPIx_Init>
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000334 	.word	0x20000334

080025bc <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	; 0x28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80025c4:	2300      	movs	r3, #0
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	4b17      	ldr	r3, [pc, #92]	; (8002628 <SPIx_MspInit+0x6c>)
 80025ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025cc:	4a16      	ldr	r2, [pc, #88]	; (8002628 <SPIx_MspInit+0x6c>)
 80025ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025d2:	6453      	str	r3, [r2, #68]	; 0x44
 80025d4:	4b14      	ldr	r3, [pc, #80]	; (8002628 <SPIx_MspInit+0x6c>)
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	4b10      	ldr	r3, [pc, #64]	; (8002628 <SPIx_MspInit+0x6c>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	4a0f      	ldr	r2, [pc, #60]	; (8002628 <SPIx_MspInit+0x6c>)
 80025ea:	f043 0320 	orr.w	r3, r3, #32
 80025ee:	6313      	str	r3, [r2, #48]	; 0x30
 80025f0:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <SPIx_MspInit+0x6c>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80025fc:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002600:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002606:	2302      	movs	r3, #2
 8002608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800260a:	2301      	movs	r3, #1
 800260c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800260e:	2305      	movs	r3, #5
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	4804      	ldr	r0, [pc, #16]	; (800262c <SPIx_MspInit+0x70>)
 800261a:	f002 f837 	bl	800468c <HAL_GPIO_Init>
}
 800261e:	bf00      	nop
 8002620:	3728      	adds	r7, #40	; 0x28
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800
 800262c:	40021400 	.word	0x40021400

08002630 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002636:	4b36      	ldr	r3, [pc, #216]	; (8002710 <LCD_IO_Init+0xe0>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d164      	bne.n	8002708 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800263e:	4b34      	ldr	r3, [pc, #208]	; (8002710 <LCD_IO_Init+0xe0>)
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002644:	2300      	movs	r3, #0
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	4b32      	ldr	r3, [pc, #200]	; (8002714 <LCD_IO_Init+0xe4>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	4a31      	ldr	r2, [pc, #196]	; (8002714 <LCD_IO_Init+0xe4>)
 800264e:	f043 0308 	orr.w	r3, r3, #8
 8002652:	6313      	str	r3, [r2, #48]	; 0x30
 8002654:	4b2f      	ldr	r3, [pc, #188]	; (8002714 <LCD_IO_Init+0xe4>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002664:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002666:	2301      	movs	r3, #1
 8002668:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800266e:	2302      	movs	r3, #2
 8002670:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002672:	f107 030c 	add.w	r3, r7, #12
 8002676:	4619      	mov	r1, r3
 8002678:	4827      	ldr	r0, [pc, #156]	; (8002718 <LCD_IO_Init+0xe8>)
 800267a:	f002 f807 	bl	800468c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	4b24      	ldr	r3, [pc, #144]	; (8002714 <LCD_IO_Init+0xe4>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	4a23      	ldr	r2, [pc, #140]	; (8002714 <LCD_IO_Init+0xe4>)
 8002688:	f043 0308 	orr.w	r3, r3, #8
 800268c:	6313      	str	r3, [r2, #48]	; 0x30
 800268e:	4b21      	ldr	r3, [pc, #132]	; (8002714 <LCD_IO_Init+0xe4>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	607b      	str	r3, [r7, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800269a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800269e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80026a0:	2301      	movs	r3, #1
 80026a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80026a8:	2302      	movs	r3, #2
 80026aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80026ac:	f107 030c 	add.w	r3, r7, #12
 80026b0:	4619      	mov	r1, r3
 80026b2:	4819      	ldr	r0, [pc, #100]	; (8002718 <LCD_IO_Init+0xe8>)
 80026b4:	f001 ffea 	bl	800468c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80026b8:	2300      	movs	r3, #0
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	4b15      	ldr	r3, [pc, #84]	; (8002714 <LCD_IO_Init+0xe4>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <LCD_IO_Init+0xe4>)
 80026c2:	f043 0304 	orr.w	r3, r3, #4
 80026c6:	6313      	str	r3, [r2, #48]	; 0x30
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <LCD_IO_Init+0xe4>)
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80026d4:	2304      	movs	r3, #4
 80026d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80026d8:	2301      	movs	r3, #1
 80026da:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80026e0:	2302      	movs	r3, #2
 80026e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80026e4:	f107 030c 	add.w	r3, r7, #12
 80026e8:	4619      	mov	r1, r3
 80026ea:	480c      	ldr	r0, [pc, #48]	; (800271c <LCD_IO_Init+0xec>)
 80026ec:	f001 ffce 	bl	800468c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80026f0:	2200      	movs	r2, #0
 80026f2:	2104      	movs	r1, #4
 80026f4:	4809      	ldr	r0, [pc, #36]	; (800271c <LCD_IO_Init+0xec>)
 80026f6:	f002 fa81 	bl	8004bfc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80026fa:	2201      	movs	r2, #1
 80026fc:	2104      	movs	r1, #4
 80026fe:	4807      	ldr	r0, [pc, #28]	; (800271c <LCD_IO_Init+0xec>)
 8002700:	f002 fa7c 	bl	8004bfc <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002704:	f7ff fed6 	bl	80024b4 <SPIx_Init>
  }
}
 8002708:	bf00      	nop
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	2000038c 	.word	0x2000038c
 8002714:	40023800 	.word	0x40023800
 8002718:	40020c00 	.word	0x40020c00
 800271c:	40020800 	.word	0x40020800

08002720 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800272a:	2201      	movs	r2, #1
 800272c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002730:	480a      	ldr	r0, [pc, #40]	; (800275c <LCD_IO_WriteData+0x3c>)
 8002732:	f002 fa63 	bl	8004bfc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002736:	2200      	movs	r2, #0
 8002738:	2104      	movs	r1, #4
 800273a:	4809      	ldr	r0, [pc, #36]	; (8002760 <LCD_IO_WriteData+0x40>)
 800273c:	f002 fa5e 	bl	8004bfc <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ff10 	bl	8002568 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002748:	2201      	movs	r2, #1
 800274a:	2104      	movs	r1, #4
 800274c:	4804      	ldr	r0, [pc, #16]	; (8002760 <LCD_IO_WriteData+0x40>)
 800274e:	f002 fa55 	bl	8004bfc <HAL_GPIO_WritePin>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40020c00 	.word	0x40020c00
 8002760:	40020800 	.word	0x40020800

08002764 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800276e:	2200      	movs	r2, #0
 8002770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002774:	480a      	ldr	r0, [pc, #40]	; (80027a0 <LCD_IO_WriteReg+0x3c>)
 8002776:	f002 fa41 	bl	8004bfc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800277a:	2200      	movs	r2, #0
 800277c:	2104      	movs	r1, #4
 800277e:	4809      	ldr	r0, [pc, #36]	; (80027a4 <LCD_IO_WriteReg+0x40>)
 8002780:	f002 fa3c 	bl	8004bfc <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	b29b      	uxth	r3, r3
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff feed 	bl	8002568 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800278e:	2201      	movs	r2, #1
 8002790:	2104      	movs	r1, #4
 8002792:	4804      	ldr	r0, [pc, #16]	; (80027a4 <LCD_IO_WriteReg+0x40>)
 8002794:	f002 fa32 	bl	8004bfc <HAL_GPIO_WritePin>
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40020c00 	.word	0x40020c00
 80027a4:	40020800 	.word	0x40020800

080027a8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	460a      	mov	r2, r1
 80027b2:	80fb      	strh	r3, [r7, #6]
 80027b4:	4613      	mov	r3, r2
 80027b6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80027bc:	2200      	movs	r2, #0
 80027be:	2104      	movs	r1, #4
 80027c0:	4810      	ldr	r0, [pc, #64]	; (8002804 <LCD_IO_ReadData+0x5c>)
 80027c2:	f002 fa1b 	bl	8004bfc <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80027c6:	2200      	movs	r2, #0
 80027c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027cc:	480e      	ldr	r0, [pc, #56]	; (8002808 <LCD_IO_ReadData+0x60>)
 80027ce:	f002 fa15 	bl	8004bfc <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fec7 	bl	8002568 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80027da:	797b      	ldrb	r3, [r7, #5]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fea3 	bl	8002528 <SPIx_Read>
 80027e2:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80027e4:	2201      	movs	r2, #1
 80027e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027ea:	4807      	ldr	r0, [pc, #28]	; (8002808 <LCD_IO_ReadData+0x60>)
 80027ec:	f002 fa06 	bl	8004bfc <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80027f0:	2201      	movs	r2, #1
 80027f2:	2104      	movs	r1, #4
 80027f4:	4803      	ldr	r0, [pc, #12]	; (8002804 <LCD_IO_ReadData+0x5c>)
 80027f6:	f002 fa01 	bl	8004bfc <HAL_GPIO_WritePin>
  
  return readvalue;
 80027fa:	68fb      	ldr	r3, [r7, #12]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40020800 	.word	0x40020800
 8002808:	40020c00 	.word	0x40020c00

0800280c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f001 f99d 	bl	8003b54 <HAL_Delay>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8002822:	b580      	push	{r7, lr}
 8002824:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8002826:	f7ff fd53 	bl	80022d0 <I2Cx_Init>
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}

0800282e <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8002832:	f7ff fd7f 	bl	8002334 <I2Cx_ITConfig>
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}

0800283a <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	4603      	mov	r3, r0
 8002842:	71fb      	strb	r3, [r7, #7]
 8002844:	460b      	mov	r3, r1
 8002846:	71bb      	strb	r3, [r7, #6]
 8002848:	4613      	mov	r3, r2
 800284a:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 800284c:	797a      	ldrb	r2, [r7, #5]
 800284e:	79b9      	ldrb	r1, [r7, #6]
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fd9e 	bl	8002394 <I2Cx_WriteData>
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	460a      	mov	r2, r1
 800286a:	71fb      	strb	r3, [r7, #7]
 800286c:	4613      	mov	r3, r2
 800286e:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8002870:	79ba      	ldrb	r2, [r7, #6]
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fdb6 	bl	80023e8 <I2Cx_ReadData>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	603a      	str	r2, [r7, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	4603      	mov	r3, r0
 8002892:	71fb      	strb	r3, [r7, #7]
 8002894:	460b      	mov	r3, r1
 8002896:	71bb      	strb	r3, [r7, #6]
 8002898:	4613      	mov	r3, r2
 800289a:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 800289c:	88bb      	ldrh	r3, [r7, #4]
 800289e:	79b9      	ldrb	r1, [r7, #6]
 80028a0:	79f8      	ldrb	r0, [r7, #7]
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	f7ff fdcc 	bl	8002440 <I2Cx_ReadBuffer>
 80028a8:	4603      	mov	r3, r0
 80028aa:	b29b      	uxth	r3, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f001 f949 	bl	8003b54 <HAL_Delay>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80028d0:	4b2d      	ldr	r3, [pc, #180]	; (8002988 <BSP_LCD_Init+0xbc>)
 80028d2:	4a2e      	ldr	r2, [pc, #184]	; (800298c <BSP_LCD_Init+0xc0>)
 80028d4:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80028d6:	4b2c      	ldr	r3, [pc, #176]	; (8002988 <BSP_LCD_Init+0xbc>)
 80028d8:	2209      	movs	r2, #9
 80028da:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80028dc:	4b2a      	ldr	r3, [pc, #168]	; (8002988 <BSP_LCD_Init+0xbc>)
 80028de:	2201      	movs	r2, #1
 80028e0:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80028e2:	4b29      	ldr	r3, [pc, #164]	; (8002988 <BSP_LCD_Init+0xbc>)
 80028e4:	221d      	movs	r2, #29
 80028e6:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80028e8:	4b27      	ldr	r3, [pc, #156]	; (8002988 <BSP_LCD_Init+0xbc>)
 80028ea:	2203      	movs	r2, #3
 80028ec:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80028ee:	4b26      	ldr	r3, [pc, #152]	; (8002988 <BSP_LCD_Init+0xbc>)
 80028f0:	f240 120d 	movw	r2, #269	; 0x10d
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80028f6:	4b24      	ldr	r3, [pc, #144]	; (8002988 <BSP_LCD_Init+0xbc>)
 80028f8:	f240 1243 	movw	r2, #323	; 0x143
 80028fc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <BSP_LCD_Init+0xbc>)
 8002900:	f240 1217 	movw	r2, #279	; 0x117
 8002904:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002906:	4b20      	ldr	r3, [pc, #128]	; (8002988 <BSP_LCD_Init+0xbc>)
 8002908:	f240 1247 	movw	r2, #327	; 0x147
 800290c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800290e:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <BSP_LCD_Init+0xbc>)
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002916:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <BSP_LCD_Init+0xbc>)
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800291e:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <BSP_LCD_Init+0xbc>)
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002926:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <BSP_LCD_Init+0xc4>)
 8002928:	2208      	movs	r2, #8
 800292a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800292c:	4b18      	ldr	r3, [pc, #96]	; (8002990 <BSP_LCD_Init+0xc4>)
 800292e:	22c0      	movs	r2, #192	; 0xc0
 8002930:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002932:	4b17      	ldr	r3, [pc, #92]	; (8002990 <BSP_LCD_Init+0xc4>)
 8002934:	2204      	movs	r2, #4
 8002936:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <BSP_LCD_Init+0xc4>)
 800293a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800293e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002940:	4813      	ldr	r0, [pc, #76]	; (8002990 <BSP_LCD_Init+0xc4>)
 8002942:	f004 f8a3 	bl	8006a8c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <BSP_LCD_Init+0xbc>)
 8002948:	2200      	movs	r2, #0
 800294a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800294c:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <BSP_LCD_Init+0xbc>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002952:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <BSP_LCD_Init+0xbc>)
 8002954:	2200      	movs	r2, #0
 8002956:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002958:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <BSP_LCD_Init+0xbc>)
 800295a:	2200      	movs	r2, #0
 800295c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800295e:	f000 fbe3 	bl	8003128 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002962:	4809      	ldr	r0, [pc, #36]	; (8002988 <BSP_LCD_Init+0xbc>)
 8002964:	f003 f962 	bl	8005c2c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002968:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <BSP_LCD_Init+0xc8>)
 800296a:	4a0b      	ldr	r2, [pc, #44]	; (8002998 <BSP_LCD_Init+0xcc>)
 800296c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <BSP_LCD_Init+0xc8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002976:	f000 fdc5 	bl	8003504 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800297a:	4808      	ldr	r0, [pc, #32]	; (800299c <BSP_LCD_Init+0xd0>)
 800297c:	f000 f8ce 	bl	8002b1c <BSP_LCD_SetFont>

  return LCD_OK;
 8002980:	2300      	movs	r3, #0
}  
 8002982:	4618      	mov	r0, r3
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000644 	.word	0x20000644
 800298c:	40016800 	.word	0x40016800
 8002990:	200003d0 	.word	0x200003d0
 8002994:	200006ec 	.word	0x200006ec
 8002998:	2000000c 	.word	0x2000000c
 800299c:	20000074 	.word	0x20000074

080029a0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <BSP_LCD_GetXSize+0x14>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	4798      	blx	r3
 80029ac:	4603      	mov	r3, r0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200006ec 	.word	0x200006ec

080029b8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <BSP_LCD_GetYSize+0x14>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	4798      	blx	r3
 80029c4:	4603      	mov	r3, r0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200006ec 	.word	0x200006ec

080029d0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b090      	sub	sp, #64	; 0x40
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	6039      	str	r1, [r7, #0]
 80029da:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80029e0:	f7ff ffde 	bl	80029a0 <BSP_LCD_GetXSize>
 80029e4:	4603      	mov	r3, r0
 80029e6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80029ec:	f7ff ffe4 	bl	80029b8 <BSP_LCD_GetYSize>
 80029f0:	4603      	mov	r3, r0
 80029f2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80029fc:	23ff      	movs	r3, #255	; 0xff
 80029fe:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002a16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002a1c:	2307      	movs	r3, #7
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002a20:	f7ff ffbe 	bl	80029a0 <BSP_LCD_GetXSize>
 8002a24:	4603      	mov	r3, r0
 8002a26:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002a28:	f7ff ffc6 	bl	80029b8 <BSP_LCD_GetYSize>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002a30:	88fa      	ldrh	r2, [r7, #6]
 8002a32:	f107 030c 	add.w	r3, r7, #12
 8002a36:	4619      	mov	r1, r3
 8002a38:	4814      	ldr	r0, [pc, #80]	; (8002a8c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002a3a:	f003 f9c7 	bl	8005dcc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	4913      	ldr	r1, [pc, #76]	; (8002a90 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a52:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002a54:	88fa      	ldrh	r2, [r7, #6]
 8002a56:	490e      	ldr	r1, [pc, #56]	; (8002a90 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	3308      	adds	r3, #8
 8002a64:	4a0b      	ldr	r2, [pc, #44]	; (8002a94 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002a66:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002a68:	88fa      	ldrh	r2, [r7, #6]
 8002a6a:	4909      	ldr	r1, [pc, #36]	; (8002a90 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002a7c:	4803      	ldr	r0, [pc, #12]	; (8002a8c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002a7e:	f003 f9e3 	bl	8005e48 <HAL_LTDC_EnableDither>
}
 8002a82:	bf00      	nop
 8002a84:	3740      	adds	r7, #64	; 0x40
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000644 	.word	0x20000644
 8002a90:	20000404 	.word	0x20000404
 8002a94:	20000074 	.word	0x20000074

08002a98 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002aa0:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <BSP_LCD_SelectLayer+0x1c>)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6013      	str	r3, [r2, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000400 	.word	0x20000400

08002ab8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002ac0:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <BSP_LCD_SetTextColor+0x28>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4907      	ldr	r1, [pc, #28]	; (8002ae4 <BSP_LCD_SetTextColor+0x2c>)
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	601a      	str	r2, [r3, #0]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	20000400 	.word	0x20000400
 8002ae4:	20000404 	.word	0x20000404

08002ae8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002af0:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <BSP_LCD_SetBackColor+0x2c>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4908      	ldr	r1, [pc, #32]	; (8002b18 <BSP_LCD_SetBackColor+0x30>)
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	3304      	adds	r3, #4
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	601a      	str	r2, [r3, #0]
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	20000400 	.word	0x20000400
 8002b18:	20000404 	.word	0x20000404

08002b1c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002b24:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <BSP_LCD_SetFont+0x2c>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4908      	ldr	r1, [pc, #32]	; (8002b4c <BSP_LCD_SetFont+0x30>)
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	3308      	adds	r3, #8
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	601a      	str	r2, [r3, #0]
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000400 	.word	0x20000400
 8002b4c:	20000404 	.word	0x20000404

08002b50 <BSP_LCD_ReadPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position 
  * @retval RGB pixel color
  */
uint32_t BSP_LCD_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002b50:	b5b0      	push	{r4, r5, r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	460a      	mov	r2, r1
 8002b5a:	80fb      	strh	r3, [r7, #6]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
  
  if(LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002b64:	4b4b      	ldr	r3, [pc, #300]	; (8002c94 <BSP_LCD_ReadPixel+0x144>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a4b      	ldr	r2, [pc, #300]	; (8002c98 <BSP_LCD_ReadPixel+0x148>)
 8002b6a:	2134      	movs	r1, #52	; 0x34
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	3348      	adds	r3, #72	; 0x48
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d115      	bne.n	8002ba6 <BSP_LCD_ReadPixel+0x56>
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos)));
 8002b7a:	4b46      	ldr	r3, [pc, #280]	; (8002c94 <BSP_LCD_ReadPixel+0x144>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a46      	ldr	r2, [pc, #280]	; (8002c98 <BSP_LCD_ReadPixel+0x148>)
 8002b80:	2134      	movs	r1, #52	; 0x34
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	335c      	adds	r3, #92	; 0x5c
 8002b8a:	681c      	ldr	r4, [r3, #0]
 8002b8c:	88bd      	ldrh	r5, [r7, #4]
 8002b8e:	f7ff ff07 	bl	80029a0 <BSP_LCD_GetXSize>
 8002b92:	4603      	mov	r3, r0
 8002b94:	fb03 f205 	mul.w	r2, r3, r5
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4423      	add	r3, r4
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	e070      	b.n	8002c88 <BSP_LCD_ReadPixel+0x138>
  }
  else if(LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002ba6:	4b3b      	ldr	r3, [pc, #236]	; (8002c94 <BSP_LCD_ReadPixel+0x144>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a3b      	ldr	r2, [pc, #236]	; (8002c98 <BSP_LCD_ReadPixel+0x148>)
 8002bac:	2134      	movs	r1, #52	; 0x34
 8002bae:	fb01 f303 	mul.w	r3, r1, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3348      	adds	r3, #72	; 0x48
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d117      	bne.n	8002bec <BSP_LCD_ReadPixel+0x9c>
  {
    /* Read data value from SDRAM memory */
    ret = (*(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) & 0x00FFFFFF);
 8002bbc:	4b35      	ldr	r3, [pc, #212]	; (8002c94 <BSP_LCD_ReadPixel+0x144>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a35      	ldr	r2, [pc, #212]	; (8002c98 <BSP_LCD_ReadPixel+0x148>)
 8002bc2:	2134      	movs	r1, #52	; 0x34
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	335c      	adds	r3, #92	; 0x5c
 8002bcc:	681c      	ldr	r4, [r3, #0]
 8002bce:	88bd      	ldrh	r5, [r7, #4]
 8002bd0:	f7ff fee6 	bl	80029a0 <BSP_LCD_GetXSize>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	fb03 f205 	mul.w	r2, r3, r5
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4423      	add	r3, r4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	e04d      	b.n	8002c88 <BSP_LCD_ReadPixel+0x138>
  }
  else if((LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 8002bec:	4b29      	ldr	r3, [pc, #164]	; (8002c94 <BSP_LCD_ReadPixel+0x144>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a29      	ldr	r2, [pc, #164]	; (8002c98 <BSP_LCD_ReadPixel+0x148>)
 8002bf2:	2134      	movs	r1, #52	; 0x34
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3348      	adds	r3, #72	; 0x48
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d015      	beq.n	8002c2e <BSP_LCD_ReadPixel+0xde>
          (LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002c02:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <BSP_LCD_ReadPixel+0x144>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a24      	ldr	r2, [pc, #144]	; (8002c98 <BSP_LCD_ReadPixel+0x148>)
 8002c08:	2134      	movs	r1, #52	; 0x34
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3348      	adds	r3, #72	; 0x48
 8002c12:	681b      	ldr	r3, [r3, #0]
  else if((LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d00a      	beq.n	8002c2e <BSP_LCD_ReadPixel+0xde>
          (LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_AL88))  
 8002c18:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <BSP_LCD_ReadPixel+0x144>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <BSP_LCD_ReadPixel+0x148>)
 8002c1e:	2134      	movs	r1, #52	; 0x34
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	3348      	adds	r3, #72	; 0x48
 8002c28:	681b      	ldr	r3, [r3, #0]
          (LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002c2a:	2b07      	cmp	r3, #7
 8002c2c:	d116      	bne.n	8002c5c <BSP_LCD_ReadPixel+0x10c>
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint16_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));    
 8002c2e:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <BSP_LCD_ReadPixel+0x144>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a19      	ldr	r2, [pc, #100]	; (8002c98 <BSP_LCD_ReadPixel+0x148>)
 8002c34:	2134      	movs	r1, #52	; 0x34
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	335c      	adds	r3, #92	; 0x5c
 8002c3e:	681c      	ldr	r4, [r3, #0]
 8002c40:	88bd      	ldrh	r5, [r7, #4]
 8002c42:	f7ff fead 	bl	80029a0 <BSP_LCD_GetXSize>
 8002c46:	4603      	mov	r3, r0
 8002c48:	fb03 f205 	mul.w	r2, r3, r5
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	4413      	add	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4423      	add	r3, r4
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	e015      	b.n	8002c88 <BSP_LCD_ReadPixel+0x138>
  }
  else
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint8_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));    
 8002c5c:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <BSP_LCD_ReadPixel+0x144>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0d      	ldr	r2, [pc, #52]	; (8002c98 <BSP_LCD_ReadPixel+0x148>)
 8002c62:	2134      	movs	r1, #52	; 0x34
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	335c      	adds	r3, #92	; 0x5c
 8002c6c:	681c      	ldr	r4, [r3, #0]
 8002c6e:	88bd      	ldrh	r5, [r7, #4]
 8002c70:	f7ff fe96 	bl	80029a0 <BSP_LCD_GetXSize>
 8002c74:	4603      	mov	r3, r0
 8002c76:	fb03 f205 	mul.w	r2, r3, r5
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4423      	add	r3, r4
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002c88:	68fb      	ldr	r3, [r7, #12]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bdb0      	pop	{r4, r5, r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000400 	.word	0x20000400
 8002c98:	20000644 	.word	0x20000644

08002c9c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <BSP_LCD_Clear+0x48>)
 8002ca6:	681c      	ldr	r4, [r3, #0]
 8002ca8:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <BSP_LCD_Clear+0x48>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a0e      	ldr	r2, [pc, #56]	; (8002ce8 <BSP_LCD_Clear+0x4c>)
 8002cae:	2134      	movs	r1, #52	; 0x34
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	335c      	adds	r3, #92	; 0x5c
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	461e      	mov	r6, r3
 8002cbc:	f7ff fe70 	bl	80029a0 <BSP_LCD_GetXSize>
 8002cc0:	4605      	mov	r5, r0
 8002cc2:	f7ff fe79 	bl	80029b8 <BSP_LCD_GetYSize>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	9301      	str	r3, [sp, #4]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	462a      	mov	r2, r5
 8002cd4:	4631      	mov	r1, r6
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	f000 fbdc 	bl	8003494 <FillBuffer>
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ce4:	20000400 	.word	0x20000400
 8002ce8:	20000644 	.word	0x20000644

08002cec <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002cec:	b590      	push	{r4, r7, lr}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	80fb      	strh	r3, [r7, #6]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	80bb      	strh	r3, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002cfe:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <BSP_LCD_DisplayChar+0x80>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	491b      	ldr	r1, [pc, #108]	; (8002d70 <BSP_LCD_DisplayChar+0x84>)
 8002d04:	4613      	mov	r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	3308      	adds	r3, #8
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002d1a:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <BSP_LCD_DisplayChar+0x80>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4c14      	ldr	r4, [pc, #80]	; (8002d70 <BSP_LCD_DisplayChar+0x84>)
 8002d20:	4613      	mov	r3, r2
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4423      	add	r3, r4
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002d30:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002d34:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <BSP_LCD_DisplayChar+0x80>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4c0d      	ldr	r4, [pc, #52]	; (8002d70 <BSP_LCD_DisplayChar+0x84>)
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4423      	add	r3, r4
 8002d44:	3308      	adds	r3, #8
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	889b      	ldrh	r3, [r3, #4]
 8002d4a:	3307      	adds	r3, #7
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	da00      	bge.n	8002d52 <BSP_LCD_DisplayChar+0x66>
 8002d50:	3307      	adds	r3, #7
 8002d52:	10db      	asrs	r3, r3, #3
 8002d54:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002d58:	18ca      	adds	r2, r1, r3
 8002d5a:	88b9      	ldrh	r1, [r7, #4]
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fade 	bl	8003320 <DrawChar>
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd90      	pop	{r4, r7, pc}
 8002d6c:	20000400 	.word	0x20000400
 8002d70:	20000404 	.word	0x20000404

08002d74 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002d74:	b5b0      	push	{r4, r5, r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60ba      	str	r2, [r7, #8]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	81fb      	strh	r3, [r7, #14]
 8002d82:	460b      	mov	r3, r1
 8002d84:	81bb      	strh	r3, [r7, #12]
 8002d86:	4613      	mov	r3, r2
 8002d88:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	83fb      	strh	r3, [r7, #30]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002d9e:	e002      	b.n	8002da6 <BSP_LCD_DisplayStringAt+0x32>
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	3301      	adds	r3, #1
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	617a      	str	r2, [r7, #20]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f6      	bne.n	8002da0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002db2:	f7ff fdf5 	bl	80029a0 <BSP_LCD_GetXSize>
 8002db6:	4601      	mov	r1, r0
 8002db8:	4b4b      	ldr	r3, [pc, #300]	; (8002ee8 <BSP_LCD_DisplayStringAt+0x174>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	484b      	ldr	r0, [pc, #300]	; (8002eec <BSP_LCD_DisplayStringAt+0x178>)
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4403      	add	r3, r0
 8002dc8:	3308      	adds	r3, #8
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	889b      	ldrh	r3, [r3, #4]
 8002dce:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dd2:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d01c      	beq.n	8002e14 <BSP_LCD_DisplayStringAt+0xa0>
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	dc33      	bgt.n	8002e46 <BSP_LCD_DisplayStringAt+0xd2>
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d002      	beq.n	8002de8 <BSP_LCD_DisplayStringAt+0x74>
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d019      	beq.n	8002e1a <BSP_LCD_DisplayStringAt+0xa6>
 8002de6:	e02e      	b.n	8002e46 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	1ad1      	subs	r1, r2, r3
 8002dee:	4b3e      	ldr	r3, [pc, #248]	; (8002ee8 <BSP_LCD_DisplayStringAt+0x174>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	483e      	ldr	r0, [pc, #248]	; (8002eec <BSP_LCD_DisplayStringAt+0x178>)
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4403      	add	r3, r0
 8002dfe:	3308      	adds	r3, #8
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	889b      	ldrh	r3, [r3, #4]
 8002e04:	fb03 f301 	mul.w	r3, r3, r1
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	89fb      	ldrh	r3, [r7, #14]
 8002e0e:	4413      	add	r3, r2
 8002e10:	83fb      	strh	r3, [r7, #30]
      break;
 8002e12:	e01b      	b.n	8002e4c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002e14:	89fb      	ldrh	r3, [r7, #14]
 8002e16:	83fb      	strh	r3, [r7, #30]
      break;
 8002e18:	e018      	b.n	8002e4c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	b299      	uxth	r1, r3
 8002e22:	4b31      	ldr	r3, [pc, #196]	; (8002ee8 <BSP_LCD_DisplayStringAt+0x174>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4831      	ldr	r0, [pc, #196]	; (8002eec <BSP_LCD_DisplayStringAt+0x178>)
 8002e28:	4613      	mov	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4403      	add	r3, r0
 8002e32:	3308      	adds	r3, #8
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	889b      	ldrh	r3, [r3, #4]
 8002e38:	fb11 f303 	smulbb	r3, r1, r3
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	89fb      	ldrh	r3, [r7, #14]
 8002e40:	4413      	add	r3, r2
 8002e42:	83fb      	strh	r3, [r7, #30]
      break;
 8002e44:	e002      	b.n	8002e4c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8002e46:	89fb      	ldrh	r3, [r7, #14]
 8002e48:	83fb      	strh	r3, [r7, #30]
      break;
 8002e4a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002e4c:	e01a      	b.n	8002e84 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	781a      	ldrb	r2, [r3, #0]
 8002e52:	89b9      	ldrh	r1, [r7, #12]
 8002e54:	8bfb      	ldrh	r3, [r7, #30]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff48 	bl	8002cec <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002e5c:	4b22      	ldr	r3, [pc, #136]	; (8002ee8 <BSP_LCD_DisplayStringAt+0x174>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4922      	ldr	r1, [pc, #136]	; (8002eec <BSP_LCD_DisplayStringAt+0x178>)
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3308      	adds	r3, #8
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	889a      	ldrh	r2, [r3, #4]
 8002e72:	8bfb      	ldrh	r3, [r7, #30]
 8002e74:	4413      	add	r3, r2
 8002e76:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	60bb      	str	r3, [r7, #8]
    i++;
 8002e7e:	8bbb      	ldrh	r3, [r7, #28]
 8002e80:	3301      	adds	r3, #1
 8002e82:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf14      	ite	ne
 8002e8c:	2301      	movne	r3, #1
 8002e8e:	2300      	moveq	r3, #0
 8002e90:	b2dc      	uxtb	r4, r3
 8002e92:	f7ff fd85 	bl	80029a0 <BSP_LCD_GetXSize>
 8002e96:	8bb9      	ldrh	r1, [r7, #28]
 8002e98:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <BSP_LCD_DisplayStringAt+0x174>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4d13      	ldr	r5, [pc, #76]	; (8002eec <BSP_LCD_DisplayStringAt+0x178>)
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	442b      	add	r3, r5
 8002ea8:	3308      	adds	r3, #8
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	889b      	ldrh	r3, [r3, #4]
 8002eae:	fb03 f301 	mul.w	r3, r3, r1
 8002eb2:	1ac3      	subs	r3, r0, r3
 8002eb4:	b299      	uxth	r1, r3
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <BSP_LCD_DisplayStringAt+0x174>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	480c      	ldr	r0, [pc, #48]	; (8002eec <BSP_LCD_DisplayStringAt+0x178>)
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4403      	add	r3, r0
 8002ec6:	3308      	adds	r3, #8
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	889b      	ldrh	r3, [r3, #4]
 8002ecc:	4299      	cmp	r1, r3
 8002ece:	bf2c      	ite	cs
 8002ed0:	2301      	movcs	r3, #1
 8002ed2:	2300      	movcc	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	4023      	ands	r3, r4
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1b7      	bne.n	8002e4e <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002ede:	bf00      	nop
 8002ee0:	bf00      	nop
 8002ee2:	3720      	adds	r7, #32
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ee8:	20000400 	.word	0x20000400
 8002eec:	20000404 	.word	0x20000404

08002ef0 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002ef0:	b5b0      	push	{r4, r5, r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	80fb      	strh	r3, [r7, #6]
 8002efa:	460b      	mov	r3, r1
 8002efc:	80bb      	strh	r3, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002f06:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <BSP_LCD_DrawHLine+0x70>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a16      	ldr	r2, [pc, #88]	; (8002f64 <BSP_LCD_DrawHLine+0x74>)
 8002f0c:	2134      	movs	r1, #52	; 0x34
 8002f0e:	fb01 f303 	mul.w	r3, r1, r3
 8002f12:	4413      	add	r3, r2
 8002f14:	335c      	adds	r3, #92	; 0x5c
 8002f16:	681c      	ldr	r4, [r3, #0]
 8002f18:	f7ff fd42 	bl	80029a0 <BSP_LCD_GetXSize>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	88bb      	ldrh	r3, [r7, #4]
 8002f20:	fb03 f202 	mul.w	r2, r3, r2
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4423      	add	r3, r4
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <BSP_LCD_DrawHLine+0x70>)
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	68f9      	ldr	r1, [r7, #12]
 8002f34:	887c      	ldrh	r4, [r7, #2]
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <BSP_LCD_DrawHLine+0x70>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	4d0b      	ldr	r5, [pc, #44]	; (8002f68 <BSP_LCD_DrawHLine+0x78>)
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	442b      	add	r3, r5
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	2301      	movs	r3, #1
 8002f50:	4622      	mov	r2, r4
 8002f52:	f000 fa9f 	bl	8003494 <FillBuffer>
}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000400 	.word	0x20000400
 8002f64:	20000644 	.word	0x20000644
 8002f68:	20000404 	.word	0x20000404

08002f6c <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	4603      	mov	r3, r0
 8002f74:	80fb      	strh	r3, [r7, #6]
 8002f76:	460b      	mov	r3, r1
 8002f78:	80bb      	strh	r3, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002f82:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <BSP_LCD_DrawVLine+0x78>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <BSP_LCD_DrawVLine+0x7c>)
 8002f88:	2134      	movs	r1, #52	; 0x34
 8002f8a:	fb01 f303 	mul.w	r3, r1, r3
 8002f8e:	4413      	add	r3, r2
 8002f90:	335c      	adds	r3, #92	; 0x5c
 8002f92:	681c      	ldr	r4, [r3, #0]
 8002f94:	f7ff fd04 	bl	80029a0 <BSP_LCD_GetXSize>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	88bb      	ldrh	r3, [r7, #4]
 8002f9c:	fb03 f202 	mul.w	r2, r3, r2
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4423      	add	r3, r4
 8002fa8:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002faa:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <BSP_LCD_DrawVLine+0x78>)
 8002fac:	681c      	ldr	r4, [r3, #0]
 8002fae:	68fd      	ldr	r5, [r7, #12]
 8002fb0:	887e      	ldrh	r6, [r7, #2]
 8002fb2:	f7ff fcf5 	bl	80029a0 <BSP_LCD_GetXSize>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	1e59      	subs	r1, r3, #1
 8002fba:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <BSP_LCD_DrawVLine+0x78>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	480b      	ldr	r0, [pc, #44]	; (8002fec <BSP_LCD_DrawVLine+0x80>)
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4403      	add	r3, r0
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	9301      	str	r3, [sp, #4]
 8002fce:	9100      	str	r1, [sp, #0]
 8002fd0:	4633      	mov	r3, r6
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f000 fa5c 	bl	8003494 <FillBuffer>
}
 8002fdc:	bf00      	nop
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe4:	20000400 	.word	0x20000400
 8002fe8:	20000644 	.word	0x20000644
 8002fec:	20000404 	.word	0x20000404

08002ff0 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4604      	mov	r4, r0
 8002ff8:	4608      	mov	r0, r1
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4623      	mov	r3, r4
 8003000:	80fb      	strh	r3, [r7, #6]
 8003002:	4603      	mov	r3, r0
 8003004:	80bb      	strh	r3, [r7, #4]
 8003006:	460b      	mov	r3, r1
 8003008:	807b      	strh	r3, [r7, #2]
 800300a:	4613      	mov	r3, r2
 800300c:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800300e:	887a      	ldrh	r2, [r7, #2]
 8003010:	88b9      	ldrh	r1, [r7, #4]
 8003012:	88fb      	ldrh	r3, [r7, #6]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff6b 	bl	8002ef0 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 800301a:	88ba      	ldrh	r2, [r7, #4]
 800301c:	883b      	ldrh	r3, [r7, #0]
 800301e:	4413      	add	r3, r2
 8003020:	b299      	uxth	r1, r3
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff ff62 	bl	8002ef0 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 800302c:	883a      	ldrh	r2, [r7, #0]
 800302e:	88b9      	ldrh	r1, [r7, #4]
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff ff9a 	bl	8002f6c <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8003038:	88fa      	ldrh	r2, [r7, #6]
 800303a:	887b      	ldrh	r3, [r7, #2]
 800303c:	4413      	add	r3, r2
 800303e:	b29b      	uxth	r3, r3
 8003040:	883a      	ldrh	r2, [r7, #0]
 8003042:	88b9      	ldrh	r1, [r7, #4]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff ff91 	bl	8002f6c <BSP_LCD_DrawVLine>
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	bd90      	pop	{r4, r7, pc}
	...

08003054 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003058:	b086      	sub	sp, #24
 800305a:	af02      	add	r7, sp, #8
 800305c:	4604      	mov	r4, r0
 800305e:	4608      	mov	r0, r1
 8003060:	4611      	mov	r1, r2
 8003062:	461a      	mov	r2, r3
 8003064:	4623      	mov	r3, r4
 8003066:	80fb      	strh	r3, [r7, #6]
 8003068:	4603      	mov	r3, r0
 800306a:	80bb      	strh	r3, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	807b      	strh	r3, [r7, #2]
 8003070:	4613      	mov	r3, r2
 8003072:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003078:	4b20      	ldr	r3, [pc, #128]	; (80030fc <BSP_LCD_FillRect+0xa8>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4920      	ldr	r1, [pc, #128]	; (8003100 <BSP_LCD_FillRect+0xac>)
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fd14 	bl	8002ab8 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003090:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <BSP_LCD_FillRect+0xa8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1b      	ldr	r2, [pc, #108]	; (8003104 <BSP_LCD_FillRect+0xb0>)
 8003096:	2134      	movs	r1, #52	; 0x34
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	4413      	add	r3, r2
 800309e:	335c      	adds	r3, #92	; 0x5c
 80030a0:	681c      	ldr	r4, [r3, #0]
 80030a2:	f7ff fc7d 	bl	80029a0 <BSP_LCD_GetXSize>
 80030a6:	4602      	mov	r2, r0
 80030a8:	88bb      	ldrh	r3, [r7, #4]
 80030aa:	fb03 f202 	mul.w	r2, r3, r2
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4423      	add	r3, r4
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80030b8:	4b10      	ldr	r3, [pc, #64]	; (80030fc <BSP_LCD_FillRect+0xa8>)
 80030ba:	681c      	ldr	r4, [r3, #0]
 80030bc:	68fd      	ldr	r5, [r7, #12]
 80030be:	887e      	ldrh	r6, [r7, #2]
 80030c0:	f8b7 8000 	ldrh.w	r8, [r7]
 80030c4:	f7ff fc6c 	bl	80029a0 <BSP_LCD_GetXSize>
 80030c8:	4602      	mov	r2, r0
 80030ca:	887b      	ldrh	r3, [r7, #2]
 80030cc:	1ad1      	subs	r1, r2, r3
 80030ce:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <BSP_LCD_FillRect+0xa8>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	480b      	ldr	r0, [pc, #44]	; (8003100 <BSP_LCD_FillRect+0xac>)
 80030d4:	4613      	mov	r3, r2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4403      	add	r3, r0
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	9100      	str	r1, [sp, #0]
 80030e4:	4643      	mov	r3, r8
 80030e6:	4632      	mov	r2, r6
 80030e8:	4629      	mov	r1, r5
 80030ea:	4620      	mov	r0, r4
 80030ec:	f000 f9d2 	bl	8003494 <FillBuffer>
}
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030fa:	bf00      	nop
 80030fc:	20000400 	.word	0x20000400
 8003100:	20000404 	.word	0x20000404
 8003104:	20000644 	.word	0x20000644

08003108 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <BSP_LCD_DisplayOn+0x1c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003116:	4b03      	ldr	r3, [pc, #12]	; (8003124 <BSP_LCD_DisplayOn+0x1c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4798      	blx	r3
  }
}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	200006ec 	.word	0x200006ec

08003128 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08e      	sub	sp, #56	; 0x38
 800312c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	623b      	str	r3, [r7, #32]
 8003132:	4b61      	ldr	r3, [pc, #388]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	4a60      	ldr	r2, [pc, #384]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 8003138:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800313c:	6453      	str	r3, [r2, #68]	; 0x44
 800313e:	4b5e      	ldr	r3, [pc, #376]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003146:	623b      	str	r3, [r7, #32]
 8003148:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	4b5a      	ldr	r3, [pc, #360]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a59      	ldr	r2, [pc, #356]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 8003154:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b57      	ldr	r3, [pc, #348]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003162:	61fb      	str	r3, [r7, #28]
 8003164:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	4b53      	ldr	r3, [pc, #332]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	4a52      	ldr	r2, [pc, #328]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	6313      	str	r3, [r2, #48]	; 0x30
 8003176:	4b50      	ldr	r3, [pc, #320]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	61bb      	str	r3, [r7, #24]
 8003180:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	4b4c      	ldr	r3, [pc, #304]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	4a4b      	ldr	r2, [pc, #300]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 800318c:	f043 0302 	orr.w	r3, r3, #2
 8003190:	6313      	str	r3, [r2, #48]	; 0x30
 8003192:	4b49      	ldr	r3, [pc, #292]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	4b45      	ldr	r3, [pc, #276]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	4a44      	ldr	r2, [pc, #272]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 80031a8:	f043 0304 	orr.w	r3, r3, #4
 80031ac:	6313      	str	r3, [r2, #48]	; 0x30
 80031ae:	4b42      	ldr	r3, [pc, #264]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	4b3e      	ldr	r3, [pc, #248]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	4a3d      	ldr	r2, [pc, #244]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 80031c4:	f043 0308 	orr.w	r3, r3, #8
 80031c8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ca:	4b3b      	ldr	r3, [pc, #236]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	4b37      	ldr	r3, [pc, #220]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	4a36      	ldr	r2, [pc, #216]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 80031e0:	f043 0320 	orr.w	r3, r3, #32
 80031e4:	6313      	str	r3, [r2, #48]	; 0x30
 80031e6:	4b34      	ldr	r3, [pc, #208]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	4a2f      	ldr	r2, [pc, #188]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 80031fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003200:	6313      	str	r3, [r2, #48]	; 0x30
 8003202:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <BSP_LCD_MspInit+0x190>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800320e:	f641 0358 	movw	r3, #6232	; 0x1858
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003214:	2302      	movs	r3, #2
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003218:	2300      	movs	r3, #0
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800321c:	2302      	movs	r3, #2
 800321e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003220:	230e      	movs	r3, #14
 8003222:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003228:	4619      	mov	r1, r3
 800322a:	4824      	ldr	r0, [pc, #144]	; (80032bc <BSP_LCD_MspInit+0x194>)
 800322c:	f001 fa2e 	bl	800468c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003230:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800323a:	4619      	mov	r1, r3
 800323c:	4820      	ldr	r0, [pc, #128]	; (80032c0 <BSP_LCD_MspInit+0x198>)
 800323e:	f001 fa25 	bl	800468c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003242:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800324c:	4619      	mov	r1, r3
 800324e:	481d      	ldr	r0, [pc, #116]	; (80032c4 <BSP_LCD_MspInit+0x19c>)
 8003250:	f001 fa1c 	bl	800468c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003254:	2348      	movs	r3, #72	; 0x48
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800325c:	4619      	mov	r1, r3
 800325e:	481a      	ldr	r0, [pc, #104]	; (80032c8 <BSP_LCD_MspInit+0x1a0>)
 8003260:	f001 fa14 	bl	800468c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800326a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800326e:	4619      	mov	r1, r3
 8003270:	4816      	ldr	r0, [pc, #88]	; (80032cc <BSP_LCD_MspInit+0x1a4>)
 8003272:	f001 fa0b 	bl	800468c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003276:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800327c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003280:	4619      	mov	r1, r3
 8003282:	4813      	ldr	r0, [pc, #76]	; (80032d0 <BSP_LCD_MspInit+0x1a8>)
 8003284:	f001 fa02 	bl	800468c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003288:	2303      	movs	r3, #3
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800328c:	2309      	movs	r3, #9
 800328e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003294:	4619      	mov	r1, r3
 8003296:	480a      	ldr	r0, [pc, #40]	; (80032c0 <BSP_LCD_MspInit+0x198>)
 8003298:	f001 f9f8 	bl	800468c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800329c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80032a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a6:	4619      	mov	r1, r3
 80032a8:	4809      	ldr	r0, [pc, #36]	; (80032d0 <BSP_LCD_MspInit+0x1a8>)
 80032aa:	f001 f9ef 	bl	800468c <HAL_GPIO_Init>
}
 80032ae:	bf00      	nop
 80032b0:	3738      	adds	r7, #56	; 0x38
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800
 80032bc:	40020000 	.word	0x40020000
 80032c0:	40020400 	.word	0x40020400
 80032c4:	40020800 	.word	0x40020800
 80032c8:	40020c00 	.word	0x40020c00
 80032cc:	40021400 	.word	0x40021400
 80032d0:	40021800 	.word	0x40021800

080032d4 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80032d4:	b5b0      	push	{r4, r5, r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	603a      	str	r2, [r7, #0]
 80032de:	80fb      	strh	r3, [r7, #6]
 80032e0:	460b      	mov	r3, r1
 80032e2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <BSP_LCD_DrawPixel+0x44>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a0c      	ldr	r2, [pc, #48]	; (800331c <BSP_LCD_DrawPixel+0x48>)
 80032ea:	2134      	movs	r1, #52	; 0x34
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	335c      	adds	r3, #92	; 0x5c
 80032f4:	681c      	ldr	r4, [r3, #0]
 80032f6:	88bd      	ldrh	r5, [r7, #4]
 80032f8:	f7ff fb52 	bl	80029a0 <BSP_LCD_GetXSize>
 80032fc:	4603      	mov	r3, r0
 80032fe:	fb03 f205 	mul.w	r2, r3, r5
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4423      	add	r3, r4
 800330a:	461a      	mov	r2, r3
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	6013      	str	r3, [r2, #0]
}
 8003310:	bf00      	nop
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bdb0      	pop	{r4, r5, r7, pc}
 8003318:	20000400 	.word	0x20000400
 800331c:	20000644 	.word	0x20000644

08003320 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	603a      	str	r2, [r7, #0]
 800332a:	80fb      	strh	r3, [r7, #6]
 800332c:	460b      	mov	r3, r1
 800332e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	61fb      	str	r3, [r7, #28]
 8003334:	2300      	movs	r3, #0
 8003336:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 800333c:	4b53      	ldr	r3, [pc, #332]	; (800348c <DrawChar+0x16c>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4953      	ldr	r1, [pc, #332]	; (8003490 <DrawChar+0x170>)
 8003342:	4613      	mov	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	3308      	adds	r3, #8
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	88db      	ldrh	r3, [r3, #6]
 8003352:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003354:	4b4d      	ldr	r3, [pc, #308]	; (800348c <DrawChar+0x16c>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	494d      	ldr	r1, [pc, #308]	; (8003490 <DrawChar+0x170>)
 800335a:	4613      	mov	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	3308      	adds	r3, #8
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	889b      	ldrh	r3, [r3, #4]
 800336a:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 800336c:	8a3b      	ldrh	r3, [r7, #16]
 800336e:	3307      	adds	r3, #7
 8003370:	2b00      	cmp	r3, #0
 8003372:	da00      	bge.n	8003376 <DrawChar+0x56>
 8003374:	3307      	adds	r3, #7
 8003376:	10db      	asrs	r3, r3, #3
 8003378:	b2db      	uxtb	r3, r3
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	b2da      	uxtb	r2, r3
 800337e:	8a3b      	ldrh	r3, [r7, #16]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	e076      	b.n	800347a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800338c:	8a3b      	ldrh	r3, [r7, #16]
 800338e:	3307      	adds	r3, #7
 8003390:	2b00      	cmp	r3, #0
 8003392:	da00      	bge.n	8003396 <DrawChar+0x76>
 8003394:	3307      	adds	r3, #7
 8003396:	10db      	asrs	r3, r3, #3
 8003398:	461a      	mov	r2, r3
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fb03 f302 	mul.w	r3, r3, r2
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80033a6:	8a3b      	ldrh	r3, [r7, #16]
 80033a8:	3307      	adds	r3, #7
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	da00      	bge.n	80033b0 <DrawChar+0x90>
 80033ae:	3307      	adds	r3, #7
 80033b0:	10db      	asrs	r3, r3, #3
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d002      	beq.n	80033bc <DrawChar+0x9c>
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d004      	beq.n	80033c4 <DrawChar+0xa4>
 80033ba:	e00c      	b.n	80033d6 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	617b      	str	r3, [r7, #20]
      break;
 80033c2:	e016      	b.n	80033f2 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	3201      	adds	r2, #1
 80033ce:	7812      	ldrb	r2, [r2, #0]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]
      break;
 80033d4:	e00d      	b.n	80033f2 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	041a      	lsls	r2, r3, #16
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	3301      	adds	r3, #1
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	4313      	orrs	r3, r2
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	3202      	adds	r2, #2
 80033ea:	7812      	ldrb	r2, [r2, #0]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]
      break;
 80033f0:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80033f2:	2300      	movs	r3, #0
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	e036      	b.n	8003466 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80033f8:	8a3a      	ldrh	r2, [r7, #16]
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	1ad2      	subs	r2, r2, r3
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	4413      	add	r3, r2
 8003402:	3b01      	subs	r3, #1
 8003404:	2201      	movs	r2, #1
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	461a      	mov	r2, r3
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d012      	beq.n	800343a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	b29a      	uxth	r2, r3
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	4413      	add	r3, r2
 800341c:	b298      	uxth	r0, r3
 800341e:	4b1b      	ldr	r3, [pc, #108]	; (800348c <DrawChar+0x16c>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	491b      	ldr	r1, [pc, #108]	; (8003490 <DrawChar+0x170>)
 8003424:	4613      	mov	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	88bb      	ldrh	r3, [r7, #4]
 8003432:	4619      	mov	r1, r3
 8003434:	f7ff ff4e 	bl	80032d4 <BSP_LCD_DrawPixel>
 8003438:	e012      	b.n	8003460 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	b29a      	uxth	r2, r3
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	4413      	add	r3, r2
 8003442:	b298      	uxth	r0, r3
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <DrawChar+0x16c>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4911      	ldr	r1, [pc, #68]	; (8003490 <DrawChar+0x170>)
 800344a:	4613      	mov	r3, r2
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	4413      	add	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	3304      	adds	r3, #4
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	88bb      	ldrh	r3, [r7, #4]
 800345a:	4619      	mov	r1, r3
 800345c:	f7ff ff3a 	bl	80032d4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	3301      	adds	r3, #1
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	8a3b      	ldrh	r3, [r7, #16]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	429a      	cmp	r2, r3
 800346c:	d3c4      	bcc.n	80033f8 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800346e:	88bb      	ldrh	r3, [r7, #4]
 8003470:	3301      	adds	r3, #1
 8003472:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	3301      	adds	r3, #1
 8003478:	61fb      	str	r3, [r7, #28]
 800347a:	8a7b      	ldrh	r3, [r7, #18]
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	429a      	cmp	r2, r3
 8003480:	d384      	bcc.n	800338c <DrawChar+0x6c>
  }
}
 8003482:	bf00      	nop
 8003484:	bf00      	nop
 8003486:	3720      	adds	r7, #32
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20000400 	.word	0x20000400
 8003490:	20000404 	.word	0x20000404

08003494 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80034a2:	4b16      	ldr	r3, [pc, #88]	; (80034fc <FillBuffer+0x68>)
 80034a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80034a8:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80034aa:	4b14      	ldr	r3, [pc, #80]	; (80034fc <FillBuffer+0x68>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80034b0:	4a12      	ldr	r2, [pc, #72]	; (80034fc <FillBuffer+0x68>)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80034b6:	4b11      	ldr	r3, [pc, #68]	; (80034fc <FillBuffer+0x68>)
 80034b8:	4a11      	ldr	r2, [pc, #68]	; (8003500 <FillBuffer+0x6c>)
 80034ba:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80034bc:	480f      	ldr	r0, [pc, #60]	; (80034fc <FillBuffer+0x68>)
 80034be:	f000 fe59 	bl	8004174 <HAL_DMA2D_Init>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d115      	bne.n	80034f4 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80034c8:	68f9      	ldr	r1, [r7, #12]
 80034ca:	480c      	ldr	r0, [pc, #48]	; (80034fc <FillBuffer+0x68>)
 80034cc:	f000 ffb0 	bl	8004430 <HAL_DMA2D_ConfigLayer>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10e      	bne.n	80034f4 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69f9      	ldr	r1, [r7, #28]
 80034e0:	4806      	ldr	r0, [pc, #24]	; (80034fc <FillBuffer+0x68>)
 80034e2:	f000 fe90 	bl	8004206 <HAL_DMA2D_Start>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d103      	bne.n	80034f4 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80034ec:	210a      	movs	r1, #10
 80034ee:	4803      	ldr	r0, [pc, #12]	; (80034fc <FillBuffer+0x68>)
 80034f0:	f000 feb4 	bl	800425c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	20000390 	.word	0x20000390
 8003500:	4002b000 	.word	0x4002b000

08003504 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003508:	4b29      	ldr	r3, [pc, #164]	; (80035b0 <BSP_SDRAM_Init+0xac>)
 800350a:	4a2a      	ldr	r2, [pc, #168]	; (80035b4 <BSP_SDRAM_Init+0xb0>)
 800350c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800350e:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <BSP_SDRAM_Init+0xb4>)
 8003510:	2202      	movs	r2, #2
 8003512:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003514:	4b28      	ldr	r3, [pc, #160]	; (80035b8 <BSP_SDRAM_Init+0xb4>)
 8003516:	2207      	movs	r2, #7
 8003518:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800351a:	4b27      	ldr	r3, [pc, #156]	; (80035b8 <BSP_SDRAM_Init+0xb4>)
 800351c:	2204      	movs	r2, #4
 800351e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003520:	4b25      	ldr	r3, [pc, #148]	; (80035b8 <BSP_SDRAM_Init+0xb4>)
 8003522:	2207      	movs	r2, #7
 8003524:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003526:	4b24      	ldr	r3, [pc, #144]	; (80035b8 <BSP_SDRAM_Init+0xb4>)
 8003528:	2202      	movs	r2, #2
 800352a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800352c:	4b22      	ldr	r3, [pc, #136]	; (80035b8 <BSP_SDRAM_Init+0xb4>)
 800352e:	2202      	movs	r2, #2
 8003530:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003532:	4b21      	ldr	r3, [pc, #132]	; (80035b8 <BSP_SDRAM_Init+0xb4>)
 8003534:	2202      	movs	r2, #2
 8003536:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003538:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <BSP_SDRAM_Init+0xac>)
 800353a:	2201      	movs	r2, #1
 800353c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800353e:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <BSP_SDRAM_Init+0xac>)
 8003540:	2200      	movs	r2, #0
 8003542:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003544:	4b1a      	ldr	r3, [pc, #104]	; (80035b0 <BSP_SDRAM_Init+0xac>)
 8003546:	2204      	movs	r2, #4
 8003548:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800354a:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <BSP_SDRAM_Init+0xac>)
 800354c:	2210      	movs	r2, #16
 800354e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003550:	4b17      	ldr	r3, [pc, #92]	; (80035b0 <BSP_SDRAM_Init+0xac>)
 8003552:	2240      	movs	r2, #64	; 0x40
 8003554:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003556:	4b16      	ldr	r3, [pc, #88]	; (80035b0 <BSP_SDRAM_Init+0xac>)
 8003558:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800355c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800355e:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <BSP_SDRAM_Init+0xac>)
 8003560:	2200      	movs	r2, #0
 8003562:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003564:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <BSP_SDRAM_Init+0xac>)
 8003566:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800356a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800356c:	4b10      	ldr	r3, [pc, #64]	; (80035b0 <BSP_SDRAM_Init+0xac>)
 800356e:	2200      	movs	r2, #0
 8003570:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003572:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <BSP_SDRAM_Init+0xac>)
 8003574:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003578:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800357a:	2100      	movs	r1, #0
 800357c:	480c      	ldr	r0, [pc, #48]	; (80035b0 <BSP_SDRAM_Init+0xac>)
 800357e:	f000 f87f 	bl	8003680 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003582:	490d      	ldr	r1, [pc, #52]	; (80035b8 <BSP_SDRAM_Init+0xb4>)
 8003584:	480a      	ldr	r0, [pc, #40]	; (80035b0 <BSP_SDRAM_Init+0xac>)
 8003586:	f003 fc69 	bl	8006e5c <HAL_SDRAM_Init>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003590:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <BSP_SDRAM_Init+0xb8>)
 8003592:	2201      	movs	r2, #1
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	e002      	b.n	800359e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003598:	4b08      	ldr	r3, [pc, #32]	; (80035bc <BSP_SDRAM_Init+0xb8>)
 800359a:	2200      	movs	r2, #0
 800359c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800359e:	f240 506a 	movw	r0, #1386	; 0x56a
 80035a2:	f000 f80d 	bl	80035c0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80035a6:	4b05      	ldr	r3, [pc, #20]	; (80035bc <BSP_SDRAM_Init+0xb8>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	2000041c 	.word	0x2000041c
 80035b4:	a0000140 	.word	0xa0000140
 80035b8:	20000450 	.word	0x20000450
 80035bc:	20000084 	.word	0x20000084

080035c0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80035cc:	4b2a      	ldr	r3, [pc, #168]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80035d2:	4b29      	ldr	r3, [pc, #164]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035d4:	2208      	movs	r2, #8
 80035d6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80035d8:	4b27      	ldr	r3, [pc, #156]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035da:	2201      	movs	r2, #1
 80035dc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80035de:	4b26      	ldr	r3, [pc, #152]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80035e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035e8:	4923      	ldr	r1, [pc, #140]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035ea:	4824      	ldr	r0, [pc, #144]	; (800367c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80035ec:	f003 fc6a 	bl	8006ec4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80035f0:	2001      	movs	r0, #1
 80035f2:	f000 faaf 	bl	8003b54 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80035f6:	4b20      	ldr	r3, [pc, #128]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035f8:	2202      	movs	r2, #2
 80035fa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80035fc:	4b1e      	ldr	r3, [pc, #120]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035fe:	2208      	movs	r2, #8
 8003600:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003602:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003604:	2201      	movs	r2, #1
 8003606:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003608:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800360a:	2200      	movs	r2, #0
 800360c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800360e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003612:	4919      	ldr	r1, [pc, #100]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003614:	4819      	ldr	r0, [pc, #100]	; (800367c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003616:	f003 fc55 	bl	8006ec4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800361a:	4b17      	ldr	r3, [pc, #92]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800361c:	2203      	movs	r2, #3
 800361e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003620:	4b15      	ldr	r3, [pc, #84]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003622:	2208      	movs	r2, #8
 8003624:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003626:	4b14      	ldr	r3, [pc, #80]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003628:	2204      	movs	r2, #4
 800362a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800362c:	4b12      	ldr	r3, [pc, #72]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800362e:	2200      	movs	r2, #0
 8003630:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003636:	4910      	ldr	r1, [pc, #64]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003638:	4810      	ldr	r0, [pc, #64]	; (800367c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800363a:	f003 fc43 	bl	8006ec4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800363e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003642:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003646:	2204      	movs	r2, #4
 8003648:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800364a:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800364c:	2208      	movs	r2, #8
 800364e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003650:	4b09      	ldr	r3, [pc, #36]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003652:	2201      	movs	r2, #1
 8003654:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4a07      	ldr	r2, [pc, #28]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800365a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800365c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003660:	4905      	ldr	r1, [pc, #20]	; (8003678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003662:	4806      	ldr	r0, [pc, #24]	; (800367c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003664:	f003 fc2e 	bl	8006ec4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4804      	ldr	r0, [pc, #16]	; (800367c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800366c:	f003 fc55 	bl	8006f1a <HAL_SDRAM_ProgramRefreshRate>
}
 8003670:	bf00      	nop
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	2000046c 	.word	0x2000046c
 800367c:	2000041c 	.word	0x2000041c

08003680 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b090      	sub	sp, #64	; 0x40
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80ec 	beq.w	800386a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
 8003696:	4b77      	ldr	r3, [pc, #476]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 8003698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369a:	4a76      	ldr	r2, [pc, #472]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6393      	str	r3, [r2, #56]	; 0x38
 80036a2:	4b74      	ldr	r3, [pc, #464]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 80036a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ac:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
 80036b2:	4b70      	ldr	r3, [pc, #448]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	4a6f      	ldr	r2, [pc, #444]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 80036b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036bc:	6313      	str	r3, [r2, #48]	; 0x30
 80036be:	4b6d      	ldr	r3, [pc, #436]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	623b      	str	r3, [r7, #32]
 80036ce:	4b69      	ldr	r3, [pc, #420]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	4a68      	ldr	r2, [pc, #416]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 80036d4:	f043 0302 	orr.w	r3, r3, #2
 80036d8:	6313      	str	r3, [r2, #48]	; 0x30
 80036da:	4b66      	ldr	r3, [pc, #408]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
 80036ea:	4b62      	ldr	r3, [pc, #392]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	4a61      	ldr	r2, [pc, #388]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 80036f0:	f043 0304 	orr.w	r3, r3, #4
 80036f4:	6313      	str	r3, [r2, #48]	; 0x30
 80036f6:	4b5f      	ldr	r3, [pc, #380]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	4b5b      	ldr	r3, [pc, #364]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	4a5a      	ldr	r2, [pc, #360]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 800370c:	f043 0308 	orr.w	r3, r3, #8
 8003710:	6313      	str	r3, [r2, #48]	; 0x30
 8003712:	4b58      	ldr	r3, [pc, #352]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	61bb      	str	r3, [r7, #24]
 800371c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	4b54      	ldr	r3, [pc, #336]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	4a53      	ldr	r2, [pc, #332]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 8003728:	f043 0310 	orr.w	r3, r3, #16
 800372c:	6313      	str	r3, [r2, #48]	; 0x30
 800372e:	4b51      	ldr	r3, [pc, #324]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	4b4d      	ldr	r3, [pc, #308]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	4a4c      	ldr	r2, [pc, #304]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 8003744:	f043 0320 	orr.w	r3, r3, #32
 8003748:	6313      	str	r3, [r2, #48]	; 0x30
 800374a:	4b4a      	ldr	r3, [pc, #296]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	4b46      	ldr	r3, [pc, #280]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	4a45      	ldr	r2, [pc, #276]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 8003760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003764:	6313      	str	r3, [r2, #48]	; 0x30
 8003766:	4b43      	ldr	r3, [pc, #268]	; (8003874 <BSP_SDRAM_MspInit+0x1f4>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003772:	2302      	movs	r3, #2
 8003774:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003776:	2302      	movs	r3, #2
 8003778:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800377a:	2300      	movs	r3, #0
 800377c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800377e:	230c      	movs	r3, #12
 8003780:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003782:	2360      	movs	r3, #96	; 0x60
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003786:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800378a:	4619      	mov	r1, r3
 800378c:	483a      	ldr	r0, [pc, #232]	; (8003878 <BSP_SDRAM_MspInit+0x1f8>)
 800378e:	f000 ff7d 	bl	800468c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003792:	2301      	movs	r3, #1
 8003794:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800379a:	4619      	mov	r1, r3
 800379c:	4837      	ldr	r0, [pc, #220]	; (800387c <BSP_SDRAM_MspInit+0x1fc>)
 800379e:	f000 ff75 	bl	800468c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80037a2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80037a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80037a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ac:	4619      	mov	r1, r3
 80037ae:	4834      	ldr	r0, [pc, #208]	; (8003880 <BSP_SDRAM_MspInit+0x200>)
 80037b0:	f000 ff6c 	bl	800468c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80037b4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80037b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80037ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037be:	4619      	mov	r1, r3
 80037c0:	4830      	ldr	r0, [pc, #192]	; (8003884 <BSP_SDRAM_MspInit+0x204>)
 80037c2:	f000 ff63 	bl	800468c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80037c6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80037cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037d0:	4619      	mov	r1, r3
 80037d2:	482d      	ldr	r0, [pc, #180]	; (8003888 <BSP_SDRAM_MspInit+0x208>)
 80037d4:	f000 ff5a 	bl	800468c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80037d8:	f248 1333 	movw	r3, #33075	; 0x8133
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80037de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037e2:	4619      	mov	r1, r3
 80037e4:	4829      	ldr	r0, [pc, #164]	; (800388c <BSP_SDRAM_MspInit+0x20c>)
 80037e6:	f000 ff51 	bl	800468c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80037ea:	4b29      	ldr	r3, [pc, #164]	; (8003890 <BSP_SDRAM_MspInit+0x210>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80037f0:	4b27      	ldr	r3, [pc, #156]	; (8003890 <BSP_SDRAM_MspInit+0x210>)
 80037f2:	2280      	movs	r2, #128	; 0x80
 80037f4:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80037f6:	4b26      	ldr	r3, [pc, #152]	; (8003890 <BSP_SDRAM_MspInit+0x210>)
 80037f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037fc:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80037fe:	4b24      	ldr	r3, [pc, #144]	; (8003890 <BSP_SDRAM_MspInit+0x210>)
 8003800:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003804:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003806:	4b22      	ldr	r3, [pc, #136]	; (8003890 <BSP_SDRAM_MspInit+0x210>)
 8003808:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800380c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800380e:	4b20      	ldr	r3, [pc, #128]	; (8003890 <BSP_SDRAM_MspInit+0x210>)
 8003810:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003814:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003816:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <BSP_SDRAM_MspInit+0x210>)
 8003818:	2200      	movs	r2, #0
 800381a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800381c:	4b1c      	ldr	r3, [pc, #112]	; (8003890 <BSP_SDRAM_MspInit+0x210>)
 800381e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003822:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003824:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <BSP_SDRAM_MspInit+0x210>)
 8003826:	2200      	movs	r2, #0
 8003828:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800382a:	4b19      	ldr	r3, [pc, #100]	; (8003890 <BSP_SDRAM_MspInit+0x210>)
 800382c:	2203      	movs	r2, #3
 800382e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003830:	4b17      	ldr	r3, [pc, #92]	; (8003890 <BSP_SDRAM_MspInit+0x210>)
 8003832:	2200      	movs	r2, #0
 8003834:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003836:	4b16      	ldr	r3, [pc, #88]	; (8003890 <BSP_SDRAM_MspInit+0x210>)
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800383c:	4b14      	ldr	r3, [pc, #80]	; (8003890 <BSP_SDRAM_MspInit+0x210>)
 800383e:	4a15      	ldr	r2, [pc, #84]	; (8003894 <BSP_SDRAM_MspInit+0x214>)
 8003840:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a12      	ldr	r2, [pc, #72]	; (8003890 <BSP_SDRAM_MspInit+0x210>)
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
 8003848:	4a11      	ldr	r2, [pc, #68]	; (8003890 <BSP_SDRAM_MspInit+0x210>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800384e:	4810      	ldr	r0, [pc, #64]	; (8003890 <BSP_SDRAM_MspInit+0x210>)
 8003850:	f000 fb80 	bl	8003f54 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003854:	480e      	ldr	r0, [pc, #56]	; (8003890 <BSP_SDRAM_MspInit+0x210>)
 8003856:	f000 facf 	bl	8003df8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800385a:	2200      	movs	r2, #0
 800385c:	210f      	movs	r1, #15
 800385e:	2038      	movs	r0, #56	; 0x38
 8003860:	f000 fa77 	bl	8003d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003864:	2038      	movs	r0, #56	; 0x38
 8003866:	f000 fa90 	bl	8003d8a <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800386a:	bf00      	nop
 800386c:	3740      	adds	r7, #64	; 0x40
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800
 8003878:	40020400 	.word	0x40020400
 800387c:	40020800 	.word	0x40020800
 8003880:	40020c00 	.word	0x40020c00
 8003884:	40021000 	.word	0x40021000
 8003888:	40021400 	.word	0x40021400
 800388c:	40021800 	.word	0x40021800
 8003890:	2000047c 	.word	0x2000047c
 8003894:	40026410 	.word	0x40026410

08003898 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	460a      	mov	r2, r1
 80038a2:	80fb      	strh	r3, [r7, #6]
 80038a4:	4613      	mov	r3, r2
 80038a6:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80038ac:	4a13      	ldr	r2, [pc, #76]	; (80038fc <BSP_TS_Init+0x64>)
 80038ae:	88fb      	ldrh	r3, [r7, #6]
 80038b0:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80038b2:	4a13      	ldr	r2, [pc, #76]	; (8003900 <BSP_TS_Init+0x68>)
 80038b4:	88bb      	ldrh	r3, [r7, #4]
 80038b6:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80038b8:	4b12      	ldr	r3, [pc, #72]	; (8003904 <BSP_TS_Init+0x6c>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2082      	movs	r0, #130	; 0x82
 80038be:	4798      	blx	r3
 80038c0:	4603      	mov	r3, r0
 80038c2:	461a      	mov	r2, r3
 80038c4:	f640 0311 	movw	r3, #2065	; 0x811
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d104      	bne.n	80038d6 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80038cc:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <BSP_TS_Init+0x70>)
 80038ce:	4a0d      	ldr	r2, [pc, #52]	; (8003904 <BSP_TS_Init+0x6c>)
 80038d0:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 80038dc:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <BSP_TS_Init+0x70>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2082      	movs	r0, #130	; 0x82
 80038e4:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 80038e6:	4b08      	ldr	r3, [pc, #32]	; (8003908 <BSP_TS_Init+0x70>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	2082      	movs	r0, #130	; 0x82
 80038ee:	4798      	blx	r3
  }

  return ret;
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	200004e0 	.word	0x200004e0
 8003900:	200004e2 	.word	0x200004e2
 8003904:	20000044 	.word	0x20000044
 8003908:	200004dc 	.word	0x200004dc

0800390c <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8003914:	4b4f      	ldr	r3, [pc, #316]	; (8003a54 <BSP_TS_GetState+0x148>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2082      	movs	r0, #130	; 0x82
 800391c:	4798      	blx	r3
 800391e:	4603      	mov	r3, r0
 8003920:	b29a      	uxth	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 808d 	beq.w	8003a4a <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8003930:	4b48      	ldr	r3, [pc, #288]	; (8003a54 <BSP_TS_GetState+0x148>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f107 020c 	add.w	r2, r7, #12
 800393a:	f107 010e 	add.w	r1, r7, #14
 800393e:	2082      	movs	r0, #130	; 0x82
 8003940:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8003942:	89bb      	ldrh	r3, [r7, #12]
 8003944:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003948:	b29b      	uxth	r3, r3
 800394a:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 800394c:	89bb      	ldrh	r3, [r7, #12]
 800394e:	4a42      	ldr	r2, [pc, #264]	; (8003a58 <BSP_TS_GetState+0x14c>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	08db      	lsrs	r3, r3, #3
 8003956:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8003958:	8abb      	ldrh	r3, [r7, #20]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	82bb      	strh	r3, [r7, #20]
 8003962:	e008      	b.n	8003976 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8003964:	4b3d      	ldr	r3, [pc, #244]	; (8003a5c <BSP_TS_GetState+0x150>)
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	8aba      	ldrh	r2, [r7, #20]
 800396a:	429a      	cmp	r2, r3
 800396c:	d903      	bls.n	8003976 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 800396e:	4b3b      	ldr	r3, [pc, #236]	; (8003a5c <BSP_TS_GetState+0x150>)
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	3b01      	subs	r3, #1
 8003974:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8003976:	8abb      	ldrh	r3, [r7, #20]
 8003978:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 800397a:	89fb      	ldrh	r3, [r7, #14]
 800397c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003980:	4293      	cmp	r3, r2
 8003982:	d806      	bhi.n	8003992 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8003984:	89fb      	ldrh	r3, [r7, #14]
 8003986:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800398a:	330e      	adds	r3, #14
 800398c:	b29b      	uxth	r3, r3
 800398e:	81fb      	strh	r3, [r7, #14]
 8003990:	e005      	b.n	800399e <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8003992:	89fb      	ldrh	r3, [r7, #14]
 8003994:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8003998:	3308      	adds	r3, #8
 800399a:	b29b      	uxth	r3, r3
 800399c:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 800399e:	89fb      	ldrh	r3, [r7, #14]
 80039a0:	4a2f      	ldr	r2, [pc, #188]	; (8003a60 <BSP_TS_GetState+0x154>)
 80039a2:	fba2 2303 	umull	r2, r3, r2, r3
 80039a6:	08db      	lsrs	r3, r3, #3
 80039a8:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 80039aa:	8afb      	ldrh	r3, [r7, #22]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d102      	bne.n	80039b6 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	82fb      	strh	r3, [r7, #22]
 80039b4:	e008      	b.n	80039c8 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 80039b6:	4b2b      	ldr	r3, [pc, #172]	; (8003a64 <BSP_TS_GetState+0x158>)
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	8afa      	ldrh	r2, [r7, #22]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d903      	bls.n	80039c8 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 80039c0:	4b28      	ldr	r3, [pc, #160]	; (8003a64 <BSP_TS_GetState+0x158>)
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 80039c8:	8afb      	ldrh	r3, [r7, #22]
 80039ca:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 80039cc:	89fb      	ldrh	r3, [r7, #14]
 80039ce:	461a      	mov	r2, r3
 80039d0:	4b25      	ldr	r3, [pc, #148]	; (8003a68 <BSP_TS_GetState+0x15c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d906      	bls.n	80039e6 <BSP_TS_GetState+0xda>
 80039d8:	89fa      	ldrh	r2, [r7, #14]
 80039da:	4b23      	ldr	r3, [pc, #140]	; (8003a68 <BSP_TS_GetState+0x15c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	e005      	b.n	80039f2 <BSP_TS_GetState+0xe6>
 80039e6:	4b20      	ldr	r3, [pc, #128]	; (8003a68 <BSP_TS_GetState+0x15c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	89fb      	ldrh	r3, [r7, #14]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 80039f4:	89bb      	ldrh	r3, [r7, #12]
 80039f6:	461a      	mov	r2, r3
 80039f8:	4b1c      	ldr	r3, [pc, #112]	; (8003a6c <BSP_TS_GetState+0x160>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d906      	bls.n	8003a0e <BSP_TS_GetState+0x102>
 8003a00:	89ba      	ldrh	r2, [r7, #12]
 8003a02:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <BSP_TS_GetState+0x160>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	e005      	b.n	8003a1a <BSP_TS_GetState+0x10e>
 8003a0e:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <BSP_TS_GetState+0x160>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	89bb      	ldrh	r3, [r7, #12]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8003a1c:	8a7a      	ldrh	r2, [r7, #18]
 8003a1e:	8a3b      	ldrh	r3, [r7, #16]
 8003a20:	4413      	add	r3, r2
 8003a22:	2b05      	cmp	r3, #5
 8003a24:	dd07      	ble.n	8003a36 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8003a26:	89fb      	ldrh	r3, [r7, #14]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <BSP_TS_GetState+0x15c>)
 8003a2c:	601a      	str	r2, [r3, #0]
      _y = y; 
 8003a2e:	89bb      	ldrh	r3, [r7, #12]
 8003a30:	461a      	mov	r2, r3
 8003a32:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <BSP_TS_GetState+0x160>)
 8003a34:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8003a36:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <BSP_TS_GetState+0x15c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8003a40:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <BSP_TS_GetState+0x160>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	809a      	strh	r2, [r3, #4]
  }
}
 8003a4a:	bf00      	nop
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	200004dc 	.word	0x200004dc
 8003a58:	ba2e8ba3 	.word	0xba2e8ba3
 8003a5c:	200004e2 	.word	0x200004e2
 8003a60:	88888889 	.word	0x88888889
 8003a64:	200004e0 	.word	0x200004e0
 8003a68:	200004e4 	.word	0x200004e4
 8003a6c:	200004e8 	.word	0x200004e8

08003a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a74:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <HAL_Init+0x40>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a0d      	ldr	r2, [pc, #52]	; (8003ab0 <HAL_Init+0x40>)
 8003a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_Init+0x40>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a0a      	ldr	r2, [pc, #40]	; (8003ab0 <HAL_Init+0x40>)
 8003a86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a8c:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <HAL_Init+0x40>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a07      	ldr	r2, [pc, #28]	; (8003ab0 <HAL_Init+0x40>)
 8003a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a98:	2003      	movs	r0, #3
 8003a9a:	f000 f94f 	bl	8003d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a9e:	200f      	movs	r0, #15
 8003aa0:	f000 f808 	bl	8003ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003aa4:	f7fd fd42 	bl	800152c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40023c00 	.word	0x40023c00

08003ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003abc:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_InitTick+0x54>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <HAL_InitTick+0x58>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 f967 	bl	8003da6 <HAL_SYSTICK_Config>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e00e      	b.n	8003b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b0f      	cmp	r3, #15
 8003ae6:	d80a      	bhi.n	8003afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	f000 f92f 	bl	8003d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003af4:	4a06      	ldr	r2, [pc, #24]	; (8003b10 <HAL_InitTick+0x5c>)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	e000      	b.n	8003b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20000008 	.word	0x20000008
 8003b0c:	2000008c 	.word	0x2000008c
 8003b10:	20000088 	.word	0x20000088

08003b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_IncTick+0x20>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_IncTick+0x24>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4413      	add	r3, r2
 8003b24:	4a04      	ldr	r2, [pc, #16]	; (8003b38 <HAL_IncTick+0x24>)
 8003b26:	6013      	str	r3, [r2, #0]
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	2000008c 	.word	0x2000008c
 8003b38:	200006f0 	.word	0x200006f0

08003b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b40:	4b03      	ldr	r3, [pc, #12]	; (8003b50 <HAL_GetTick+0x14>)
 8003b42:	681b      	ldr	r3, [r3, #0]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	200006f0 	.word	0x200006f0

08003b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b5c:	f7ff ffee 	bl	8003b3c <HAL_GetTick>
 8003b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6c:	d005      	beq.n	8003b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <HAL_Delay+0x44>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4413      	add	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b7a:	bf00      	nop
 8003b7c:	f7ff ffde 	bl	8003b3c <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d8f7      	bhi.n	8003b7c <HAL_Delay+0x28>
  {
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	bf00      	nop
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	2000008c 	.word	0x2000008c

08003b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bb8:	4013      	ands	r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bce:	4a04      	ldr	r2, [pc, #16]	; (8003be0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	60d3      	str	r3, [r2, #12]
}
 8003bd4:	bf00      	nop
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	e000ed00 	.word	0xe000ed00

08003be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be8:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <__NVIC_GetPriorityGrouping+0x18>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	f003 0307 	and.w	r3, r3, #7
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	e000ed00 	.word	0xe000ed00

08003c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	db0b      	blt.n	8003c2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	f003 021f 	and.w	r2, r3, #31
 8003c18:	4907      	ldr	r1, [pc, #28]	; (8003c38 <__NVIC_EnableIRQ+0x38>)
 8003c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	2001      	movs	r0, #1
 8003c22:	fa00 f202 	lsl.w	r2, r0, r2
 8003c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	e000e100 	.word	0xe000e100

08003c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	6039      	str	r1, [r7, #0]
 8003c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	db0a      	blt.n	8003c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	490c      	ldr	r1, [pc, #48]	; (8003c88 <__NVIC_SetPriority+0x4c>)
 8003c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5a:	0112      	lsls	r2, r2, #4
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	440b      	add	r3, r1
 8003c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c64:	e00a      	b.n	8003c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	4908      	ldr	r1, [pc, #32]	; (8003c8c <__NVIC_SetPriority+0x50>)
 8003c6c:	79fb      	ldrb	r3, [r7, #7]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	3b04      	subs	r3, #4
 8003c74:	0112      	lsls	r2, r2, #4
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	440b      	add	r3, r1
 8003c7a:	761a      	strb	r2, [r3, #24]
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	e000e100 	.word	0xe000e100
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b089      	sub	sp, #36	; 0x24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f1c3 0307 	rsb	r3, r3, #7
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	bf28      	it	cs
 8003cae:	2304      	movcs	r3, #4
 8003cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	2b06      	cmp	r3, #6
 8003cb8:	d902      	bls.n	8003cc0 <NVIC_EncodePriority+0x30>
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3b03      	subs	r3, #3
 8003cbe:	e000      	b.n	8003cc2 <NVIC_EncodePriority+0x32>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43da      	mvns	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	401a      	ands	r2, r3
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce2:	43d9      	mvns	r1, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce8:	4313      	orrs	r3, r2
         );
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3724      	adds	r7, #36	; 0x24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d08:	d301      	bcc.n	8003d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e00f      	b.n	8003d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d0e:	4a0a      	ldr	r2, [pc, #40]	; (8003d38 <SysTick_Config+0x40>)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d16:	210f      	movs	r1, #15
 8003d18:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1c:	f7ff ff8e 	bl	8003c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <SysTick_Config+0x40>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d26:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <SysTick_Config+0x40>)
 8003d28:	2207      	movs	r2, #7
 8003d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	e000e010 	.word	0xe000e010

08003d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff ff29 	bl	8003b9c <__NVIC_SetPriorityGrouping>
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b086      	sub	sp, #24
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	4603      	mov	r3, r0
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d64:	f7ff ff3e 	bl	8003be4 <__NVIC_GetPriorityGrouping>
 8003d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	6978      	ldr	r0, [r7, #20]
 8003d70:	f7ff ff8e 	bl	8003c90 <NVIC_EncodePriority>
 8003d74:	4602      	mov	r2, r0
 8003d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff ff5d 	bl	8003c3c <__NVIC_SetPriority>
}
 8003d82:	bf00      	nop
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	4603      	mov	r3, r0
 8003d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff ff31 	bl	8003c00 <__NVIC_EnableIRQ>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff ffa2 	bl	8003cf8 <SysTick_Config>
 8003db4:	4603      	mov	r3, r0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b082      	sub	sp, #8
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e00e      	b.n	8003dee <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	795b      	ldrb	r3, [r3, #5]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d105      	bne.n	8003de6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7fc fbe5 	bl	80005b0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
	...

08003df8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e04:	f7ff fe9a 	bl	8003b3c <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e099      	b.n	8003f48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0201 	bic.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e34:	e00f      	b.n	8003e56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e36:	f7ff fe81 	bl	8003b3c <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b05      	cmp	r3, #5
 8003e42:	d908      	bls.n	8003e56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e078      	b.n	8003f48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e8      	bne.n	8003e36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	4b38      	ldr	r3, [pc, #224]	; (8003f50 <HAL_DMA_Init+0x158>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d107      	bne.n	8003ec0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f023 0307 	bic.w	r3, r3, #7
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d117      	bne.n	8003f1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00e      	beq.n	8003f1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f8bd 	bl	800407c <DMA_CheckFifoParam>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2240      	movs	r2, #64	; 0x40
 8003f0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f16:	2301      	movs	r3, #1
 8003f18:	e016      	b.n	8003f48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f874 	bl	8004010 <DMA_CalcBaseAndBitshift>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f30:	223f      	movs	r2, #63	; 0x3f
 8003f32:	409a      	lsls	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	f010803f 	.word	0xf010803f

08003f54 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e050      	b.n	8004008 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d101      	bne.n	8003f76 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003f72:	2302      	movs	r3, #2
 8003f74:	e048      	b.n	8004008 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0201 	bic.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2200      	movs	r2, #0
 8003f94:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2200      	movs	r2, #0
 8003fac:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2221      	movs	r2, #33	; 0x21
 8003fb4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f82a 	bl	8004010 <DMA_CalcBaseAndBitshift>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe8:	223f      	movs	r2, #63	; 0x3f
 8003fea:	409a      	lsls	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	3b10      	subs	r3, #16
 8004020:	4a14      	ldr	r2, [pc, #80]	; (8004074 <DMA_CalcBaseAndBitshift+0x64>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	091b      	lsrs	r3, r3, #4
 8004028:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800402a:	4a13      	ldr	r2, [pc, #76]	; (8004078 <DMA_CalcBaseAndBitshift+0x68>)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b03      	cmp	r3, #3
 800403c:	d909      	bls.n	8004052 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004046:	f023 0303 	bic.w	r3, r3, #3
 800404a:	1d1a      	adds	r2, r3, #4
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	659a      	str	r2, [r3, #88]	; 0x58
 8004050:	e007      	b.n	8004062 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800405a:	f023 0303 	bic.w	r3, r3, #3
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	aaaaaaab 	.word	0xaaaaaaab
 8004078:	0800bee4 	.word	0x0800bee4

0800407c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d11f      	bne.n	80040d6 <DMA_CheckFifoParam+0x5a>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b03      	cmp	r3, #3
 800409a:	d856      	bhi.n	800414a <DMA_CheckFifoParam+0xce>
 800409c:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <DMA_CheckFifoParam+0x28>)
 800409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a2:	bf00      	nop
 80040a4:	080040b5 	.word	0x080040b5
 80040a8:	080040c7 	.word	0x080040c7
 80040ac:	080040b5 	.word	0x080040b5
 80040b0:	0800414b 	.word	0x0800414b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d046      	beq.n	800414e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040c4:	e043      	b.n	800414e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040ce:	d140      	bne.n	8004152 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d4:	e03d      	b.n	8004152 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040de:	d121      	bne.n	8004124 <DMA_CheckFifoParam+0xa8>
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d837      	bhi.n	8004156 <DMA_CheckFifoParam+0xda>
 80040e6:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <DMA_CheckFifoParam+0x70>)
 80040e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ec:	080040fd 	.word	0x080040fd
 80040f0:	08004103 	.word	0x08004103
 80040f4:	080040fd 	.word	0x080040fd
 80040f8:	08004115 	.word	0x08004115
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004100:	e030      	b.n	8004164 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d025      	beq.n	800415a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004112:	e022      	b.n	800415a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800411c:	d11f      	bne.n	800415e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004122:	e01c      	b.n	800415e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d903      	bls.n	8004132 <DMA_CheckFifoParam+0xb6>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b03      	cmp	r3, #3
 800412e:	d003      	beq.n	8004138 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004130:	e018      	b.n	8004164 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	73fb      	strb	r3, [r7, #15]
      break;
 8004136:	e015      	b.n	8004164 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00e      	beq.n	8004162 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
      break;
 8004148:	e00b      	b.n	8004162 <DMA_CheckFifoParam+0xe6>
      break;
 800414a:	bf00      	nop
 800414c:	e00a      	b.n	8004164 <DMA_CheckFifoParam+0xe8>
      break;
 800414e:	bf00      	nop
 8004150:	e008      	b.n	8004164 <DMA_CheckFifoParam+0xe8>
      break;
 8004152:	bf00      	nop
 8004154:	e006      	b.n	8004164 <DMA_CheckFifoParam+0xe8>
      break;
 8004156:	bf00      	nop
 8004158:	e004      	b.n	8004164 <DMA_CheckFifoParam+0xe8>
      break;
 800415a:	bf00      	nop
 800415c:	e002      	b.n	8004164 <DMA_CheckFifoParam+0xe8>
      break;   
 800415e:	bf00      	nop
 8004160:	e000      	b.n	8004164 <DMA_CheckFifoParam+0xe8>
      break;
 8004162:	bf00      	nop
    }
  } 
  
  return status; 
 8004164:	7bfb      	ldrb	r3, [r7, #15]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop

08004174 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e03b      	b.n	80041fe <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fc fa5c 	bl	8000658 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c4:	f023 0107 	bic.w	r1, r3, #7
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80041de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	68d1      	ldr	r1, [r2, #12]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	430b      	orrs	r3, r1
 80041ec:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b086      	sub	sp, #24
 800420a:	af02      	add	r7, sp, #8
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
 8004212:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_DMA2D_Start+0x1c>
 800421e:	2302      	movs	r3, #2
 8004220:	e018      	b.n	8004254 <HAL_DMA2D_Start+0x4e>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2202      	movs	r2, #2
 800422e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f989 	bl	8004554 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0201 	orr.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d056      	beq.n	8004326 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004278:	f7ff fc60 	bl	8003b3c <HAL_GetTick>
 800427c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800427e:	e04b      	b.n	8004318 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800428e:	2b00      	cmp	r3, #0
 8004290:	d023      	beq.n	80042da <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a0:	f043 0202 	orr.w	r2, r3, #2
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b6:	f043 0201 	orr.w	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2221      	movs	r2, #33	; 0x21
 80042c4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2204      	movs	r2, #4
 80042ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e0a5      	b.n	8004426 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e0:	d01a      	beq.n	8004318 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042e2:	f7ff fc2b 	bl	8003b3c <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d302      	bcc.n	80042f8 <HAL_DMA2D_PollForTransfer+0x9c>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10f      	bne.n	8004318 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fc:	f043 0220 	orr.w	r2, r3, #32
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2203      	movs	r2, #3
 8004308:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e086      	b.n	8004426 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0ac      	beq.n	8004280 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d061      	beq.n	800440c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004348:	f7ff fbf8 	bl	8003b3c <HAL_GetTick>
 800434c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800434e:	e056      	b.n	80043fe <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800435e:	2b00      	cmp	r3, #0
 8004360:	d02e      	beq.n	80043c0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004370:	f043 0204 	orr.w	r2, r3, #4
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004386:	f043 0202 	orr.w	r2, r3, #2
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439c:	f043 0201 	orr.w	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2229      	movs	r2, #41	; 0x29
 80043aa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2204      	movs	r2, #4
 80043b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e032      	b.n	8004426 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c6:	d01a      	beq.n	80043fe <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043c8:	f7ff fbb8 	bl	8003b3c <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d302      	bcc.n	80043de <HAL_DMA2D_PollForTransfer+0x182>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10f      	bne.n	80043fe <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e2:	f043 0220 	orr.w	r2, r3, #32
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2203      	movs	r2, #3
 80043ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e013      	b.n	8004426 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0a1      	beq.n	8004350 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2212      	movs	r2, #18
 8004412:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_DMA2D_ConfigLayer+0x20>
 800444c:	2302      	movs	r3, #2
 800444e:	e079      	b.n	8004544 <HAL_DMA2D_ConfigLayer+0x114>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	3318      	adds	r3, #24
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	4413      	add	r3, r2
 800446a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	041b      	lsls	r3, r3, #16
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800447a:	4b35      	ldr	r3, [pc, #212]	; (8004550 <HAL_DMA2D_ConfigLayer+0x120>)
 800447c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b0a      	cmp	r3, #10
 8004484:	d003      	beq.n	800448e <HAL_DMA2D_ConfigLayer+0x5e>
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b09      	cmp	r3, #9
 800448c:	d107      	bne.n	800449e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	e005      	b.n	80044aa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	061b      	lsls	r3, r3, #24
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d120      	bne.n	80044f2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	43db      	mvns	r3, r3
 80044ba:	ea02 0103 	and.w	r1, r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b0a      	cmp	r3, #10
 80044d8:	d003      	beq.n	80044e2 <HAL_DMA2D_ConfigLayer+0xb2>
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b09      	cmp	r3, #9
 80044e0:	d127      	bne.n	8004532 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28
 80044f0:	e01f      	b.n	8004532 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	43db      	mvns	r3, r3
 80044fc:	ea02 0103 	and.w	r1, r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	430a      	orrs	r2, r1
 8004508:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b0a      	cmp	r3, #10
 800451a:	d003      	beq.n	8004524 <HAL_DMA2D_ConfigLayer+0xf4>
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b09      	cmp	r3, #9
 8004522:	d106      	bne.n	8004532 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004530:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	371c      	adds	r7, #28
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	ff03000f 	.word	0xff03000f

08004554 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004554:	b480      	push	{r7}
 8004556:	b08b      	sub	sp, #44	; 0x2c
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004568:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	041a      	lsls	r2, r3, #16
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	431a      	orrs	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800458c:	d174      	bne.n	8004678 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004594:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800459c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80045a4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d108      	bne.n	80045c6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	431a      	orrs	r2, r3
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	4313      	orrs	r3, r2
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	627b      	str	r3, [r7, #36]	; 0x24
 80045c4:	e053      	b.n	800466e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d106      	bne.n	80045dc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
 80045da:	e048      	b.n	800466e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d111      	bne.n	8004608 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	0cdb      	lsrs	r3, r3, #19
 80045e8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	0a9b      	lsrs	r3, r3, #10
 80045ee:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	08db      	lsrs	r3, r3, #3
 80045f4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	02db      	lsls	r3, r3, #11
 80045fe:	4313      	orrs	r3, r2
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
 8004606:	e032      	b.n	800466e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b03      	cmp	r3, #3
 800460e:	d117      	bne.n	8004640 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	0fdb      	lsrs	r3, r3, #31
 8004614:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	0cdb      	lsrs	r3, r3, #19
 800461a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	0adb      	lsrs	r3, r3, #11
 8004620:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	08db      	lsrs	r3, r3, #3
 8004626:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	029b      	lsls	r3, r3, #10
 8004630:	431a      	orrs	r2, r3
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	03db      	lsls	r3, r3, #15
 8004636:	4313      	orrs	r3, r2
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
 800463e:	e016      	b.n	800466e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	0f1b      	lsrs	r3, r3, #28
 8004644:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	0d1b      	lsrs	r3, r3, #20
 800464a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	0b1b      	lsrs	r3, r3, #12
 8004650:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	091b      	lsrs	r3, r3, #4
 8004656:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	011a      	lsls	r2, r3, #4
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	021b      	lsls	r3, r3, #8
 8004660:	431a      	orrs	r2, r3
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	031b      	lsls	r3, r3, #12
 8004666:	4313      	orrs	r3, r2
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004674:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004676:	e003      	b.n	8004680 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	60da      	str	r2, [r3, #12]
}
 8004680:	bf00      	nop
 8004682:	372c      	adds	r7, #44	; 0x2c
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800468c:	b480      	push	{r7}
 800468e:	b089      	sub	sp, #36	; 0x24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800469a:	2300      	movs	r3, #0
 800469c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800469e:	2300      	movs	r3, #0
 80046a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	e177      	b.n	8004998 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046a8:	2201      	movs	r2, #1
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4013      	ands	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	f040 8166 	bne.w	8004992 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d005      	beq.n	80046de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d130      	bne.n	8004740 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	2203      	movs	r2, #3
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	43db      	mvns	r3, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4013      	ands	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4313      	orrs	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004714:	2201      	movs	r2, #1
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	43db      	mvns	r3, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4013      	ands	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	091b      	lsrs	r3, r3, #4
 800472a:	f003 0201 	and.w	r2, r3, #1
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4313      	orrs	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	2b03      	cmp	r3, #3
 800474a:	d017      	beq.n	800477c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	2203      	movs	r2, #3
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43db      	mvns	r3, r3
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4013      	ands	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4313      	orrs	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d123      	bne.n	80047d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	08da      	lsrs	r2, r3, #3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3208      	adds	r2, #8
 8004790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004794:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	220f      	movs	r2, #15
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	43db      	mvns	r3, r3
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4013      	ands	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4313      	orrs	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	08da      	lsrs	r2, r3, #3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3208      	adds	r2, #8
 80047ca:	69b9      	ldr	r1, [r7, #24]
 80047cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	2203      	movs	r2, #3
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4013      	ands	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 0203 	and.w	r2, r3, #3
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80c0 	beq.w	8004992 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	4b66      	ldr	r3, [pc, #408]	; (80049b0 <HAL_GPIO_Init+0x324>)
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	4a65      	ldr	r2, [pc, #404]	; (80049b0 <HAL_GPIO_Init+0x324>)
 800481c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004820:	6453      	str	r3, [r2, #68]	; 0x44
 8004822:	4b63      	ldr	r3, [pc, #396]	; (80049b0 <HAL_GPIO_Init+0x324>)
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800482e:	4a61      	ldr	r2, [pc, #388]	; (80049b4 <HAL_GPIO_Init+0x328>)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	089b      	lsrs	r3, r3, #2
 8004834:	3302      	adds	r3, #2
 8004836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	220f      	movs	r2, #15
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4013      	ands	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a58      	ldr	r2, [pc, #352]	; (80049b8 <HAL_GPIO_Init+0x32c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d037      	beq.n	80048ca <HAL_GPIO_Init+0x23e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a57      	ldr	r2, [pc, #348]	; (80049bc <HAL_GPIO_Init+0x330>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d031      	beq.n	80048c6 <HAL_GPIO_Init+0x23a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a56      	ldr	r2, [pc, #344]	; (80049c0 <HAL_GPIO_Init+0x334>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d02b      	beq.n	80048c2 <HAL_GPIO_Init+0x236>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a55      	ldr	r2, [pc, #340]	; (80049c4 <HAL_GPIO_Init+0x338>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d025      	beq.n	80048be <HAL_GPIO_Init+0x232>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a54      	ldr	r2, [pc, #336]	; (80049c8 <HAL_GPIO_Init+0x33c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d01f      	beq.n	80048ba <HAL_GPIO_Init+0x22e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a53      	ldr	r2, [pc, #332]	; (80049cc <HAL_GPIO_Init+0x340>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d019      	beq.n	80048b6 <HAL_GPIO_Init+0x22a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a52      	ldr	r2, [pc, #328]	; (80049d0 <HAL_GPIO_Init+0x344>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d013      	beq.n	80048b2 <HAL_GPIO_Init+0x226>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a51      	ldr	r2, [pc, #324]	; (80049d4 <HAL_GPIO_Init+0x348>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00d      	beq.n	80048ae <HAL_GPIO_Init+0x222>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a50      	ldr	r2, [pc, #320]	; (80049d8 <HAL_GPIO_Init+0x34c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d007      	beq.n	80048aa <HAL_GPIO_Init+0x21e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a4f      	ldr	r2, [pc, #316]	; (80049dc <HAL_GPIO_Init+0x350>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d101      	bne.n	80048a6 <HAL_GPIO_Init+0x21a>
 80048a2:	2309      	movs	r3, #9
 80048a4:	e012      	b.n	80048cc <HAL_GPIO_Init+0x240>
 80048a6:	230a      	movs	r3, #10
 80048a8:	e010      	b.n	80048cc <HAL_GPIO_Init+0x240>
 80048aa:	2308      	movs	r3, #8
 80048ac:	e00e      	b.n	80048cc <HAL_GPIO_Init+0x240>
 80048ae:	2307      	movs	r3, #7
 80048b0:	e00c      	b.n	80048cc <HAL_GPIO_Init+0x240>
 80048b2:	2306      	movs	r3, #6
 80048b4:	e00a      	b.n	80048cc <HAL_GPIO_Init+0x240>
 80048b6:	2305      	movs	r3, #5
 80048b8:	e008      	b.n	80048cc <HAL_GPIO_Init+0x240>
 80048ba:	2304      	movs	r3, #4
 80048bc:	e006      	b.n	80048cc <HAL_GPIO_Init+0x240>
 80048be:	2303      	movs	r3, #3
 80048c0:	e004      	b.n	80048cc <HAL_GPIO_Init+0x240>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e002      	b.n	80048cc <HAL_GPIO_Init+0x240>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <HAL_GPIO_Init+0x240>
 80048ca:	2300      	movs	r3, #0
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	f002 0203 	and.w	r2, r2, #3
 80048d2:	0092      	lsls	r2, r2, #2
 80048d4:	4093      	lsls	r3, r2
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4313      	orrs	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048dc:	4935      	ldr	r1, [pc, #212]	; (80049b4 <HAL_GPIO_Init+0x328>)
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	089b      	lsrs	r3, r3, #2
 80048e2:	3302      	adds	r3, #2
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048ea:	4b3d      	ldr	r3, [pc, #244]	; (80049e0 <HAL_GPIO_Init+0x354>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	43db      	mvns	r3, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	4013      	ands	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800490e:	4a34      	ldr	r2, [pc, #208]	; (80049e0 <HAL_GPIO_Init+0x354>)
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004914:	4b32      	ldr	r3, [pc, #200]	; (80049e0 <HAL_GPIO_Init+0x354>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	43db      	mvns	r3, r3
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4013      	ands	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004938:	4a29      	ldr	r2, [pc, #164]	; (80049e0 <HAL_GPIO_Init+0x354>)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800493e:	4b28      	ldr	r3, [pc, #160]	; (80049e0 <HAL_GPIO_Init+0x354>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	43db      	mvns	r3, r3
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	4013      	ands	r3, r2
 800494c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004962:	4a1f      	ldr	r2, [pc, #124]	; (80049e0 <HAL_GPIO_Init+0x354>)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004968:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <HAL_GPIO_Init+0x354>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	43db      	mvns	r3, r3
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4013      	ands	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800498c:	4a14      	ldr	r2, [pc, #80]	; (80049e0 <HAL_GPIO_Init+0x354>)
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	3301      	adds	r3, #1
 8004996:	61fb      	str	r3, [r7, #28]
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	2b0f      	cmp	r3, #15
 800499c:	f67f ae84 	bls.w	80046a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049a0:	bf00      	nop
 80049a2:	bf00      	nop
 80049a4:	3724      	adds	r7, #36	; 0x24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40023800 	.word	0x40023800
 80049b4:	40013800 	.word	0x40013800
 80049b8:	40020000 	.word	0x40020000
 80049bc:	40020400 	.word	0x40020400
 80049c0:	40020800 	.word	0x40020800
 80049c4:	40020c00 	.word	0x40020c00
 80049c8:	40021000 	.word	0x40021000
 80049cc:	40021400 	.word	0x40021400
 80049d0:	40021800 	.word	0x40021800
 80049d4:	40021c00 	.word	0x40021c00
 80049d8:	40022000 	.word	0x40022000
 80049dc:	40022400 	.word	0x40022400
 80049e0:	40013c00 	.word	0x40013c00

080049e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
 80049fe:	e0d9      	b.n	8004bb4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a00:	2201      	movs	r2, #1
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	f040 80c9 	bne.w	8004bae <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004a1c:	4a6b      	ldr	r2, [pc, #428]	; (8004bcc <HAL_GPIO_DeInit+0x1e8>)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	089b      	lsrs	r3, r3, #2
 8004a22:	3302      	adds	r3, #2
 8004a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a28:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	220f      	movs	r2, #15
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a63      	ldr	r2, [pc, #396]	; (8004bd0 <HAL_GPIO_DeInit+0x1ec>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d037      	beq.n	8004ab6 <HAL_GPIO_DeInit+0xd2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a62      	ldr	r2, [pc, #392]	; (8004bd4 <HAL_GPIO_DeInit+0x1f0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d031      	beq.n	8004ab2 <HAL_GPIO_DeInit+0xce>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a61      	ldr	r2, [pc, #388]	; (8004bd8 <HAL_GPIO_DeInit+0x1f4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d02b      	beq.n	8004aae <HAL_GPIO_DeInit+0xca>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a60      	ldr	r2, [pc, #384]	; (8004bdc <HAL_GPIO_DeInit+0x1f8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d025      	beq.n	8004aaa <HAL_GPIO_DeInit+0xc6>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a5f      	ldr	r2, [pc, #380]	; (8004be0 <HAL_GPIO_DeInit+0x1fc>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d01f      	beq.n	8004aa6 <HAL_GPIO_DeInit+0xc2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a5e      	ldr	r2, [pc, #376]	; (8004be4 <HAL_GPIO_DeInit+0x200>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d019      	beq.n	8004aa2 <HAL_GPIO_DeInit+0xbe>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a5d      	ldr	r2, [pc, #372]	; (8004be8 <HAL_GPIO_DeInit+0x204>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d013      	beq.n	8004a9e <HAL_GPIO_DeInit+0xba>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a5c      	ldr	r2, [pc, #368]	; (8004bec <HAL_GPIO_DeInit+0x208>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00d      	beq.n	8004a9a <HAL_GPIO_DeInit+0xb6>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a5b      	ldr	r2, [pc, #364]	; (8004bf0 <HAL_GPIO_DeInit+0x20c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d007      	beq.n	8004a96 <HAL_GPIO_DeInit+0xb2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a5a      	ldr	r2, [pc, #360]	; (8004bf4 <HAL_GPIO_DeInit+0x210>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d101      	bne.n	8004a92 <HAL_GPIO_DeInit+0xae>
 8004a8e:	2309      	movs	r3, #9
 8004a90:	e012      	b.n	8004ab8 <HAL_GPIO_DeInit+0xd4>
 8004a92:	230a      	movs	r3, #10
 8004a94:	e010      	b.n	8004ab8 <HAL_GPIO_DeInit+0xd4>
 8004a96:	2308      	movs	r3, #8
 8004a98:	e00e      	b.n	8004ab8 <HAL_GPIO_DeInit+0xd4>
 8004a9a:	2307      	movs	r3, #7
 8004a9c:	e00c      	b.n	8004ab8 <HAL_GPIO_DeInit+0xd4>
 8004a9e:	2306      	movs	r3, #6
 8004aa0:	e00a      	b.n	8004ab8 <HAL_GPIO_DeInit+0xd4>
 8004aa2:	2305      	movs	r3, #5
 8004aa4:	e008      	b.n	8004ab8 <HAL_GPIO_DeInit+0xd4>
 8004aa6:	2304      	movs	r3, #4
 8004aa8:	e006      	b.n	8004ab8 <HAL_GPIO_DeInit+0xd4>
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e004      	b.n	8004ab8 <HAL_GPIO_DeInit+0xd4>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e002      	b.n	8004ab8 <HAL_GPIO_DeInit+0xd4>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <HAL_GPIO_DeInit+0xd4>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	f002 0203 	and.w	r2, r2, #3
 8004abe:	0092      	lsls	r2, r2, #2
 8004ac0:	4093      	lsls	r3, r2
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d132      	bne.n	8004b2e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004ac8:	4b4b      	ldr	r3, [pc, #300]	; (8004bf8 <HAL_GPIO_DeInit+0x214>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	43db      	mvns	r3, r3
 8004ad0:	4949      	ldr	r1, [pc, #292]	; (8004bf8 <HAL_GPIO_DeInit+0x214>)
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004ad6:	4b48      	ldr	r3, [pc, #288]	; (8004bf8 <HAL_GPIO_DeInit+0x214>)
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	43db      	mvns	r3, r3
 8004ade:	4946      	ldr	r1, [pc, #280]	; (8004bf8 <HAL_GPIO_DeInit+0x214>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004ae4:	4b44      	ldr	r3, [pc, #272]	; (8004bf8 <HAL_GPIO_DeInit+0x214>)
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	43db      	mvns	r3, r3
 8004aec:	4942      	ldr	r1, [pc, #264]	; (8004bf8 <HAL_GPIO_DeInit+0x214>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004af2:	4b41      	ldr	r3, [pc, #260]	; (8004bf8 <HAL_GPIO_DeInit+0x214>)
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	43db      	mvns	r3, r3
 8004afa:	493f      	ldr	r1, [pc, #252]	; (8004bf8 <HAL_GPIO_DeInit+0x214>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	220f      	movs	r2, #15
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004b10:	4a2e      	ldr	r2, [pc, #184]	; (8004bcc <HAL_GPIO_DeInit+0x1e8>)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	089b      	lsrs	r3, r3, #2
 8004b16:	3302      	adds	r3, #2
 8004b18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	43da      	mvns	r2, r3
 8004b20:	482a      	ldr	r0, [pc, #168]	; (8004bcc <HAL_GPIO_DeInit+0x1e8>)
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	089b      	lsrs	r3, r3, #2
 8004b26:	400a      	ands	r2, r1
 8004b28:	3302      	adds	r3, #2
 8004b2a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	2103      	movs	r1, #3
 8004b38:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	401a      	ands	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	08da      	lsrs	r2, r3, #3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3208      	adds	r2, #8
 8004b4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	220f      	movs	r2, #15
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	08d2      	lsrs	r2, r2, #3
 8004b64:	4019      	ands	r1, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3208      	adds	r2, #8
 8004b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	2103      	movs	r1, #3
 8004b78:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	401a      	ands	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	2101      	movs	r1, #1
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b90:	43db      	mvns	r3, r3
 8004b92:	401a      	ands	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	2103      	movs	r1, #3
 8004ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	401a      	ands	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2b0f      	cmp	r3, #15
 8004bb8:	f67f af22 	bls.w	8004a00 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004bbc:	bf00      	nop
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40013800 	.word	0x40013800
 8004bd0:	40020000 	.word	0x40020000
 8004bd4:	40020400 	.word	0x40020400
 8004bd8:	40020800 	.word	0x40020800
 8004bdc:	40020c00 	.word	0x40020c00
 8004be0:	40021000 	.word	0x40021000
 8004be4:	40021400 	.word	0x40021400
 8004be8:	40021800 	.word	0x40021800
 8004bec:	40021c00 	.word	0x40021c00
 8004bf0:	40022000 	.word	0x40022000
 8004bf4:	40022400 	.word	0x40022400
 8004bf8:	40013c00 	.word	0x40013c00

08004bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	807b      	strh	r3, [r7, #2]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c0c:	787b      	ldrb	r3, [r7, #1]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c12:	887a      	ldrh	r2, [r7, #2]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c18:	e003      	b.n	8004c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c1a:	887b      	ldrh	r3, [r7, #2]
 8004c1c:	041a      	lsls	r2, r3, #16
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	619a      	str	r2, [r3, #24]
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
	...

08004c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e12b      	b.n	8004e9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fb fe54 	bl	8000904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2224      	movs	r2, #36	; 0x24
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0201 	bic.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c94:	f001 fee6 	bl	8006a64 <HAL_RCC_GetPCLK1Freq>
 8004c98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4a81      	ldr	r2, [pc, #516]	; (8004ea4 <HAL_I2C_Init+0x274>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d807      	bhi.n	8004cb4 <HAL_I2C_Init+0x84>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4a80      	ldr	r2, [pc, #512]	; (8004ea8 <HAL_I2C_Init+0x278>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	bf94      	ite	ls
 8004cac:	2301      	movls	r3, #1
 8004cae:	2300      	movhi	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	e006      	b.n	8004cc2 <HAL_I2C_Init+0x92>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4a7d      	ldr	r2, [pc, #500]	; (8004eac <HAL_I2C_Init+0x27c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	bf94      	ite	ls
 8004cbc:	2301      	movls	r3, #1
 8004cbe:	2300      	movhi	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e0e7      	b.n	8004e9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4a78      	ldr	r2, [pc, #480]	; (8004eb0 <HAL_I2C_Init+0x280>)
 8004cce:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd2:	0c9b      	lsrs	r3, r3, #18
 8004cd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	4a6a      	ldr	r2, [pc, #424]	; (8004ea4 <HAL_I2C_Init+0x274>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d802      	bhi.n	8004d04 <HAL_I2C_Init+0xd4>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	3301      	adds	r3, #1
 8004d02:	e009      	b.n	8004d18 <HAL_I2C_Init+0xe8>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d0a:	fb02 f303 	mul.w	r3, r2, r3
 8004d0e:	4a69      	ldr	r2, [pc, #420]	; (8004eb4 <HAL_I2C_Init+0x284>)
 8004d10:	fba2 2303 	umull	r2, r3, r2, r3
 8004d14:	099b      	lsrs	r3, r3, #6
 8004d16:	3301      	adds	r3, #1
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6812      	ldr	r2, [r2, #0]
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	495c      	ldr	r1, [pc, #368]	; (8004ea4 <HAL_I2C_Init+0x274>)
 8004d34:	428b      	cmp	r3, r1
 8004d36:	d819      	bhi.n	8004d6c <HAL_I2C_Init+0x13c>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	1e59      	subs	r1, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d46:	1c59      	adds	r1, r3, #1
 8004d48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d4c:	400b      	ands	r3, r1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_I2C_Init+0x138>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	1e59      	subs	r1, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d60:	3301      	adds	r3, #1
 8004d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d66:	e051      	b.n	8004e0c <HAL_I2C_Init+0x1dc>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	e04f      	b.n	8004e0c <HAL_I2C_Init+0x1dc>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d111      	bne.n	8004d98 <HAL_I2C_Init+0x168>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	1e58      	subs	r0, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6859      	ldr	r1, [r3, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	440b      	add	r3, r1
 8004d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d86:	3301      	adds	r3, #1
 8004d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	bf0c      	ite	eq
 8004d90:	2301      	moveq	r3, #1
 8004d92:	2300      	movne	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	e012      	b.n	8004dbe <HAL_I2C_Init+0x18e>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	1e58      	subs	r0, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6859      	ldr	r1, [r3, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	0099      	lsls	r1, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dae:	3301      	adds	r3, #1
 8004db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	bf0c      	ite	eq
 8004db8:	2301      	moveq	r3, #1
 8004dba:	2300      	movne	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <HAL_I2C_Init+0x196>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e022      	b.n	8004e0c <HAL_I2C_Init+0x1dc>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10e      	bne.n	8004dec <HAL_I2C_Init+0x1bc>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1e58      	subs	r0, r3, #1
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6859      	ldr	r1, [r3, #4]
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	440b      	add	r3, r1
 8004ddc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004de0:	3301      	adds	r3, #1
 8004de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dea:	e00f      	b.n	8004e0c <HAL_I2C_Init+0x1dc>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1e58      	subs	r0, r3, #1
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6859      	ldr	r1, [r3, #4]
 8004df4:	460b      	mov	r3, r1
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	0099      	lsls	r1, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e02:	3301      	adds	r3, #1
 8004e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	6809      	ldr	r1, [r1, #0]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69da      	ldr	r2, [r3, #28]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6911      	ldr	r1, [r2, #16]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	68d2      	ldr	r2, [r2, #12]
 8004e46:	4311      	orrs	r1, r2
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6812      	ldr	r2, [r2, #0]
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695a      	ldr	r2, [r3, #20]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	000186a0 	.word	0x000186a0
 8004ea8:	001e847f 	.word	0x001e847f
 8004eac:	003d08ff 	.word	0x003d08ff
 8004eb0:	431bde83 	.word	0x431bde83
 8004eb4:	10624dd3 	.word	0x10624dd3

08004eb8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e021      	b.n	8004f0e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2224      	movs	r2, #36	; 0x24
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fb fd78 	bl	80009d8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	4608      	mov	r0, r1
 8004f22:	4611      	mov	r1, r2
 8004f24:	461a      	mov	r2, r3
 8004f26:	4603      	mov	r3, r0
 8004f28:	817b      	strh	r3, [r7, #10]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	813b      	strh	r3, [r7, #8]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f32:	f7fe fe03 	bl	8003b3c <HAL_GetTick>
 8004f36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	f040 80d9 	bne.w	80050f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	2319      	movs	r3, #25
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	496d      	ldr	r1, [pc, #436]	; (8005104 <HAL_I2C_Mem_Write+0x1ec>)
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fc8d 	bl	8005870 <I2C_WaitOnFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e0cc      	b.n	80050fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d101      	bne.n	8004f6e <HAL_I2C_Mem_Write+0x56>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	e0c5      	b.n	80050fa <HAL_I2C_Mem_Write+0x1e2>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d007      	beq.n	8004f94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fa2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2221      	movs	r2, #33	; 0x21
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2240      	movs	r2, #64	; 0x40
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a3a      	ldr	r2, [r7, #32]
 8004fbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4a4d      	ldr	r2, [pc, #308]	; (8005108 <HAL_I2C_Mem_Write+0x1f0>)
 8004fd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fd6:	88f8      	ldrh	r0, [r7, #6]
 8004fd8:	893a      	ldrh	r2, [r7, #8]
 8004fda:	8979      	ldrh	r1, [r7, #10]
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	9301      	str	r3, [sp, #4]
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 fac4 	bl	8005574 <I2C_RequestMemoryWrite>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d052      	beq.n	8005098 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e081      	b.n	80050fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 fd0e 	bl	8005a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00d      	beq.n	8005022 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	2b04      	cmp	r3, #4
 800500c:	d107      	bne.n	800501e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e06b      	b.n	80050fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	781a      	ldrb	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005048:	b29b      	uxth	r3, r3
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b04      	cmp	r3, #4
 800505e:	d11b      	bne.n	8005098 <HAL_I2C_Mem_Write+0x180>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005064:	2b00      	cmp	r3, #0
 8005066:	d017      	beq.n	8005098 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	781a      	ldrb	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1aa      	bne.n	8004ff6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 fcfa 	bl	8005a9e <I2C_WaitOnBTFFlagUntilTimeout>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00d      	beq.n	80050cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d107      	bne.n	80050c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e016      	b.n	80050fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	e000      	b.n	80050fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80050f8:	2302      	movs	r3, #2
  }
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	00100002 	.word	0x00100002
 8005108:	ffff0000 	.word	0xffff0000

0800510c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08c      	sub	sp, #48	; 0x30
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	4608      	mov	r0, r1
 8005116:	4611      	mov	r1, r2
 8005118:	461a      	mov	r2, r3
 800511a:	4603      	mov	r3, r0
 800511c:	817b      	strh	r3, [r7, #10]
 800511e:	460b      	mov	r3, r1
 8005120:	813b      	strh	r3, [r7, #8]
 8005122:	4613      	mov	r3, r2
 8005124:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005126:	f7fe fd09 	bl	8003b3c <HAL_GetTick>
 800512a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b20      	cmp	r3, #32
 8005136:	f040 8208 	bne.w	800554a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	2319      	movs	r3, #25
 8005140:	2201      	movs	r2, #1
 8005142:	497b      	ldr	r1, [pc, #492]	; (8005330 <HAL_I2C_Mem_Read+0x224>)
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 fb93 	bl	8005870 <I2C_WaitOnFlagUntilTimeout>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005150:	2302      	movs	r3, #2
 8005152:	e1fb      	b.n	800554c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515a:	2b01      	cmp	r3, #1
 800515c:	d101      	bne.n	8005162 <HAL_I2C_Mem_Read+0x56>
 800515e:	2302      	movs	r3, #2
 8005160:	e1f4      	b.n	800554c <HAL_I2C_Mem_Read+0x440>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b01      	cmp	r3, #1
 8005176:	d007      	beq.n	8005188 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005196:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2222      	movs	r2, #34	; 0x22
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2240      	movs	r2, #64	; 0x40
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80051b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4a5b      	ldr	r2, [pc, #364]	; (8005334 <HAL_I2C_Mem_Read+0x228>)
 80051c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051ca:	88f8      	ldrh	r0, [r7, #6]
 80051cc:	893a      	ldrh	r2, [r7, #8]
 80051ce:	8979      	ldrh	r1, [r7, #10]
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	9301      	str	r3, [sp, #4]
 80051d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	4603      	mov	r3, r0
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 fa60 	bl	80056a0 <I2C_RequestMemoryRead>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e1b0      	b.n	800554c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d113      	bne.n	800521a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f2:	2300      	movs	r3, #0
 80051f4:	623b      	str	r3, [r7, #32]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	623b      	str	r3, [r7, #32]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	623b      	str	r3, [r7, #32]
 8005206:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	e184      	b.n	8005524 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521e:	2b01      	cmp	r3, #1
 8005220:	d11b      	bne.n	800525a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005230:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005232:	2300      	movs	r3, #0
 8005234:	61fb      	str	r3, [r7, #28]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	61fb      	str	r3, [r7, #28]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	61fb      	str	r3, [r7, #28]
 8005246:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	e164      	b.n	8005524 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525e:	2b02      	cmp	r3, #2
 8005260:	d11b      	bne.n	800529a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005270:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005280:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005282:	2300      	movs	r3, #0
 8005284:	61bb      	str	r3, [r7, #24]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	61bb      	str	r3, [r7, #24]
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	e144      	b.n	8005524 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800529a:	2300      	movs	r3, #0
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80052b0:	e138      	b.n	8005524 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	f200 80f1 	bhi.w	800549e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d123      	bne.n	800530c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 fc29 	bl	8005b20 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e139      	b.n	800554c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691a      	ldr	r2, [r3, #16]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	855a      	strh	r2, [r3, #42]	; 0x2a
 800530a:	e10b      	b.n	8005524 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005310:	2b02      	cmp	r3, #2
 8005312:	d14e      	bne.n	80053b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531a:	2200      	movs	r2, #0
 800531c:	4906      	ldr	r1, [pc, #24]	; (8005338 <HAL_I2C_Mem_Read+0x22c>)
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 faa6 	bl	8005870 <I2C_WaitOnFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d008      	beq.n	800533c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e10e      	b.n	800554c <HAL_I2C_Mem_Read+0x440>
 800532e:	bf00      	nop
 8005330:	00100002 	.word	0x00100002
 8005334:	ffff0000 	.word	0xffff0000
 8005338:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800534a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691a      	ldr	r2, [r3, #16]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005368:	3b01      	subs	r3, #1
 800536a:	b29a      	uxth	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005374:	b29b      	uxth	r3, r3
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	691a      	ldr	r2, [r3, #16]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800539a:	3b01      	subs	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053b0:	e0b8      	b.n	8005524 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	2200      	movs	r2, #0
 80053ba:	4966      	ldr	r1, [pc, #408]	; (8005554 <HAL_I2C_Mem_Read+0x448>)
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 fa57 	bl	8005870 <I2C_WaitOnFlagUntilTimeout>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0bf      	b.n	800554c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b01      	subs	r3, #1
 8005408:	b29a      	uxth	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005414:	2200      	movs	r2, #0
 8005416:	494f      	ldr	r1, [pc, #316]	; (8005554 <HAL_I2C_Mem_Read+0x448>)
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 fa29 	bl	8005870 <I2C_WaitOnFlagUntilTimeout>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e091      	b.n	800554c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005454:	3b01      	subs	r3, #1
 8005456:	b29a      	uxth	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005460:	b29b      	uxth	r3, r3
 8005462:	3b01      	subs	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800549c:	e042      	b.n	8005524 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800549e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 fb3c 	bl	8005b20 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e04c      	b.n	800554c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d118      	bne.n	8005524 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550e:	3b01      	subs	r3, #1
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005528:	2b00      	cmp	r3, #0
 800552a:	f47f aec2 	bne.w	80052b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	e000      	b.n	800554c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800554a:	2302      	movs	r3, #2
  }
}
 800554c:	4618      	mov	r0, r3
 800554e:	3728      	adds	r7, #40	; 0x28
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	00010004 	.word	0x00010004

08005558 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005566:	b2db      	uxtb	r3, r3
}
 8005568:	4618      	mov	r0, r3
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af02      	add	r7, sp, #8
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	4608      	mov	r0, r1
 800557e:	4611      	mov	r1, r2
 8005580:	461a      	mov	r2, r3
 8005582:	4603      	mov	r3, r0
 8005584:	817b      	strh	r3, [r7, #10]
 8005586:	460b      	mov	r3, r1
 8005588:	813b      	strh	r3, [r7, #8]
 800558a:	4613      	mov	r3, r2
 800558c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800559c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f960 	bl	8005870 <I2C_WaitOnFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00d      	beq.n	80055d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c4:	d103      	bne.n	80055ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e05f      	b.n	8005692 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055d2:	897b      	ldrh	r3, [r7, #10]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	461a      	mov	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	6a3a      	ldr	r2, [r7, #32]
 80055e6:	492d      	ldr	r1, [pc, #180]	; (800569c <I2C_RequestMemoryWrite+0x128>)
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 f998 	bl	800591e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e04c      	b.n	8005692 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f8:	2300      	movs	r3, #0
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800560e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005610:	6a39      	ldr	r1, [r7, #32]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 fa02 	bl	8005a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00d      	beq.n	800563a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	2b04      	cmp	r3, #4
 8005624:	d107      	bne.n	8005636 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005634:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e02b      	b.n	8005692 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800563a:	88fb      	ldrh	r3, [r7, #6]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d105      	bne.n	800564c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005640:	893b      	ldrh	r3, [r7, #8]
 8005642:	b2da      	uxtb	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	611a      	str	r2, [r3, #16]
 800564a:	e021      	b.n	8005690 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800564c:	893b      	ldrh	r3, [r7, #8]
 800564e:	0a1b      	lsrs	r3, r3, #8
 8005650:	b29b      	uxth	r3, r3
 8005652:	b2da      	uxtb	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800565a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800565c:	6a39      	ldr	r1, [r7, #32]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 f9dc 	bl	8005a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00d      	beq.n	8005686 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	2b04      	cmp	r3, #4
 8005670:	d107      	bne.n	8005682 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005680:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e005      	b.n	8005692 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005686:	893b      	ldrh	r3, [r7, #8]
 8005688:	b2da      	uxtb	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	00010002 	.word	0x00010002

080056a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	4608      	mov	r0, r1
 80056aa:	4611      	mov	r1, r2
 80056ac:	461a      	mov	r2, r3
 80056ae:	4603      	mov	r3, r0
 80056b0:	817b      	strh	r3, [r7, #10]
 80056b2:	460b      	mov	r3, r1
 80056b4:	813b      	strh	r3, [r7, #8]
 80056b6:	4613      	mov	r3, r2
 80056b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 f8c2 	bl	8005870 <I2C_WaitOnFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00d      	beq.n	800570e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005700:	d103      	bne.n	800570a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005708:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e0aa      	b.n	8005864 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800570e:	897b      	ldrh	r3, [r7, #10]
 8005710:	b2db      	uxtb	r3, r3
 8005712:	461a      	mov	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800571c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	6a3a      	ldr	r2, [r7, #32]
 8005722:	4952      	ldr	r1, [pc, #328]	; (800586c <I2C_RequestMemoryRead+0x1cc>)
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 f8fa 	bl	800591e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e097      	b.n	8005864 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005734:	2300      	movs	r3, #0
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800574a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574c:	6a39      	ldr	r1, [r7, #32]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 f964 	bl	8005a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00d      	beq.n	8005776 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	2b04      	cmp	r3, #4
 8005760:	d107      	bne.n	8005772 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005770:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e076      	b.n	8005864 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005776:	88fb      	ldrh	r3, [r7, #6]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d105      	bne.n	8005788 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800577c:	893b      	ldrh	r3, [r7, #8]
 800577e:	b2da      	uxtb	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	611a      	str	r2, [r3, #16]
 8005786:	e021      	b.n	80057cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005788:	893b      	ldrh	r3, [r7, #8]
 800578a:	0a1b      	lsrs	r3, r3, #8
 800578c:	b29b      	uxth	r3, r3
 800578e:	b2da      	uxtb	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005798:	6a39      	ldr	r1, [r7, #32]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 f93e 	bl	8005a1c <I2C_WaitOnTXEFlagUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00d      	beq.n	80057c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d107      	bne.n	80057be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e050      	b.n	8005864 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057c2:	893b      	ldrh	r3, [r7, #8]
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ce:	6a39      	ldr	r1, [r7, #32]
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f923 	bl	8005a1c <I2C_WaitOnTXEFlagUntilTimeout>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00d      	beq.n	80057f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	2b04      	cmp	r3, #4
 80057e2:	d107      	bne.n	80057f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e035      	b.n	8005864 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005806:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	2200      	movs	r2, #0
 8005810:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 f82b 	bl	8005870 <I2C_WaitOnFlagUntilTimeout>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00d      	beq.n	800583c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800582e:	d103      	bne.n	8005838 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005836:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e013      	b.n	8005864 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800583c:	897b      	ldrh	r3, [r7, #10]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	f043 0301 	orr.w	r3, r3, #1
 8005844:	b2da      	uxtb	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	6a3a      	ldr	r2, [r7, #32]
 8005850:	4906      	ldr	r1, [pc, #24]	; (800586c <I2C_RequestMemoryRead+0x1cc>)
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 f863 	bl	800591e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e000      	b.n	8005864 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	00010002 	.word	0x00010002

08005870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	4613      	mov	r3, r2
 800587e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005880:	e025      	b.n	80058ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005888:	d021      	beq.n	80058ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800588a:	f7fe f957 	bl	8003b3c <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d302      	bcc.n	80058a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d116      	bne.n	80058ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	f043 0220 	orr.w	r2, r3, #32
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e023      	b.n	8005916 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	0c1b      	lsrs	r3, r3, #16
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d10d      	bne.n	80058f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	43da      	mvns	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4013      	ands	r3, r2
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	bf0c      	ite	eq
 80058ea:	2301      	moveq	r3, #1
 80058ec:	2300      	movne	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	461a      	mov	r2, r3
 80058f2:	e00c      	b.n	800590e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	43da      	mvns	r2, r3
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	4013      	ands	r3, r2
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	bf0c      	ite	eq
 8005906:	2301      	moveq	r3, #1
 8005908:	2300      	movne	r3, #0
 800590a:	b2db      	uxtb	r3, r3
 800590c:	461a      	mov	r2, r3
 800590e:	79fb      	ldrb	r3, [r7, #7]
 8005910:	429a      	cmp	r2, r3
 8005912:	d0b6      	beq.n	8005882 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	607a      	str	r2, [r7, #4]
 800592a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800592c:	e051      	b.n	80059d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800593c:	d123      	bne.n	8005986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800594c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005956:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	f043 0204 	orr.w	r2, r3, #4
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e046      	b.n	8005a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598c:	d021      	beq.n	80059d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800598e:	f7fe f8d5 	bl	8003b3c <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	429a      	cmp	r2, r3
 800599c:	d302      	bcc.n	80059a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d116      	bne.n	80059d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	f043 0220 	orr.w	r2, r3, #32
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e020      	b.n	8005a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	0c1b      	lsrs	r3, r3, #16
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d10c      	bne.n	80059f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	43da      	mvns	r2, r3
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4013      	ands	r3, r2
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	bf14      	ite	ne
 80059ee:	2301      	movne	r3, #1
 80059f0:	2300      	moveq	r3, #0
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	e00b      	b.n	8005a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	43da      	mvns	r2, r3
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	4013      	ands	r3, r2
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	bf14      	ite	ne
 8005a08:	2301      	movne	r3, #1
 8005a0a:	2300      	moveq	r3, #0
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d18d      	bne.n	800592e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a28:	e02d      	b.n	8005a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f8ce 	bl	8005bcc <I2C_IsAcknowledgeFailed>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e02d      	b.n	8005a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a40:	d021      	beq.n	8005a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a42:	f7fe f87b 	bl	8003b3c <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d302      	bcc.n	8005a58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d116      	bne.n	8005a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	f043 0220 	orr.w	r2, r3, #32
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e007      	b.n	8005a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a90:	2b80      	cmp	r3, #128	; 0x80
 8005a92:	d1ca      	bne.n	8005a2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005aaa:	e02d      	b.n	8005b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 f88d 	bl	8005bcc <I2C_IsAcknowledgeFailed>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e02d      	b.n	8005b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac2:	d021      	beq.n	8005b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ac4:	f7fe f83a 	bl	8003b3c <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d302      	bcc.n	8005ada <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d116      	bne.n	8005b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	f043 0220 	orr.w	r2, r3, #32
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e007      	b.n	8005b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d1ca      	bne.n	8005aac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b2c:	e042      	b.n	8005bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b10      	cmp	r3, #16
 8005b3a:	d119      	bne.n	8005b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f06f 0210 	mvn.w	r2, #16
 8005b44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e029      	b.n	8005bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b70:	f7fd ffe4 	bl	8003b3c <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d302      	bcc.n	8005b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d116      	bne.n	8005bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba0:	f043 0220 	orr.w	r2, r3, #32
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e007      	b.n	8005bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbe:	2b40      	cmp	r3, #64	; 0x40
 8005bc0:	d1b5      	bne.n	8005b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be2:	d11b      	bne.n	8005c1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	f043 0204 	orr.w	r2, r3, #4
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e000      	b.n	8005c1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
	...

08005c2c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e0bf      	b.n	8005dbe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fa fee6 	bl	8000a24 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699a      	ldr	r2, [r3, #24]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005c6e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6999      	ldr	r1, [r3, #24]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c84:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6899      	ldr	r1, [r3, #8]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	4b4a      	ldr	r3, [pc, #296]	; (8005dc8 <HAL_LTDC_Init+0x19c>)
 8005ca0:	400b      	ands	r3, r1
 8005ca2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	041b      	lsls	r3, r3, #16
 8005caa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6899      	ldr	r1, [r3, #8]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699a      	ldr	r2, [r3, #24]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68d9      	ldr	r1, [r3, #12]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	4b3e      	ldr	r3, [pc, #248]	; (8005dc8 <HAL_LTDC_Init+0x19c>)
 8005cce:	400b      	ands	r3, r1
 8005cd0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	041b      	lsls	r3, r3, #16
 8005cd8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68d9      	ldr	r1, [r3, #12]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a1a      	ldr	r2, [r3, #32]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6919      	ldr	r1, [r3, #16]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	4b33      	ldr	r3, [pc, #204]	; (8005dc8 <HAL_LTDC_Init+0x19c>)
 8005cfc:	400b      	ands	r3, r1
 8005cfe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	041b      	lsls	r3, r3, #16
 8005d06:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6919      	ldr	r1, [r3, #16]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6959      	ldr	r1, [r3, #20]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4b27      	ldr	r3, [pc, #156]	; (8005dc8 <HAL_LTDC_Init+0x19c>)
 8005d2a:	400b      	ands	r3, r1
 8005d2c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	041b      	lsls	r3, r3, #16
 8005d34:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6959      	ldr	r1, [r3, #20]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d52:	021b      	lsls	r3, r3, #8
 8005d54:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005d5c:	041b      	lsls	r3, r3, #16
 8005d5e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0206 	orr.w	r2, r2, #6
 8005d9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0201 	orr.w	r2, r2, #1
 8005daa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	f000f800 	.word	0xf000f800

08005dcc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005dcc:	b5b0      	push	{r4, r5, r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d101      	bne.n	8005de6 <HAL_LTDC_ConfigLayer+0x1a>
 8005de2:	2302      	movs	r3, #2
 8005de4:	e02c      	b.n	8005e40 <HAL_LTDC_ConfigLayer+0x74>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2202      	movs	r2, #2
 8005df2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2134      	movs	r1, #52	; 0x34
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	4413      	add	r3, r2
 8005e02:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	4614      	mov	r4, r2
 8005e0a:	461d      	mov	r5, r3
 8005e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	68b9      	ldr	r1, [r7, #8]
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 f83b 	bl	8005e9c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bdb0      	pop	{r4, r5, r7, pc}

08005e48 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d101      	bne.n	8005e5e <HAL_LTDC_EnableDither+0x16>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	e016      	b.n	8005e8c <HAL_LTDC_EnableDither+0x44>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005e6e:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <HAL_LTDC_EnableDither+0x50>)
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	4a09      	ldr	r2, [pc, #36]	; (8005e98 <HAL_LTDC_EnableDither+0x50>)
 8005e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e78:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	40016800 	.word	0x40016800

08005e9c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b089      	sub	sp, #36	; 0x24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	0c1b      	lsrs	r3, r3, #16
 8005eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eb8:	4413      	add	r3, r2
 8005eba:	041b      	lsls	r3, r3, #16
 8005ebc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	01db      	lsls	r3, r3, #7
 8005ec8:	4413      	add	r3, r2
 8005eca:	3384      	adds	r3, #132	; 0x84
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	6812      	ldr	r2, [r2, #0]
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	01d2      	lsls	r2, r2, #7
 8005ed8:	440a      	add	r2, r1
 8005eda:	3284      	adds	r2, #132	; 0x84
 8005edc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005ee0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	0c1b      	lsrs	r3, r3, #16
 8005eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef2:	4413      	add	r3, r2
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4619      	mov	r1, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	01db      	lsls	r3, r3, #7
 8005f00:	440b      	add	r3, r1
 8005f02:	3384      	adds	r3, #132	; 0x84
 8005f04:	4619      	mov	r1, r3
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f1a:	4413      	add	r3, r2
 8005f1c:	041b      	lsls	r3, r3, #16
 8005f1e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	01db      	lsls	r3, r3, #7
 8005f2a:	4413      	add	r3, r2
 8005f2c:	3384      	adds	r3, #132	; 0x84
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	4611      	mov	r1, r2
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	01d2      	lsls	r2, r2, #7
 8005f3a:	440a      	add	r2, r1
 8005f3c:	3284      	adds	r2, #132	; 0x84
 8005f3e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f42:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f52:	4413      	add	r3, r2
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	01db      	lsls	r3, r3, #7
 8005f60:	440b      	add	r3, r1
 8005f62:	3384      	adds	r3, #132	; 0x84
 8005f64:	4619      	mov	r1, r3
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	461a      	mov	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	01db      	lsls	r3, r3, #7
 8005f76:	4413      	add	r3, r2
 8005f78:	3384      	adds	r3, #132	; 0x84
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	6812      	ldr	r2, [r2, #0]
 8005f80:	4611      	mov	r1, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	01d2      	lsls	r2, r2, #7
 8005f86:	440a      	add	r2, r1
 8005f88:	3284      	adds	r2, #132	; 0x84
 8005f8a:	f023 0307 	bic.w	r3, r3, #7
 8005f8e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	01db      	lsls	r3, r3, #7
 8005f9a:	4413      	add	r3, r2
 8005f9c:	3384      	adds	r3, #132	; 0x84
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005fac:	021b      	lsls	r3, r3, #8
 8005fae:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005fb6:	041b      	lsls	r3, r3, #16
 8005fb8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	061b      	lsls	r3, r3, #24
 8005fc0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	01db      	lsls	r3, r3, #7
 8005fcc:	4413      	add	r3, r2
 8005fce:	3384      	adds	r3, #132	; 0x84
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	01db      	lsls	r3, r3, #7
 8005fdc:	4413      	add	r3, r2
 8005fde:	3384      	adds	r3, #132	; 0x84
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fec:	461a      	mov	r2, r3
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	01db      	lsls	r3, r3, #7
 8006000:	440b      	add	r3, r1
 8006002:	3384      	adds	r3, #132	; 0x84
 8006004:	4619      	mov	r1, r3
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	461a      	mov	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	01db      	lsls	r3, r3, #7
 8006016:	4413      	add	r3, r2
 8006018:	3384      	adds	r3, #132	; 0x84
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	6812      	ldr	r2, [r2, #0]
 8006020:	4611      	mov	r1, r2
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	01d2      	lsls	r2, r2, #7
 8006026:	440a      	add	r2, r1
 8006028:	3284      	adds	r2, #132	; 0x84
 800602a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800602e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	461a      	mov	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	01db      	lsls	r3, r3, #7
 800603a:	4413      	add	r3, r2
 800603c:	3384      	adds	r3, #132	; 0x84
 800603e:	461a      	mov	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	01db      	lsls	r3, r3, #7
 8006050:	4413      	add	r3, r2
 8006052:	3384      	adds	r3, #132	; 0x84
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	6812      	ldr	r2, [r2, #0]
 800605a:	4611      	mov	r1, r2
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	01d2      	lsls	r2, r2, #7
 8006060:	440a      	add	r2, r1
 8006062:	3284      	adds	r2, #132	; 0x84
 8006064:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006068:	f023 0307 	bic.w	r3, r3, #7
 800606c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	69da      	ldr	r2, [r3, #28]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	68f9      	ldr	r1, [r7, #12]
 8006078:	6809      	ldr	r1, [r1, #0]
 800607a:	4608      	mov	r0, r1
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	01c9      	lsls	r1, r1, #7
 8006080:	4401      	add	r1, r0
 8006082:	3184      	adds	r1, #132	; 0x84
 8006084:	4313      	orrs	r3, r2
 8006086:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	461a      	mov	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	01db      	lsls	r3, r3, #7
 8006092:	4413      	add	r3, r2
 8006094:	3384      	adds	r3, #132	; 0x84
 8006096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	461a      	mov	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	01db      	lsls	r3, r3, #7
 80060a2:	4413      	add	r3, r2
 80060a4:	3384      	adds	r3, #132	; 0x84
 80060a6:	461a      	mov	r2, r3
 80060a8:	2300      	movs	r3, #0
 80060aa:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	01db      	lsls	r3, r3, #7
 80060b6:	4413      	add	r3, r2
 80060b8:	3384      	adds	r3, #132	; 0x84
 80060ba:	461a      	mov	r2, r3
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d102      	bne.n	80060d0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80060ca:	2304      	movs	r3, #4
 80060cc:	61fb      	str	r3, [r7, #28]
 80060ce:	e01b      	b.n	8006108 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d102      	bne.n	80060de <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80060d8:	2303      	movs	r3, #3
 80060da:	61fb      	str	r3, [r7, #28]
 80060dc:	e014      	b.n	8006108 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d00b      	beq.n	80060fe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d007      	beq.n	80060fe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d003      	beq.n	80060fe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060fa:	2b07      	cmp	r3, #7
 80060fc:	d102      	bne.n	8006104 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80060fe:	2302      	movs	r3, #2
 8006100:	61fb      	str	r3, [r7, #28]
 8006102:	e001      	b.n	8006108 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006104:	2301      	movs	r3, #1
 8006106:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	01db      	lsls	r3, r3, #7
 8006112:	4413      	add	r3, r2
 8006114:	3384      	adds	r3, #132	; 0x84
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	4611      	mov	r1, r2
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	01d2      	lsls	r2, r2, #7
 8006122:	440a      	add	r2, r1
 8006124:	3284      	adds	r2, #132	; 0x84
 8006126:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800612a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	69fa      	ldr	r2, [r7, #28]
 8006132:	fb02 f303 	mul.w	r3, r2, r3
 8006136:	041a      	lsls	r2, r3, #16
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	6859      	ldr	r1, [r3, #4]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	1acb      	subs	r3, r1, r3
 8006142:	69f9      	ldr	r1, [r7, #28]
 8006144:	fb01 f303 	mul.w	r3, r1, r3
 8006148:	3303      	adds	r3, #3
 800614a:	68f9      	ldr	r1, [r7, #12]
 800614c:	6809      	ldr	r1, [r1, #0]
 800614e:	4608      	mov	r0, r1
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	01c9      	lsls	r1, r1, #7
 8006154:	4401      	add	r1, r0
 8006156:	3184      	adds	r1, #132	; 0x84
 8006158:	4313      	orrs	r3, r2
 800615a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	461a      	mov	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	01db      	lsls	r3, r3, #7
 8006166:	4413      	add	r3, r2
 8006168:	3384      	adds	r3, #132	; 0x84
 800616a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	6812      	ldr	r2, [r2, #0]
 8006170:	4611      	mov	r1, r2
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	01d2      	lsls	r2, r2, #7
 8006176:	440a      	add	r2, r1
 8006178:	3284      	adds	r2, #132	; 0x84
 800617a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800617e:	f023 0307 	bic.w	r3, r3, #7
 8006182:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	01db      	lsls	r3, r3, #7
 800618e:	4413      	add	r3, r2
 8006190:	3384      	adds	r3, #132	; 0x84
 8006192:	461a      	mov	r2, r3
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	01db      	lsls	r3, r3, #7
 80061a4:	4413      	add	r3, r2
 80061a6:	3384      	adds	r3, #132	; 0x84
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	6812      	ldr	r2, [r2, #0]
 80061ae:	4611      	mov	r1, r2
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	01d2      	lsls	r2, r2, #7
 80061b4:	440a      	add	r2, r1
 80061b6:	3284      	adds	r2, #132	; 0x84
 80061b8:	f043 0301 	orr.w	r3, r3, #1
 80061bc:	6013      	str	r3, [r2, #0]
}
 80061be:	bf00      	nop
 80061c0:	3724      	adds	r7, #36	; 0x24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
	...

080061cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e264      	b.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d075      	beq.n	80062d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061ea:	4ba3      	ldr	r3, [pc, #652]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f003 030c 	and.w	r3, r3, #12
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d00c      	beq.n	8006210 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061f6:	4ba0      	ldr	r3, [pc, #640]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061fe:	2b08      	cmp	r3, #8
 8006200:	d112      	bne.n	8006228 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006202:	4b9d      	ldr	r3, [pc, #628]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800620a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800620e:	d10b      	bne.n	8006228 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006210:	4b99      	ldr	r3, [pc, #612]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d05b      	beq.n	80062d4 <HAL_RCC_OscConfig+0x108>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d157      	bne.n	80062d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e23f      	b.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006230:	d106      	bne.n	8006240 <HAL_RCC_OscConfig+0x74>
 8006232:	4b91      	ldr	r3, [pc, #580]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a90      	ldr	r2, [pc, #576]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 8006238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	e01d      	b.n	800627c <HAL_RCC_OscConfig+0xb0>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006248:	d10c      	bne.n	8006264 <HAL_RCC_OscConfig+0x98>
 800624a:	4b8b      	ldr	r3, [pc, #556]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a8a      	ldr	r2, [pc, #552]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 8006250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	4b88      	ldr	r3, [pc, #544]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a87      	ldr	r2, [pc, #540]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 800625c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	e00b      	b.n	800627c <HAL_RCC_OscConfig+0xb0>
 8006264:	4b84      	ldr	r3, [pc, #528]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a83      	ldr	r2, [pc, #524]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 800626a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	4b81      	ldr	r3, [pc, #516]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a80      	ldr	r2, [pc, #512]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 8006276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800627a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d013      	beq.n	80062ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006284:	f7fd fc5a 	bl	8003b3c <HAL_GetTick>
 8006288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800628a:	e008      	b.n	800629e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800628c:	f7fd fc56 	bl	8003b3c <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b64      	cmp	r3, #100	; 0x64
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e204      	b.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800629e:	4b76      	ldr	r3, [pc, #472]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0f0      	beq.n	800628c <HAL_RCC_OscConfig+0xc0>
 80062aa:	e014      	b.n	80062d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ac:	f7fd fc46 	bl	8003b3c <HAL_GetTick>
 80062b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062b4:	f7fd fc42 	bl	8003b3c <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b64      	cmp	r3, #100	; 0x64
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e1f0      	b.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062c6:	4b6c      	ldr	r3, [pc, #432]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1f0      	bne.n	80062b4 <HAL_RCC_OscConfig+0xe8>
 80062d2:	e000      	b.n	80062d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d063      	beq.n	80063aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062e2:	4b65      	ldr	r3, [pc, #404]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 030c 	and.w	r3, r3, #12
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00b      	beq.n	8006306 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ee:	4b62      	ldr	r3, [pc, #392]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d11c      	bne.n	8006334 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062fa:	4b5f      	ldr	r3, [pc, #380]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d116      	bne.n	8006334 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006306:	4b5c      	ldr	r3, [pc, #368]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <HAL_RCC_OscConfig+0x152>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d001      	beq.n	800631e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e1c4      	b.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800631e:	4b56      	ldr	r3, [pc, #344]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	4952      	ldr	r1, [pc, #328]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 800632e:	4313      	orrs	r3, r2
 8006330:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006332:	e03a      	b.n	80063aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d020      	beq.n	800637e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800633c:	4b4f      	ldr	r3, [pc, #316]	; (800647c <HAL_RCC_OscConfig+0x2b0>)
 800633e:	2201      	movs	r2, #1
 8006340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006342:	f7fd fbfb 	bl	8003b3c <HAL_GetTick>
 8006346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006348:	e008      	b.n	800635c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800634a:	f7fd fbf7 	bl	8003b3c <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d901      	bls.n	800635c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e1a5      	b.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800635c:	4b46      	ldr	r3, [pc, #280]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0f0      	beq.n	800634a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006368:	4b43      	ldr	r3, [pc, #268]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	4940      	ldr	r1, [pc, #256]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 8006378:	4313      	orrs	r3, r2
 800637a:	600b      	str	r3, [r1, #0]
 800637c:	e015      	b.n	80063aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800637e:	4b3f      	ldr	r3, [pc, #252]	; (800647c <HAL_RCC_OscConfig+0x2b0>)
 8006380:	2200      	movs	r2, #0
 8006382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006384:	f7fd fbda 	bl	8003b3c <HAL_GetTick>
 8006388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800638c:	f7fd fbd6 	bl	8003b3c <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e184      	b.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800639e:	4b36      	ldr	r3, [pc, #216]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1f0      	bne.n	800638c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0308 	and.w	r3, r3, #8
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d030      	beq.n	8006418 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d016      	beq.n	80063ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063be:	4b30      	ldr	r3, [pc, #192]	; (8006480 <HAL_RCC_OscConfig+0x2b4>)
 80063c0:	2201      	movs	r2, #1
 80063c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c4:	f7fd fbba 	bl	8003b3c <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063cc:	f7fd fbb6 	bl	8003b3c <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e164      	b.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063de:	4b26      	ldr	r3, [pc, #152]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 80063e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0f0      	beq.n	80063cc <HAL_RCC_OscConfig+0x200>
 80063ea:	e015      	b.n	8006418 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063ec:	4b24      	ldr	r3, [pc, #144]	; (8006480 <HAL_RCC_OscConfig+0x2b4>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063f2:	f7fd fba3 	bl	8003b3c <HAL_GetTick>
 80063f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063f8:	e008      	b.n	800640c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063fa:	f7fd fb9f 	bl	8003b3c <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e14d      	b.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800640c:	4b1a      	ldr	r3, [pc, #104]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 800640e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1f0      	bne.n	80063fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 80a0 	beq.w	8006566 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006426:	2300      	movs	r3, #0
 8006428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800642a:	4b13      	ldr	r3, [pc, #76]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10f      	bne.n	8006456 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006436:	2300      	movs	r3, #0
 8006438:	60bb      	str	r3, [r7, #8]
 800643a:	4b0f      	ldr	r3, [pc, #60]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	4a0e      	ldr	r2, [pc, #56]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 8006440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006444:	6413      	str	r3, [r2, #64]	; 0x40
 8006446:	4b0c      	ldr	r3, [pc, #48]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800644e:	60bb      	str	r3, [r7, #8]
 8006450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006452:	2301      	movs	r3, #1
 8006454:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006456:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <HAL_RCC_OscConfig+0x2b8>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645e:	2b00      	cmp	r3, #0
 8006460:	d121      	bne.n	80064a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006462:	4b08      	ldr	r3, [pc, #32]	; (8006484 <HAL_RCC_OscConfig+0x2b8>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a07      	ldr	r2, [pc, #28]	; (8006484 <HAL_RCC_OscConfig+0x2b8>)
 8006468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800646c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800646e:	f7fd fb65 	bl	8003b3c <HAL_GetTick>
 8006472:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006474:	e011      	b.n	800649a <HAL_RCC_OscConfig+0x2ce>
 8006476:	bf00      	nop
 8006478:	40023800 	.word	0x40023800
 800647c:	42470000 	.word	0x42470000
 8006480:	42470e80 	.word	0x42470e80
 8006484:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006488:	f7fd fb58 	bl	8003b3c <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e106      	b.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800649a:	4b85      	ldr	r3, [pc, #532]	; (80066b0 <HAL_RCC_OscConfig+0x4e4>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0f0      	beq.n	8006488 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d106      	bne.n	80064bc <HAL_RCC_OscConfig+0x2f0>
 80064ae:	4b81      	ldr	r3, [pc, #516]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 80064b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b2:	4a80      	ldr	r2, [pc, #512]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 80064b4:	f043 0301 	orr.w	r3, r3, #1
 80064b8:	6713      	str	r3, [r2, #112]	; 0x70
 80064ba:	e01c      	b.n	80064f6 <HAL_RCC_OscConfig+0x32a>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	2b05      	cmp	r3, #5
 80064c2:	d10c      	bne.n	80064de <HAL_RCC_OscConfig+0x312>
 80064c4:	4b7b      	ldr	r3, [pc, #492]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 80064c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c8:	4a7a      	ldr	r2, [pc, #488]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 80064ca:	f043 0304 	orr.w	r3, r3, #4
 80064ce:	6713      	str	r3, [r2, #112]	; 0x70
 80064d0:	4b78      	ldr	r3, [pc, #480]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 80064d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d4:	4a77      	ldr	r2, [pc, #476]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 80064d6:	f043 0301 	orr.w	r3, r3, #1
 80064da:	6713      	str	r3, [r2, #112]	; 0x70
 80064dc:	e00b      	b.n	80064f6 <HAL_RCC_OscConfig+0x32a>
 80064de:	4b75      	ldr	r3, [pc, #468]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 80064e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e2:	4a74      	ldr	r2, [pc, #464]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 80064e4:	f023 0301 	bic.w	r3, r3, #1
 80064e8:	6713      	str	r3, [r2, #112]	; 0x70
 80064ea:	4b72      	ldr	r3, [pc, #456]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	4a71      	ldr	r2, [pc, #452]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 80064f0:	f023 0304 	bic.w	r3, r3, #4
 80064f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d015      	beq.n	800652a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064fe:	f7fd fb1d 	bl	8003b3c <HAL_GetTick>
 8006502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006504:	e00a      	b.n	800651c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006506:	f7fd fb19 	bl	8003b3c <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	f241 3288 	movw	r2, #5000	; 0x1388
 8006514:	4293      	cmp	r3, r2
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e0c5      	b.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800651c:	4b65      	ldr	r3, [pc, #404]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 800651e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0ee      	beq.n	8006506 <HAL_RCC_OscConfig+0x33a>
 8006528:	e014      	b.n	8006554 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800652a:	f7fd fb07 	bl	8003b3c <HAL_GetTick>
 800652e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006530:	e00a      	b.n	8006548 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006532:	f7fd fb03 	bl	8003b3c <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006540:	4293      	cmp	r3, r2
 8006542:	d901      	bls.n	8006548 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e0af      	b.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006548:	4b5a      	ldr	r3, [pc, #360]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 800654a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1ee      	bne.n	8006532 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006554:	7dfb      	ldrb	r3, [r7, #23]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d105      	bne.n	8006566 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800655a:	4b56      	ldr	r3, [pc, #344]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	4a55      	ldr	r2, [pc, #340]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 8006560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006564:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 809b 	beq.w	80066a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006570:	4b50      	ldr	r3, [pc, #320]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 030c 	and.w	r3, r3, #12
 8006578:	2b08      	cmp	r3, #8
 800657a:	d05c      	beq.n	8006636 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	2b02      	cmp	r3, #2
 8006582:	d141      	bne.n	8006608 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006584:	4b4c      	ldr	r3, [pc, #304]	; (80066b8 <HAL_RCC_OscConfig+0x4ec>)
 8006586:	2200      	movs	r2, #0
 8006588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800658a:	f7fd fad7 	bl	8003b3c <HAL_GetTick>
 800658e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006590:	e008      	b.n	80065a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006592:	f7fd fad3 	bl	8003b3c <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e081      	b.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065a4:	4b43      	ldr	r3, [pc, #268]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1f0      	bne.n	8006592 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	69da      	ldr	r2, [r3, #28]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	431a      	orrs	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	019b      	lsls	r3, r3, #6
 80065c0:	431a      	orrs	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c6:	085b      	lsrs	r3, r3, #1
 80065c8:	3b01      	subs	r3, #1
 80065ca:	041b      	lsls	r3, r3, #16
 80065cc:	431a      	orrs	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	061b      	lsls	r3, r3, #24
 80065d4:	4937      	ldr	r1, [pc, #220]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065da:	4b37      	ldr	r3, [pc, #220]	; (80066b8 <HAL_RCC_OscConfig+0x4ec>)
 80065dc:	2201      	movs	r2, #1
 80065de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e0:	f7fd faac 	bl	8003b3c <HAL_GetTick>
 80065e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065e8:	f7fd faa8 	bl	8003b3c <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e056      	b.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065fa:	4b2e      	ldr	r3, [pc, #184]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0f0      	beq.n	80065e8 <HAL_RCC_OscConfig+0x41c>
 8006606:	e04e      	b.n	80066a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006608:	4b2b      	ldr	r3, [pc, #172]	; (80066b8 <HAL_RCC_OscConfig+0x4ec>)
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800660e:	f7fd fa95 	bl	8003b3c <HAL_GetTick>
 8006612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006614:	e008      	b.n	8006628 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006616:	f7fd fa91 	bl	8003b3c <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d901      	bls.n	8006628 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e03f      	b.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006628:	4b22      	ldr	r3, [pc, #136]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1f0      	bne.n	8006616 <HAL_RCC_OscConfig+0x44a>
 8006634:	e037      	b.n	80066a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e032      	b.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006642:	4b1c      	ldr	r3, [pc, #112]	; (80066b4 <HAL_RCC_OscConfig+0x4e8>)
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d028      	beq.n	80066a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800665a:	429a      	cmp	r2, r3
 800665c:	d121      	bne.n	80066a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006668:	429a      	cmp	r2, r3
 800666a:	d11a      	bne.n	80066a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006672:	4013      	ands	r3, r2
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006678:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800667a:	4293      	cmp	r3, r2
 800667c:	d111      	bne.n	80066a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006688:	085b      	lsrs	r3, r3, #1
 800668a:	3b01      	subs	r3, #1
 800668c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800668e:	429a      	cmp	r2, r3
 8006690:	d107      	bne.n	80066a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800669e:	429a      	cmp	r2, r3
 80066a0:	d001      	beq.n	80066a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e000      	b.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	40007000 	.word	0x40007000
 80066b4:	40023800 	.word	0x40023800
 80066b8:	42470060 	.word	0x42470060

080066bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e0cc      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066d0:	4b68      	ldr	r3, [pc, #416]	; (8006874 <HAL_RCC_ClockConfig+0x1b8>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 030f 	and.w	r3, r3, #15
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d90c      	bls.n	80066f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066de:	4b65      	ldr	r3, [pc, #404]	; (8006874 <HAL_RCC_ClockConfig+0x1b8>)
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e6:	4b63      	ldr	r3, [pc, #396]	; (8006874 <HAL_RCC_ClockConfig+0x1b8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 030f 	and.w	r3, r3, #15
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d001      	beq.n	80066f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e0b8      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d020      	beq.n	8006746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	d005      	beq.n	800671c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006710:	4b59      	ldr	r3, [pc, #356]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	4a58      	ldr	r2, [pc, #352]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 8006716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800671a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0308 	and.w	r3, r3, #8
 8006724:	2b00      	cmp	r3, #0
 8006726:	d005      	beq.n	8006734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006728:	4b53      	ldr	r3, [pc, #332]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	4a52      	ldr	r2, [pc, #328]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800672e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006734:	4b50      	ldr	r3, [pc, #320]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	494d      	ldr	r1, [pc, #308]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 8006742:	4313      	orrs	r3, r2
 8006744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d044      	beq.n	80067dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d107      	bne.n	800676a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800675a:	4b47      	ldr	r3, [pc, #284]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d119      	bne.n	800679a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e07f      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2b02      	cmp	r3, #2
 8006770:	d003      	beq.n	800677a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006776:	2b03      	cmp	r3, #3
 8006778:	d107      	bne.n	800678a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800677a:	4b3f      	ldr	r3, [pc, #252]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d109      	bne.n	800679a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e06f      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800678a:	4b3b      	ldr	r3, [pc, #236]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e067      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800679a:	4b37      	ldr	r3, [pc, #220]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f023 0203 	bic.w	r2, r3, #3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	4934      	ldr	r1, [pc, #208]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067ac:	f7fd f9c6 	bl	8003b3c <HAL_GetTick>
 80067b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067b2:	e00a      	b.n	80067ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067b4:	f7fd f9c2 	bl	8003b3c <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e04f      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ca:	4b2b      	ldr	r3, [pc, #172]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 020c 	and.w	r2, r3, #12
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	429a      	cmp	r2, r3
 80067da:	d1eb      	bne.n	80067b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067dc:	4b25      	ldr	r3, [pc, #148]	; (8006874 <HAL_RCC_ClockConfig+0x1b8>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d20c      	bcs.n	8006804 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ea:	4b22      	ldr	r3, [pc, #136]	; (8006874 <HAL_RCC_ClockConfig+0x1b8>)
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067f2:	4b20      	ldr	r3, [pc, #128]	; (8006874 <HAL_RCC_ClockConfig+0x1b8>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d001      	beq.n	8006804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e032      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b00      	cmp	r3, #0
 800680e:	d008      	beq.n	8006822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006810:	4b19      	ldr	r3, [pc, #100]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	4916      	ldr	r1, [pc, #88]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800681e:	4313      	orrs	r3, r2
 8006820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0308 	and.w	r3, r3, #8
 800682a:	2b00      	cmp	r3, #0
 800682c:	d009      	beq.n	8006842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800682e:	4b12      	ldr	r3, [pc, #72]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	490e      	ldr	r1, [pc, #56]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800683e:	4313      	orrs	r3, r2
 8006840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006842:	f000 f821 	bl	8006888 <HAL_RCC_GetSysClockFreq>
 8006846:	4602      	mov	r2, r0
 8006848:	4b0b      	ldr	r3, [pc, #44]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	091b      	lsrs	r3, r3, #4
 800684e:	f003 030f 	and.w	r3, r3, #15
 8006852:	490a      	ldr	r1, [pc, #40]	; (800687c <HAL_RCC_ClockConfig+0x1c0>)
 8006854:	5ccb      	ldrb	r3, [r1, r3]
 8006856:	fa22 f303 	lsr.w	r3, r2, r3
 800685a:	4a09      	ldr	r2, [pc, #36]	; (8006880 <HAL_RCC_ClockConfig+0x1c4>)
 800685c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800685e:	4b09      	ldr	r3, [pc, #36]	; (8006884 <HAL_RCC_ClockConfig+0x1c8>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4618      	mov	r0, r3
 8006864:	f7fd f926 	bl	8003ab4 <HAL_InitTick>

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	40023c00 	.word	0x40023c00
 8006878:	40023800 	.word	0x40023800
 800687c:	08009834 	.word	0x08009834
 8006880:	20000008 	.word	0x20000008
 8006884:	20000088 	.word	0x20000088

08006888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006888:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	607b      	str	r3, [r7, #4]
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	2300      	movs	r3, #0
 800689a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068a0:	4b67      	ldr	r3, [pc, #412]	; (8006a40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f003 030c 	and.w	r3, r3, #12
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d00d      	beq.n	80068c8 <HAL_RCC_GetSysClockFreq+0x40>
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	f200 80bd 	bhi.w	8006a2c <HAL_RCC_GetSysClockFreq+0x1a4>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <HAL_RCC_GetSysClockFreq+0x34>
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d003      	beq.n	80068c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80068ba:	e0b7      	b.n	8006a2c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068bc:	4b61      	ldr	r3, [pc, #388]	; (8006a44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80068be:	60bb      	str	r3, [r7, #8]
       break;
 80068c0:	e0b7      	b.n	8006a32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068c2:	4b61      	ldr	r3, [pc, #388]	; (8006a48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80068c4:	60bb      	str	r3, [r7, #8]
      break;
 80068c6:	e0b4      	b.n	8006a32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068c8:	4b5d      	ldr	r3, [pc, #372]	; (8006a40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068d2:	4b5b      	ldr	r3, [pc, #364]	; (8006a40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d04d      	beq.n	800697a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068de:	4b58      	ldr	r3, [pc, #352]	; (8006a40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	099b      	lsrs	r3, r3, #6
 80068e4:	461a      	mov	r2, r3
 80068e6:	f04f 0300 	mov.w	r3, #0
 80068ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80068ee:	f04f 0100 	mov.w	r1, #0
 80068f2:	ea02 0800 	and.w	r8, r2, r0
 80068f6:	ea03 0901 	and.w	r9, r3, r1
 80068fa:	4640      	mov	r0, r8
 80068fc:	4649      	mov	r1, r9
 80068fe:	f04f 0200 	mov.w	r2, #0
 8006902:	f04f 0300 	mov.w	r3, #0
 8006906:	014b      	lsls	r3, r1, #5
 8006908:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800690c:	0142      	lsls	r2, r0, #5
 800690e:	4610      	mov	r0, r2
 8006910:	4619      	mov	r1, r3
 8006912:	ebb0 0008 	subs.w	r0, r0, r8
 8006916:	eb61 0109 	sbc.w	r1, r1, r9
 800691a:	f04f 0200 	mov.w	r2, #0
 800691e:	f04f 0300 	mov.w	r3, #0
 8006922:	018b      	lsls	r3, r1, #6
 8006924:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006928:	0182      	lsls	r2, r0, #6
 800692a:	1a12      	subs	r2, r2, r0
 800692c:	eb63 0301 	sbc.w	r3, r3, r1
 8006930:	f04f 0000 	mov.w	r0, #0
 8006934:	f04f 0100 	mov.w	r1, #0
 8006938:	00d9      	lsls	r1, r3, #3
 800693a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800693e:	00d0      	lsls	r0, r2, #3
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
 8006944:	eb12 0208 	adds.w	r2, r2, r8
 8006948:	eb43 0309 	adc.w	r3, r3, r9
 800694c:	f04f 0000 	mov.w	r0, #0
 8006950:	f04f 0100 	mov.w	r1, #0
 8006954:	0259      	lsls	r1, r3, #9
 8006956:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800695a:	0250      	lsls	r0, r2, #9
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4610      	mov	r0, r2
 8006962:	4619      	mov	r1, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	461a      	mov	r2, r3
 8006968:	f04f 0300 	mov.w	r3, #0
 800696c:	f7f9 fc90 	bl	8000290 <__aeabi_uldivmod>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	4613      	mov	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	e04a      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800697a:	4b31      	ldr	r3, [pc, #196]	; (8006a40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	099b      	lsrs	r3, r3, #6
 8006980:	461a      	mov	r2, r3
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	f240 10ff 	movw	r0, #511	; 0x1ff
 800698a:	f04f 0100 	mov.w	r1, #0
 800698e:	ea02 0400 	and.w	r4, r2, r0
 8006992:	ea03 0501 	and.w	r5, r3, r1
 8006996:	4620      	mov	r0, r4
 8006998:	4629      	mov	r1, r5
 800699a:	f04f 0200 	mov.w	r2, #0
 800699e:	f04f 0300 	mov.w	r3, #0
 80069a2:	014b      	lsls	r3, r1, #5
 80069a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80069a8:	0142      	lsls	r2, r0, #5
 80069aa:	4610      	mov	r0, r2
 80069ac:	4619      	mov	r1, r3
 80069ae:	1b00      	subs	r0, r0, r4
 80069b0:	eb61 0105 	sbc.w	r1, r1, r5
 80069b4:	f04f 0200 	mov.w	r2, #0
 80069b8:	f04f 0300 	mov.w	r3, #0
 80069bc:	018b      	lsls	r3, r1, #6
 80069be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80069c2:	0182      	lsls	r2, r0, #6
 80069c4:	1a12      	subs	r2, r2, r0
 80069c6:	eb63 0301 	sbc.w	r3, r3, r1
 80069ca:	f04f 0000 	mov.w	r0, #0
 80069ce:	f04f 0100 	mov.w	r1, #0
 80069d2:	00d9      	lsls	r1, r3, #3
 80069d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069d8:	00d0      	lsls	r0, r2, #3
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	1912      	adds	r2, r2, r4
 80069e0:	eb45 0303 	adc.w	r3, r5, r3
 80069e4:	f04f 0000 	mov.w	r0, #0
 80069e8:	f04f 0100 	mov.w	r1, #0
 80069ec:	0299      	lsls	r1, r3, #10
 80069ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80069f2:	0290      	lsls	r0, r2, #10
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	4610      	mov	r0, r2
 80069fa:	4619      	mov	r1, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	461a      	mov	r2, r3
 8006a00:	f04f 0300 	mov.w	r3, #0
 8006a04:	f7f9 fc44 	bl	8000290 <__aeabi_uldivmod>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a10:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	0c1b      	lsrs	r3, r3, #16
 8006a16:	f003 0303 	and.w	r3, r3, #3
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	005b      	lsls	r3, r3, #1
 8006a1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a28:	60bb      	str	r3, [r7, #8]
      break;
 8006a2a:	e002      	b.n	8006a32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a2c:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006a2e:	60bb      	str	r3, [r7, #8]
      break;
 8006a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a32:	68bb      	ldr	r3, [r7, #8]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006a3e:	bf00      	nop
 8006a40:	40023800 	.word	0x40023800
 8006a44:	00f42400 	.word	0x00f42400
 8006a48:	007a1200 	.word	0x007a1200

08006a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a50:	4b03      	ldr	r3, [pc, #12]	; (8006a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a52:	681b      	ldr	r3, [r3, #0]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	20000008 	.word	0x20000008

08006a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a68:	f7ff fff0 	bl	8006a4c <HAL_RCC_GetHCLKFreq>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	0a9b      	lsrs	r3, r3, #10
 8006a74:	f003 0307 	and.w	r3, r3, #7
 8006a78:	4903      	ldr	r1, [pc, #12]	; (8006a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a7a:	5ccb      	ldrb	r3, [r1, r3]
 8006a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	40023800 	.word	0x40023800
 8006a88:	08009844 	.word	0x08009844

08006a8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10b      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d105      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d075      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ac0:	4bad      	ldr	r3, [pc, #692]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ac6:	f7fd f839 	bl	8003b3c <HAL_GetTick>
 8006aca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006acc:	e008      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ace:	f7fd f835 	bl	8003b3c <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e18b      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ae0:	4ba6      	ldr	r3, [pc, #664]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f0      	bne.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d009      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	019a      	lsls	r2, r3, #6
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	071b      	lsls	r3, r3, #28
 8006b04:	499d      	ldr	r1, [pc, #628]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d01f      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b18:	4b98      	ldr	r3, [pc, #608]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b1e:	0f1b      	lsrs	r3, r3, #28
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	019a      	lsls	r2, r3, #6
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	061b      	lsls	r3, r3, #24
 8006b32:	431a      	orrs	r2, r3
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	071b      	lsls	r3, r3, #28
 8006b38:	4990      	ldr	r1, [pc, #576]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b40:	4b8e      	ldr	r3, [pc, #568]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b46:	f023 021f 	bic.w	r2, r3, #31
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	498a      	ldr	r1, [pc, #552]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00d      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	019a      	lsls	r2, r3, #6
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	061b      	lsls	r3, r3, #24
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	071b      	lsls	r3, r3, #28
 8006b78:	4980      	ldr	r1, [pc, #512]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b80:	4b7d      	ldr	r3, [pc, #500]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b86:	f7fc ffd9 	bl	8003b3c <HAL_GetTick>
 8006b8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b8c:	e008      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b8e:	f7fc ffd5 	bl	8003b3c <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d901      	bls.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e12b      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ba0:	4b76      	ldr	r3, [pc, #472]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d0f0      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d105      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d079      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006bc4:	4b6e      	ldr	r3, [pc, #440]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bca:	f7fc ffb7 	bl	8003b3c <HAL_GetTick>
 8006bce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bd0:	e008      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006bd2:	f7fc ffb3 	bl	8003b3c <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d901      	bls.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e109      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006be4:	4b65      	ldr	r3, [pc, #404]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bf0:	d0ef      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d020      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006bfe:	4b5f      	ldr	r3, [pc, #380]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c04:	0f1b      	lsrs	r3, r3, #28
 8006c06:	f003 0307 	and.w	r3, r3, #7
 8006c0a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	019a      	lsls	r2, r3, #6
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	061b      	lsls	r3, r3, #24
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	071b      	lsls	r3, r3, #28
 8006c1e:	4957      	ldr	r1, [pc, #348]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c26:	4b55      	ldr	r3, [pc, #340]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	3b01      	subs	r3, #1
 8006c36:	021b      	lsls	r3, r3, #8
 8006c38:	4950      	ldr	r1, [pc, #320]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0308 	and.w	r3, r3, #8
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01e      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c4c:	4b4b      	ldr	r3, [pc, #300]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c52:	0e1b      	lsrs	r3, r3, #24
 8006c54:	f003 030f 	and.w	r3, r3, #15
 8006c58:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	019a      	lsls	r2, r3, #6
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	061b      	lsls	r3, r3, #24
 8006c64:	431a      	orrs	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	071b      	lsls	r3, r3, #28
 8006c6c:	4943      	ldr	r1, [pc, #268]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c74:	4b41      	ldr	r3, [pc, #260]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	493e      	ldr	r1, [pc, #248]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c8a:	4b3d      	ldr	r3, [pc, #244]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c90:	f7fc ff54 	bl	8003b3c <HAL_GetTick>
 8006c94:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c96:	e008      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006c98:	f7fc ff50 	bl	8003b3c <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e0a6      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006caa:	4b34      	ldr	r3, [pc, #208]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cb6:	d1ef      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0320 	and.w	r3, r3, #32
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 808d 	beq.w	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	4b2c      	ldr	r3, [pc, #176]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	4a2b      	ldr	r2, [pc, #172]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8006cd6:	4b29      	ldr	r3, [pc, #164]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cde:	60fb      	str	r3, [r7, #12]
 8006ce0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006ce2:	4b28      	ldr	r3, [pc, #160]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a27      	ldr	r2, [pc, #156]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006cee:	f7fc ff25 	bl	8003b3c <HAL_GetTick>
 8006cf2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006cf4:	e008      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006cf6:	f7fc ff21 	bl	8003b3c <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e077      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d08:	4b1e      	ldr	r3, [pc, #120]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0f0      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d14:	4b19      	ldr	r3, [pc, #100]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d1c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d039      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d032      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d32:	4b12      	ldr	r3, [pc, #72]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d3a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d3c:	4b12      	ldr	r3, [pc, #72]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006d3e:	2201      	movs	r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d42:	4b11      	ldr	r3, [pc, #68]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006d48:	4a0c      	ldr	r2, [pc, #48]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d4e:	4b0b      	ldr	r3, [pc, #44]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d11e      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006d5a:	f7fc feef 	bl	8003b3c <HAL_GetTick>
 8006d5e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d60:	e014      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d62:	f7fc feeb 	bl	8003b3c <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d90b      	bls.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e03f      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006d78:	42470068 	.word	0x42470068
 8006d7c:	40023800 	.word	0x40023800
 8006d80:	42470070 	.word	0x42470070
 8006d84:	40007000 	.word	0x40007000
 8006d88:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d8c:	4b1c      	ldr	r3, [pc, #112]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d0e4      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006da0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006da4:	d10d      	bne.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006da6:	4b16      	ldr	r3, [pc, #88]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dba:	4911      	ldr	r1, [pc, #68]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	608b      	str	r3, [r1, #8]
 8006dc0:	e005      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006dc2:	4b0f      	ldr	r3, [pc, #60]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	4a0e      	ldr	r2, [pc, #56]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dc8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006dcc:	6093      	str	r3, [r2, #8]
 8006dce:	4b0c      	ldr	r3, [pc, #48]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dda:	4909      	ldr	r1, [pc, #36]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0310 	and.w	r3, r3, #16
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d004      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006df2:	4b04      	ldr	r3, [pc, #16]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006df4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	40023800 	.word	0x40023800
 8006e04:	424711e0 	.word	0x424711e0

08006e08 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e01c      	b.n	8006e54 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	795b      	ldrb	r3, [r3, #5]
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d105      	bne.n	8006e30 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7fa faf6 	bl	800141c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f042 0204 	orr.w	r2, r2, #4
 8006e44:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e025      	b.n	8006ebc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d106      	bne.n	8006e8a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7f9 fc9b 	bl	80007c0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	f001 fabd 	bl	800841c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6818      	ldr	r0, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	f001 fb28 	bl	8008502 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d101      	bne.n	8006ee0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006edc:	2302      	movs	r3, #2
 8006ede:	e018      	b.n	8006f12 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	68b9      	ldr	r1, [r7, #8]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f001 fb85 	bl	8008600 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d104      	bne.n	8006f08 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2205      	movs	r2, #5
 8006f02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006f06:	e003      	b.n	8006f10 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b082      	sub	sp, #8
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d101      	bne.n	8006f34 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006f30:	2302      	movs	r3, #2
 8006f32:	e00e      	b.n	8006f52 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f001 fb98 	bl	8008678 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b082      	sub	sp, #8
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e07b      	b.n	8007064 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d108      	bne.n	8006f86 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f7c:	d009      	beq.n	8006f92 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	61da      	str	r2, [r3, #28]
 8006f84:	e005      	b.n	8006f92 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d106      	bne.n	8006fb2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7fa fa57 	bl	8001460 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fc8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	695b      	ldr	r3, [r3, #20]
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007002:	431a      	orrs	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800700c:	431a      	orrs	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007016:	ea42 0103 	orr.w	r1, r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	0c1b      	lsrs	r3, r3, #16
 8007030:	f003 0104 	and.w	r1, r3, #4
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	f003 0210 	and.w	r2, r3, #16
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	430a      	orrs	r2, r1
 8007042:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	69da      	ldr	r2, [r3, #28]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007052:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e01a      	b.n	80070b4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2202      	movs	r2, #2
 8007082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007094:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7fa fa2a 	bl	80014f0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b088      	sub	sp, #32
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	603b      	str	r3, [r7, #0]
 80070c8:	4613      	mov	r3, r2
 80070ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d101      	bne.n	80070de <HAL_SPI_Transmit+0x22>
 80070da:	2302      	movs	r3, #2
 80070dc:	e126      	b.n	800732c <HAL_SPI_Transmit+0x270>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070e6:	f7fc fd29 	bl	8003b3c <HAL_GetTick>
 80070ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80070ec:	88fb      	ldrh	r3, [r7, #6]
 80070ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d002      	beq.n	8007102 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80070fc:	2302      	movs	r3, #2
 80070fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007100:	e10b      	b.n	800731a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <HAL_SPI_Transmit+0x52>
 8007108:	88fb      	ldrh	r3, [r7, #6]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d102      	bne.n	8007114 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007112:	e102      	b.n	800731a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2203      	movs	r2, #3
 8007118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	88fa      	ldrh	r2, [r7, #6]
 800712c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	88fa      	ldrh	r2, [r7, #6]
 8007132:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800715a:	d10f      	bne.n	800717c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800716a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800717a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007186:	2b40      	cmp	r3, #64	; 0x40
 8007188:	d007      	beq.n	800719a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007198:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071a2:	d14b      	bne.n	800723c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <HAL_SPI_Transmit+0xf6>
 80071ac:	8afb      	ldrh	r3, [r7, #22]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d13e      	bne.n	8007230 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b6:	881a      	ldrh	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c2:	1c9a      	adds	r2, r3, #2
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	3b01      	subs	r3, #1
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80071d6:	e02b      	b.n	8007230 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d112      	bne.n	800720c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ea:	881a      	ldrh	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f6:	1c9a      	adds	r2, r3, #2
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007200:	b29b      	uxth	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	b29a      	uxth	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	86da      	strh	r2, [r3, #54]	; 0x36
 800720a:	e011      	b.n	8007230 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800720c:	f7fc fc96 	bl	8003b3c <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	429a      	cmp	r2, r3
 800721a:	d803      	bhi.n	8007224 <HAL_SPI_Transmit+0x168>
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007222:	d102      	bne.n	800722a <HAL_SPI_Transmit+0x16e>
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d102      	bne.n	8007230 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800722e:	e074      	b.n	800731a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007234:	b29b      	uxth	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1ce      	bne.n	80071d8 <HAL_SPI_Transmit+0x11c>
 800723a:	e04c      	b.n	80072d6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d002      	beq.n	800724a <HAL_SPI_Transmit+0x18e>
 8007244:	8afb      	ldrh	r3, [r7, #22]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d140      	bne.n	80072cc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	330c      	adds	r3, #12
 8007254:	7812      	ldrb	r2, [r2, #0]
 8007256:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007270:	e02c      	b.n	80072cc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	2b02      	cmp	r3, #2
 800727e:	d113      	bne.n	80072a8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	330c      	adds	r3, #12
 800728a:	7812      	ldrb	r2, [r2, #0]
 800728c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007292:	1c5a      	adds	r2, r3, #1
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800729c:	b29b      	uxth	r3, r3
 800729e:	3b01      	subs	r3, #1
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80072a6:	e011      	b.n	80072cc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072a8:	f7fc fc48 	bl	8003b3c <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d803      	bhi.n	80072c0 <HAL_SPI_Transmit+0x204>
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072be:	d102      	bne.n	80072c6 <HAL_SPI_Transmit+0x20a>
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d102      	bne.n	80072cc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80072ca:	e026      	b.n	800731a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1cd      	bne.n	8007272 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 fbda 	bl	8007a94 <SPI_EndRxTxTransaction>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d002      	beq.n	80072ec <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2220      	movs	r2, #32
 80072ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10a      	bne.n	800730a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072f4:	2300      	movs	r3, #0
 80072f6:	613b      	str	r3, [r7, #16]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	613b      	str	r3, [r7, #16]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	613b      	str	r3, [r7, #16]
 8007308:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	77fb      	strb	r3, [r7, #31]
 8007316:	e000      	b.n	800731a <HAL_SPI_Transmit+0x25e>
  }

error:
 8007318:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800732a:	7ffb      	ldrb	r3, [r7, #31]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3720      	adds	r7, #32
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af02      	add	r7, sp, #8
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	603b      	str	r3, [r7, #0]
 8007340:	4613      	mov	r3, r2
 8007342:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007344:	2300      	movs	r3, #0
 8007346:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007350:	d112      	bne.n	8007378 <HAL_SPI_Receive+0x44>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10e      	bne.n	8007378 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2204      	movs	r2, #4
 800735e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007362:	88fa      	ldrh	r2, [r7, #6]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	4613      	mov	r3, r2
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	68b9      	ldr	r1, [r7, #8]
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 f8f1 	bl	8007556 <HAL_SPI_TransmitReceive>
 8007374:	4603      	mov	r3, r0
 8007376:	e0ea      	b.n	800754e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800737e:	2b01      	cmp	r3, #1
 8007380:	d101      	bne.n	8007386 <HAL_SPI_Receive+0x52>
 8007382:	2302      	movs	r3, #2
 8007384:	e0e3      	b.n	800754e <HAL_SPI_Receive+0x21a>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800738e:	f7fc fbd5 	bl	8003b3c <HAL_GetTick>
 8007392:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b01      	cmp	r3, #1
 800739e:	d002      	beq.n	80073a6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80073a0:	2302      	movs	r3, #2
 80073a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073a4:	e0ca      	b.n	800753c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <HAL_SPI_Receive+0x7e>
 80073ac:	88fb      	ldrh	r3, [r7, #6]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d102      	bne.n	80073b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073b6:	e0c1      	b.n	800753c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2204      	movs	r2, #4
 80073bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	88fa      	ldrh	r2, [r7, #6]
 80073d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	88fa      	ldrh	r2, [r7, #6]
 80073d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073fe:	d10f      	bne.n	8007420 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800740e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800741e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742a:	2b40      	cmp	r3, #64	; 0x40
 800742c:	d007      	beq.n	800743e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800743c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d162      	bne.n	800750c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007446:	e02e      	b.n	80074a6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b01      	cmp	r3, #1
 8007454:	d115      	bne.n	8007482 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f103 020c 	add.w	r2, r3, #12
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007462:	7812      	ldrb	r2, [r2, #0]
 8007464:	b2d2      	uxtb	r2, r2
 8007466:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007476:	b29b      	uxth	r3, r3
 8007478:	3b01      	subs	r3, #1
 800747a:	b29a      	uxth	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007480:	e011      	b.n	80074a6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007482:	f7fc fb5b 	bl	8003b3c <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	429a      	cmp	r2, r3
 8007490:	d803      	bhi.n	800749a <HAL_SPI_Receive+0x166>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007498:	d102      	bne.n	80074a0 <HAL_SPI_Receive+0x16c>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d102      	bne.n	80074a6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80074a4:	e04a      	b.n	800753c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1cb      	bne.n	8007448 <HAL_SPI_Receive+0x114>
 80074b0:	e031      	b.n	8007516 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f003 0301 	and.w	r3, r3, #1
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d113      	bne.n	80074e8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68da      	ldr	r2, [r3, #12]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ca:	b292      	uxth	r2, r2
 80074cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d2:	1c9a      	adds	r2, r3, #2
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074dc:	b29b      	uxth	r3, r3
 80074de:	3b01      	subs	r3, #1
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074e6:	e011      	b.n	800750c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074e8:	f7fc fb28 	bl	8003b3c <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d803      	bhi.n	8007500 <HAL_SPI_Receive+0x1cc>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fe:	d102      	bne.n	8007506 <HAL_SPI_Receive+0x1d2>
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d102      	bne.n	800750c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	75fb      	strb	r3, [r7, #23]
          goto error;
 800750a:	e017      	b.n	800753c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1cd      	bne.n	80074b2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f000 fa54 	bl	80079c8 <SPI_EndRxTransaction>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2220      	movs	r2, #32
 800752a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	75fb      	strb	r3, [r7, #23]
 8007538:	e000      	b.n	800753c <HAL_SPI_Receive+0x208>
  }

error :
 800753a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800754c:	7dfb      	ldrb	r3, [r7, #23]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b08c      	sub	sp, #48	; 0x30
 800755a:	af00      	add	r7, sp, #0
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	60b9      	str	r1, [r7, #8]
 8007560:	607a      	str	r2, [r7, #4]
 8007562:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007564:	2301      	movs	r3, #1
 8007566:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007574:	2b01      	cmp	r3, #1
 8007576:	d101      	bne.n	800757c <HAL_SPI_TransmitReceive+0x26>
 8007578:	2302      	movs	r3, #2
 800757a:	e18a      	b.n	8007892 <HAL_SPI_TransmitReceive+0x33c>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007584:	f7fc fada 	bl	8003b3c <HAL_GetTick>
 8007588:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800759a:	887b      	ldrh	r3, [r7, #2]
 800759c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800759e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d00f      	beq.n	80075c6 <HAL_SPI_TransmitReceive+0x70>
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075ac:	d107      	bne.n	80075be <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d103      	bne.n	80075be <HAL_SPI_TransmitReceive+0x68>
 80075b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075ba:	2b04      	cmp	r3, #4
 80075bc:	d003      	beq.n	80075c6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80075be:	2302      	movs	r3, #2
 80075c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80075c4:	e15b      	b.n	800787e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d005      	beq.n	80075d8 <HAL_SPI_TransmitReceive+0x82>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <HAL_SPI_TransmitReceive+0x82>
 80075d2:	887b      	ldrh	r3, [r7, #2]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d103      	bne.n	80075e0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80075de:	e14e      	b.n	800787e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d003      	beq.n	80075f4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2205      	movs	r2, #5
 80075f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	887a      	ldrh	r2, [r7, #2]
 8007604:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	887a      	ldrh	r2, [r7, #2]
 800760a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	887a      	ldrh	r2, [r7, #2]
 8007616:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	887a      	ldrh	r2, [r7, #2]
 800761c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007634:	2b40      	cmp	r3, #64	; 0x40
 8007636:	d007      	beq.n	8007648 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007646:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007650:	d178      	bne.n	8007744 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <HAL_SPI_TransmitReceive+0x10a>
 800765a:	8b7b      	ldrh	r3, [r7, #26]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d166      	bne.n	800772e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007664:	881a      	ldrh	r2, [r3, #0]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007670:	1c9a      	adds	r2, r3, #2
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800767a:	b29b      	uxth	r3, r3
 800767c:	3b01      	subs	r3, #1
 800767e:	b29a      	uxth	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007684:	e053      	b.n	800772e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f003 0302 	and.w	r3, r3, #2
 8007690:	2b02      	cmp	r3, #2
 8007692:	d11b      	bne.n	80076cc <HAL_SPI_TransmitReceive+0x176>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007698:	b29b      	uxth	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d016      	beq.n	80076cc <HAL_SPI_TransmitReceive+0x176>
 800769e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d113      	bne.n	80076cc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a8:	881a      	ldrh	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b4:	1c9a      	adds	r2, r3, #2
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076be:	b29b      	uxth	r3, r3
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d119      	bne.n	800770e <HAL_SPI_TransmitReceive+0x1b8>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076de:	b29b      	uxth	r3, r3
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d014      	beq.n	800770e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	b292      	uxth	r2, r2
 80076f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f6:	1c9a      	adds	r2, r3, #2
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007700:	b29b      	uxth	r3, r3
 8007702:	3b01      	subs	r3, #1
 8007704:	b29a      	uxth	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800770a:	2301      	movs	r3, #1
 800770c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800770e:	f7fc fa15 	bl	8003b3c <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800771a:	429a      	cmp	r2, r3
 800771c:	d807      	bhi.n	800772e <HAL_SPI_TransmitReceive+0x1d8>
 800771e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007724:	d003      	beq.n	800772e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800772c:	e0a7      	b.n	800787e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007732:	b29b      	uxth	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1a6      	bne.n	8007686 <HAL_SPI_TransmitReceive+0x130>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800773c:	b29b      	uxth	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1a1      	bne.n	8007686 <HAL_SPI_TransmitReceive+0x130>
 8007742:	e07c      	b.n	800783e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d002      	beq.n	8007752 <HAL_SPI_TransmitReceive+0x1fc>
 800774c:	8b7b      	ldrh	r3, [r7, #26]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d16b      	bne.n	800782a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	330c      	adds	r3, #12
 800775c:	7812      	ldrb	r2, [r2, #0]
 800775e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800776e:	b29b      	uxth	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007778:	e057      	b.n	800782a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f003 0302 	and.w	r3, r3, #2
 8007784:	2b02      	cmp	r3, #2
 8007786:	d11c      	bne.n	80077c2 <HAL_SPI_TransmitReceive+0x26c>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800778c:	b29b      	uxth	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d017      	beq.n	80077c2 <HAL_SPI_TransmitReceive+0x26c>
 8007792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007794:	2b01      	cmp	r3, #1
 8007796:	d114      	bne.n	80077c2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	330c      	adds	r3, #12
 80077a2:	7812      	ldrb	r2, [r2, #0]
 80077a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077aa:	1c5a      	adds	r2, r3, #1
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	3b01      	subs	r3, #1
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d119      	bne.n	8007804 <HAL_SPI_TransmitReceive+0x2ae>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d014      	beq.n	8007804 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68da      	ldr	r2, [r3, #12]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e4:	b2d2      	uxtb	r2, r2
 80077e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ec:	1c5a      	adds	r2, r3, #1
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	3b01      	subs	r3, #1
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007800:	2301      	movs	r3, #1
 8007802:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007804:	f7fc f99a 	bl	8003b3c <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007810:	429a      	cmp	r2, r3
 8007812:	d803      	bhi.n	800781c <HAL_SPI_TransmitReceive+0x2c6>
 8007814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781a:	d102      	bne.n	8007822 <HAL_SPI_TransmitReceive+0x2cc>
 800781c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781e:	2b00      	cmp	r3, #0
 8007820:	d103      	bne.n	800782a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007828:	e029      	b.n	800787e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800782e:	b29b      	uxth	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1a2      	bne.n	800777a <HAL_SPI_TransmitReceive+0x224>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007838:	b29b      	uxth	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d19d      	bne.n	800777a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800783e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007840:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 f926 	bl	8007a94 <SPI_EndRxTxTransaction>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d006      	beq.n	800785c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2220      	movs	r2, #32
 8007858:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800785a:	e010      	b.n	800787e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10b      	bne.n	800787c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007864:	2300      	movs	r3, #0
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	617b      	str	r3, [r7, #20]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	617b      	str	r3, [r7, #20]
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	e000      	b.n	800787e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800787c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800788e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007892:	4618      	mov	r0, r3
 8007894:	3730      	adds	r7, #48	; 0x30
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800789a:	b480      	push	{r7}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078a8:	b2db      	uxtb	r3, r3
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
	...

080078b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b088      	sub	sp, #32
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	603b      	str	r3, [r7, #0]
 80078c4:	4613      	mov	r3, r2
 80078c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80078c8:	f7fc f938 	bl	8003b3c <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d0:	1a9b      	subs	r3, r3, r2
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	4413      	add	r3, r2
 80078d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80078d8:	f7fc f930 	bl	8003b3c <HAL_GetTick>
 80078dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80078de:	4b39      	ldr	r3, [pc, #228]	; (80079c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	015b      	lsls	r3, r3, #5
 80078e4:	0d1b      	lsrs	r3, r3, #20
 80078e6:	69fa      	ldr	r2, [r7, #28]
 80078e8:	fb02 f303 	mul.w	r3, r2, r3
 80078ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078ee:	e054      	b.n	800799a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f6:	d050      	beq.n	800799a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80078f8:	f7fc f920 	bl	8003b3c <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	69fa      	ldr	r2, [r7, #28]
 8007904:	429a      	cmp	r2, r3
 8007906:	d902      	bls.n	800790e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d13d      	bne.n	800798a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800791c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007926:	d111      	bne.n	800794c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007930:	d004      	beq.n	800793c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800793a:	d107      	bne.n	800794c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800794a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007954:	d10f      	bne.n	8007976 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007964:	601a      	str	r2, [r3, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007974:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e017      	b.n	80079ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d101      	bne.n	8007994 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007990:	2300      	movs	r3, #0
 8007992:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	3b01      	subs	r3, #1
 8007998:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689a      	ldr	r2, [r3, #8]
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	4013      	ands	r3, r2
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	bf0c      	ite	eq
 80079aa:	2301      	moveq	r3, #1
 80079ac:	2300      	movne	r3, #0
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	461a      	mov	r2, r3
 80079b2:	79fb      	ldrb	r3, [r7, #7]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d19b      	bne.n	80078f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3720      	adds	r7, #32
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20000008 	.word	0x20000008

080079c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af02      	add	r7, sp, #8
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079dc:	d111      	bne.n	8007a02 <SPI_EndRxTransaction+0x3a>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079e6:	d004      	beq.n	80079f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079f0:	d107      	bne.n	8007a02 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a00:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a0a:	d12a      	bne.n	8007a62 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a14:	d012      	beq.n	8007a3c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2180      	movs	r1, #128	; 0x80
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f7ff ff49 	bl	80078b8 <SPI_WaitFlagStateUntilTimeout>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d02d      	beq.n	8007a88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a30:	f043 0220 	orr.w	r2, r3, #32
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e026      	b.n	8007a8a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	2200      	movs	r2, #0
 8007a44:	2101      	movs	r1, #1
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f7ff ff36 	bl	80078b8 <SPI_WaitFlagStateUntilTimeout>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d01a      	beq.n	8007a88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a56:	f043 0220 	orr.w	r2, r3, #32
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e013      	b.n	8007a8a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f7ff ff23 	bl	80078b8 <SPI_WaitFlagStateUntilTimeout>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d007      	beq.n	8007a88 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7c:	f043 0220 	orr.w	r2, r3, #32
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e000      	b.n	8007a8a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b088      	sub	sp, #32
 8007a98:	af02      	add	r7, sp, #8
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007aa0:	4b1b      	ldr	r3, [pc, #108]	; (8007b10 <SPI_EndRxTxTransaction+0x7c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a1b      	ldr	r2, [pc, #108]	; (8007b14 <SPI_EndRxTxTransaction+0x80>)
 8007aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aaa:	0d5b      	lsrs	r3, r3, #21
 8007aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ab0:	fb02 f303 	mul.w	r3, r2, r3
 8007ab4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007abe:	d112      	bne.n	8007ae6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	2180      	movs	r1, #128	; 0x80
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f7ff fef4 	bl	80078b8 <SPI_WaitFlagStateUntilTimeout>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d016      	beq.n	8007b04 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ada:	f043 0220 	orr.w	r2, r3, #32
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e00f      	b.n	8007b06 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00a      	beq.n	8007b02 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	3b01      	subs	r3, #1
 8007af0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afc:	2b80      	cmp	r3, #128	; 0x80
 8007afe:	d0f2      	beq.n	8007ae6 <SPI_EndRxTxTransaction+0x52>
 8007b00:	e000      	b.n	8007b04 <SPI_EndRxTxTransaction+0x70>
        break;
 8007b02:	bf00      	nop
  }

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	20000008 	.word	0x20000008
 8007b14:	165e9f81 	.word	0x165e9f81

08007b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e041      	b.n	8007bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d106      	bne.n	8007b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7f9 fec4 	bl	80018cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2202      	movs	r2, #2
 8007b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3304      	adds	r3, #4
 8007b54:	4619      	mov	r1, r3
 8007b56:	4610      	mov	r0, r2
 8007b58:	f000 fa96 	bl	8008088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d001      	beq.n	8007bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e04e      	b.n	8007c6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0201 	orr.w	r2, r2, #1
 8007be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a23      	ldr	r2, [pc, #140]	; (8007c7c <HAL_TIM_Base_Start_IT+0xc4>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d022      	beq.n	8007c38 <HAL_TIM_Base_Start_IT+0x80>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bfa:	d01d      	beq.n	8007c38 <HAL_TIM_Base_Start_IT+0x80>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a1f      	ldr	r2, [pc, #124]	; (8007c80 <HAL_TIM_Base_Start_IT+0xc8>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d018      	beq.n	8007c38 <HAL_TIM_Base_Start_IT+0x80>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a1e      	ldr	r2, [pc, #120]	; (8007c84 <HAL_TIM_Base_Start_IT+0xcc>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d013      	beq.n	8007c38 <HAL_TIM_Base_Start_IT+0x80>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a1c      	ldr	r2, [pc, #112]	; (8007c88 <HAL_TIM_Base_Start_IT+0xd0>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d00e      	beq.n	8007c38 <HAL_TIM_Base_Start_IT+0x80>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a1b      	ldr	r2, [pc, #108]	; (8007c8c <HAL_TIM_Base_Start_IT+0xd4>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d009      	beq.n	8007c38 <HAL_TIM_Base_Start_IT+0x80>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a19      	ldr	r2, [pc, #100]	; (8007c90 <HAL_TIM_Base_Start_IT+0xd8>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d004      	beq.n	8007c38 <HAL_TIM_Base_Start_IT+0x80>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a18      	ldr	r2, [pc, #96]	; (8007c94 <HAL_TIM_Base_Start_IT+0xdc>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d111      	bne.n	8007c5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f003 0307 	and.w	r3, r3, #7
 8007c42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b06      	cmp	r3, #6
 8007c48:	d010      	beq.n	8007c6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f042 0201 	orr.w	r2, r2, #1
 8007c58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c5a:	e007      	b.n	8007c6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f042 0201 	orr.w	r2, r2, #1
 8007c6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	40010000 	.word	0x40010000
 8007c80:	40000400 	.word	0x40000400
 8007c84:	40000800 	.word	0x40000800
 8007c88:	40000c00 	.word	0x40000c00
 8007c8c:	40010400 	.word	0x40010400
 8007c90:	40014000 	.word	0x40014000
 8007c94:	40001800 	.word	0x40001800

08007c98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d122      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	f003 0302 	and.w	r3, r3, #2
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d11b      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f06f 0202 	mvn.w	r2, #2
 8007cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	f003 0303 	and.w	r3, r3, #3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f9b5 	bl	800804a <HAL_TIM_IC_CaptureCallback>
 8007ce0:	e005      	b.n	8007cee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f9a7 	bl	8008036 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f9b8 	bl	800805e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 0304 	and.w	r3, r3, #4
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d122      	bne.n	8007d48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f003 0304 	and.w	r3, r3, #4
 8007d0c:	2b04      	cmp	r3, #4
 8007d0e:	d11b      	bne.n	8007d48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0204 	mvn.w	r2, #4
 8007d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2202      	movs	r2, #2
 8007d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d003      	beq.n	8007d36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f98b 	bl	800804a <HAL_TIM_IC_CaptureCallback>
 8007d34:	e005      	b.n	8007d42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f97d 	bl	8008036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f98e 	bl	800805e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	f003 0308 	and.w	r3, r3, #8
 8007d52:	2b08      	cmp	r3, #8
 8007d54:	d122      	bne.n	8007d9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f003 0308 	and.w	r3, r3, #8
 8007d60:	2b08      	cmp	r3, #8
 8007d62:	d11b      	bne.n	8007d9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f06f 0208 	mvn.w	r2, #8
 8007d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2204      	movs	r2, #4
 8007d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	f003 0303 	and.w	r3, r3, #3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f961 	bl	800804a <HAL_TIM_IC_CaptureCallback>
 8007d88:	e005      	b.n	8007d96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f953 	bl	8008036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f964 	bl	800805e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	f003 0310 	and.w	r3, r3, #16
 8007da6:	2b10      	cmp	r3, #16
 8007da8:	d122      	bne.n	8007df0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	f003 0310 	and.w	r3, r3, #16
 8007db4:	2b10      	cmp	r3, #16
 8007db6:	d11b      	bne.n	8007df0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f06f 0210 	mvn.w	r2, #16
 8007dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2208      	movs	r2, #8
 8007dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d003      	beq.n	8007dde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f937 	bl	800804a <HAL_TIM_IC_CaptureCallback>
 8007ddc:	e005      	b.n	8007dea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f929 	bl	8008036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f93a 	bl	800805e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d10e      	bne.n	8007e1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d107      	bne.n	8007e1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f06f 0201 	mvn.w	r2, #1
 8007e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7f9 fa98 	bl	800134c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e26:	2b80      	cmp	r3, #128	; 0x80
 8007e28:	d10e      	bne.n	8007e48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e34:	2b80      	cmp	r3, #128	; 0x80
 8007e36:	d107      	bne.n	8007e48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fae0 	bl	8008408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e52:	2b40      	cmp	r3, #64	; 0x40
 8007e54:	d10e      	bne.n	8007e74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e60:	2b40      	cmp	r3, #64	; 0x40
 8007e62:	d107      	bne.n	8007e74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f8ff 	bl	8008072 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	f003 0320 	and.w	r3, r3, #32
 8007e7e:	2b20      	cmp	r3, #32
 8007e80:	d10e      	bne.n	8007ea0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	f003 0320 	and.w	r3, r3, #32
 8007e8c:	2b20      	cmp	r3, #32
 8007e8e:	d107      	bne.n	8007ea0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f06f 0220 	mvn.w	r2, #32
 8007e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 faaa 	bl	80083f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d101      	bne.n	8007ec4 <HAL_TIM_ConfigClockSource+0x1c>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	e0b4      	b.n	800802e <HAL_TIM_ConfigClockSource+0x186>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007eea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007efc:	d03e      	beq.n	8007f7c <HAL_TIM_ConfigClockSource+0xd4>
 8007efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f02:	f200 8087 	bhi.w	8008014 <HAL_TIM_ConfigClockSource+0x16c>
 8007f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f0a:	f000 8086 	beq.w	800801a <HAL_TIM_ConfigClockSource+0x172>
 8007f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f12:	d87f      	bhi.n	8008014 <HAL_TIM_ConfigClockSource+0x16c>
 8007f14:	2b70      	cmp	r3, #112	; 0x70
 8007f16:	d01a      	beq.n	8007f4e <HAL_TIM_ConfigClockSource+0xa6>
 8007f18:	2b70      	cmp	r3, #112	; 0x70
 8007f1a:	d87b      	bhi.n	8008014 <HAL_TIM_ConfigClockSource+0x16c>
 8007f1c:	2b60      	cmp	r3, #96	; 0x60
 8007f1e:	d050      	beq.n	8007fc2 <HAL_TIM_ConfigClockSource+0x11a>
 8007f20:	2b60      	cmp	r3, #96	; 0x60
 8007f22:	d877      	bhi.n	8008014 <HAL_TIM_ConfigClockSource+0x16c>
 8007f24:	2b50      	cmp	r3, #80	; 0x50
 8007f26:	d03c      	beq.n	8007fa2 <HAL_TIM_ConfigClockSource+0xfa>
 8007f28:	2b50      	cmp	r3, #80	; 0x50
 8007f2a:	d873      	bhi.n	8008014 <HAL_TIM_ConfigClockSource+0x16c>
 8007f2c:	2b40      	cmp	r3, #64	; 0x40
 8007f2e:	d058      	beq.n	8007fe2 <HAL_TIM_ConfigClockSource+0x13a>
 8007f30:	2b40      	cmp	r3, #64	; 0x40
 8007f32:	d86f      	bhi.n	8008014 <HAL_TIM_ConfigClockSource+0x16c>
 8007f34:	2b30      	cmp	r3, #48	; 0x30
 8007f36:	d064      	beq.n	8008002 <HAL_TIM_ConfigClockSource+0x15a>
 8007f38:	2b30      	cmp	r3, #48	; 0x30
 8007f3a:	d86b      	bhi.n	8008014 <HAL_TIM_ConfigClockSource+0x16c>
 8007f3c:	2b20      	cmp	r3, #32
 8007f3e:	d060      	beq.n	8008002 <HAL_TIM_ConfigClockSource+0x15a>
 8007f40:	2b20      	cmp	r3, #32
 8007f42:	d867      	bhi.n	8008014 <HAL_TIM_ConfigClockSource+0x16c>
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d05c      	beq.n	8008002 <HAL_TIM_ConfigClockSource+0x15a>
 8007f48:	2b10      	cmp	r3, #16
 8007f4a:	d05a      	beq.n	8008002 <HAL_TIM_ConfigClockSource+0x15a>
 8007f4c:	e062      	b.n	8008014 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6818      	ldr	r0, [r3, #0]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	6899      	ldr	r1, [r3, #8]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	f000 f9ad 	bl	80082bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	609a      	str	r2, [r3, #8]
      break;
 8007f7a:	e04f      	b.n	800801c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6818      	ldr	r0, [r3, #0]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	6899      	ldr	r1, [r3, #8]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	f000 f996 	bl	80082bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	689a      	ldr	r2, [r3, #8]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f9e:	609a      	str	r2, [r3, #8]
      break;
 8007fa0:	e03c      	b.n	800801c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6818      	ldr	r0, [r3, #0]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	6859      	ldr	r1, [r3, #4]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	f000 f90a 	bl	80081c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2150      	movs	r1, #80	; 0x50
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 f963 	bl	8008286 <TIM_ITRx_SetConfig>
      break;
 8007fc0:	e02c      	b.n	800801c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6818      	ldr	r0, [r3, #0]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	6859      	ldr	r1, [r3, #4]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f000 f929 	bl	8008226 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2160      	movs	r1, #96	; 0x60
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 f953 	bl	8008286 <TIM_ITRx_SetConfig>
      break;
 8007fe0:	e01c      	b.n	800801c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6818      	ldr	r0, [r3, #0]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	6859      	ldr	r1, [r3, #4]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f000 f8ea 	bl	80081c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2140      	movs	r1, #64	; 0x40
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 f943 	bl	8008286 <TIM_ITRx_SetConfig>
      break;
 8008000:	e00c      	b.n	800801c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4619      	mov	r1, r3
 800800c:	4610      	mov	r0, r2
 800800e:	f000 f93a 	bl	8008286 <TIM_ITRx_SetConfig>
      break;
 8008012:	e003      	b.n	800801c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	73fb      	strb	r3, [r7, #15]
      break;
 8008018:	e000      	b.n	800801c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800801a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800802c:	7bfb      	ldrb	r3, [r7, #15]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800803e:	bf00      	nop
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800804a:	b480      	push	{r7}
 800804c:	b083      	sub	sp, #12
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008052:	bf00      	nop
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800805e:	b480      	push	{r7}
 8008060:	b083      	sub	sp, #12
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008066:	bf00      	nop
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008072:	b480      	push	{r7}
 8008074:	b083      	sub	sp, #12
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800807a:	bf00      	nop
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
	...

08008088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a40      	ldr	r2, [pc, #256]	; (800819c <TIM_Base_SetConfig+0x114>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d013      	beq.n	80080c8 <TIM_Base_SetConfig+0x40>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080a6:	d00f      	beq.n	80080c8 <TIM_Base_SetConfig+0x40>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a3d      	ldr	r2, [pc, #244]	; (80081a0 <TIM_Base_SetConfig+0x118>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d00b      	beq.n	80080c8 <TIM_Base_SetConfig+0x40>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a3c      	ldr	r2, [pc, #240]	; (80081a4 <TIM_Base_SetConfig+0x11c>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d007      	beq.n	80080c8 <TIM_Base_SetConfig+0x40>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a3b      	ldr	r2, [pc, #236]	; (80081a8 <TIM_Base_SetConfig+0x120>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d003      	beq.n	80080c8 <TIM_Base_SetConfig+0x40>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a3a      	ldr	r2, [pc, #232]	; (80081ac <TIM_Base_SetConfig+0x124>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d108      	bne.n	80080da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a2f      	ldr	r2, [pc, #188]	; (800819c <TIM_Base_SetConfig+0x114>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d02b      	beq.n	800813a <TIM_Base_SetConfig+0xb2>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e8:	d027      	beq.n	800813a <TIM_Base_SetConfig+0xb2>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a2c      	ldr	r2, [pc, #176]	; (80081a0 <TIM_Base_SetConfig+0x118>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d023      	beq.n	800813a <TIM_Base_SetConfig+0xb2>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a2b      	ldr	r2, [pc, #172]	; (80081a4 <TIM_Base_SetConfig+0x11c>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d01f      	beq.n	800813a <TIM_Base_SetConfig+0xb2>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a2a      	ldr	r2, [pc, #168]	; (80081a8 <TIM_Base_SetConfig+0x120>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d01b      	beq.n	800813a <TIM_Base_SetConfig+0xb2>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a29      	ldr	r2, [pc, #164]	; (80081ac <TIM_Base_SetConfig+0x124>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d017      	beq.n	800813a <TIM_Base_SetConfig+0xb2>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a28      	ldr	r2, [pc, #160]	; (80081b0 <TIM_Base_SetConfig+0x128>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d013      	beq.n	800813a <TIM_Base_SetConfig+0xb2>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a27      	ldr	r2, [pc, #156]	; (80081b4 <TIM_Base_SetConfig+0x12c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d00f      	beq.n	800813a <TIM_Base_SetConfig+0xb2>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a26      	ldr	r2, [pc, #152]	; (80081b8 <TIM_Base_SetConfig+0x130>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d00b      	beq.n	800813a <TIM_Base_SetConfig+0xb2>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a25      	ldr	r2, [pc, #148]	; (80081bc <TIM_Base_SetConfig+0x134>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d007      	beq.n	800813a <TIM_Base_SetConfig+0xb2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a24      	ldr	r2, [pc, #144]	; (80081c0 <TIM_Base_SetConfig+0x138>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d003      	beq.n	800813a <TIM_Base_SetConfig+0xb2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a23      	ldr	r2, [pc, #140]	; (80081c4 <TIM_Base_SetConfig+0x13c>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d108      	bne.n	800814c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	4313      	orrs	r3, r2
 800814a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	4313      	orrs	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	689a      	ldr	r2, [r3, #8]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a0a      	ldr	r2, [pc, #40]	; (800819c <TIM_Base_SetConfig+0x114>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d003      	beq.n	8008180 <TIM_Base_SetConfig+0xf8>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a0c      	ldr	r2, [pc, #48]	; (80081ac <TIM_Base_SetConfig+0x124>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d103      	bne.n	8008188 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	691a      	ldr	r2, [r3, #16]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	615a      	str	r2, [r3, #20]
}
 800818e:	bf00      	nop
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	40010000 	.word	0x40010000
 80081a0:	40000400 	.word	0x40000400
 80081a4:	40000800 	.word	0x40000800
 80081a8:	40000c00 	.word	0x40000c00
 80081ac:	40010400 	.word	0x40010400
 80081b0:	40014000 	.word	0x40014000
 80081b4:	40014400 	.word	0x40014400
 80081b8:	40014800 	.word	0x40014800
 80081bc:	40001800 	.word	0x40001800
 80081c0:	40001c00 	.word	0x40001c00
 80081c4:	40002000 	.word	0x40002000

080081c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	f023 0201 	bic.w	r2, r3, #1
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	011b      	lsls	r3, r3, #4
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f023 030a 	bic.w	r3, r3, #10
 8008204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	4313      	orrs	r3, r2
 800820c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	621a      	str	r2, [r3, #32]
}
 800821a:	bf00      	nop
 800821c:	371c      	adds	r7, #28
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008226:	b480      	push	{r7}
 8008228:	b087      	sub	sp, #28
 800822a:	af00      	add	r7, sp, #0
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	f023 0210 	bic.w	r2, r3, #16
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008250:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	031b      	lsls	r3, r3, #12
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	4313      	orrs	r3, r2
 800825a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008262:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	4313      	orrs	r3, r2
 800826c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	697a      	ldr	r2, [r7, #20]
 8008272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	621a      	str	r2, [r3, #32]
}
 800827a:	bf00      	nop
 800827c:	371c      	adds	r7, #28
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008286:	b480      	push	{r7}
 8008288:	b085      	sub	sp, #20
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800829c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	f043 0307 	orr.w	r3, r3, #7
 80082a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	609a      	str	r2, [r3, #8]
}
 80082b0:	bf00      	nop
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082bc:	b480      	push	{r7}
 80082be:	b087      	sub	sp, #28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
 80082c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	021a      	lsls	r2, r3, #8
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	431a      	orrs	r2, r3
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	609a      	str	r2, [r3, #8]
}
 80082f0:	bf00      	nop
 80082f2:	371c      	adds	r7, #28
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800830c:	2b01      	cmp	r3, #1
 800830e:	d101      	bne.n	8008314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008310:	2302      	movs	r3, #2
 8008312:	e05a      	b.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2202      	movs	r2, #2
 8008320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800833a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	4313      	orrs	r3, r2
 8008344:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a21      	ldr	r2, [pc, #132]	; (80083d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d022      	beq.n	800839e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008360:	d01d      	beq.n	800839e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a1d      	ldr	r2, [pc, #116]	; (80083dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d018      	beq.n	800839e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a1b      	ldr	r2, [pc, #108]	; (80083e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d013      	beq.n	800839e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a1a      	ldr	r2, [pc, #104]	; (80083e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d00e      	beq.n	800839e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a18      	ldr	r2, [pc, #96]	; (80083e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d009      	beq.n	800839e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a17      	ldr	r2, [pc, #92]	; (80083ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d004      	beq.n	800839e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a15      	ldr	r2, [pc, #84]	; (80083f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d10c      	bne.n	80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3714      	adds	r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	40010000 	.word	0x40010000
 80083dc:	40000400 	.word	0x40000400
 80083e0:	40000800 	.word	0x40000800
 80083e4:	40000c00 	.word	0x40000c00
 80083e8:	40010400 	.word	0x40010400
 80083ec:	40014000 	.word	0x40014000
 80083f0:	40001800 	.word	0x40001800

080083f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8008426:	2300      	movs	r3, #0
 8008428:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d029      	beq.n	800848a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008442:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008446:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008450:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008456:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800845c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008462:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008468:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800846e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008474:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800847a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	4313      	orrs	r3, r2
 8008480:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	601a      	str	r2, [r3, #0]
 8008488:	e034      	b.n	80084f4 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008496:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80084a0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80084a6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80084ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80084be:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80084c8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80084ce:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80084d4:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80084da:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80084e0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008502:	b480      	push	{r7}
 8008504:	b087      	sub	sp, #28
 8008506:	af00      	add	r7, sp, #0
 8008508:	60f8      	str	r0, [r7, #12]
 800850a:	60b9      	str	r1, [r7, #8]
 800850c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800850e:	2300      	movs	r3, #0
 8008510:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d02e      	beq.n	800857a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008528:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	3b01      	subs	r3, #1
 8008536:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008538:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	3b01      	subs	r3, #1
 8008540:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008542:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	3b01      	subs	r3, #1
 800854a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800854c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	3b01      	subs	r3, #1
 8008554:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008556:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	3b01      	subs	r3, #1
 800855e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008560:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	3b01      	subs	r3, #1
 8008568:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800856a:	4313      	orrs	r3, r2
 800856c:	697a      	ldr	r2, [r7, #20]
 800856e:	4313      	orrs	r3, r2
 8008570:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	697a      	ldr	r2, [r7, #20]
 8008576:	609a      	str	r2, [r3, #8]
 8008578:	e03b      	b.n	80085f2 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008586:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800858a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	3b01      	subs	r3, #1
 8008592:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	695b      	ldr	r3, [r3, #20]
 8008598:	3b01      	subs	r3, #1
 800859a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800859c:	4313      	orrs	r3, r2
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80085b0:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	3b01      	subs	r3, #1
 80085be:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80085c0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	3b01      	subs	r3, #1
 80085c8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80085ca:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	3b01      	subs	r3, #1
 80085d2:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80085d4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	3b01      	subs	r3, #1
 80085dc:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80085de:	4313      	orrs	r3, r2
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	371c      	adds	r7, #28
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800860c:	2300      	movs	r3, #0
 800860e:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800861c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	3b01      	subs	r3, #1
 8008624:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008626:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800862e:	4313      	orrs	r3, r2
 8008630:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008638:	f7fb fa80 	bl	8003b3c <HAL_GetTick>
 800863c:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800863e:	e010      	b.n	8008662 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008646:	d00c      	beq.n	8008662 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d007      	beq.n	800865e <FMC_SDRAM_SendCommand+0x5e>
 800864e:	f7fb fa75 	bl	8003b3c <HAL_GetTick>
 8008652:	4602      	mov	r2, r0
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	429a      	cmp	r2, r3
 800865c:	d201      	bcs.n	8008662 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e006      	b.n	8008670 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	f003 0320 	and.w	r3, r3, #32
 800866a:	2b20      	cmp	r3, #32
 800866c:	d0e8      	beq.n	8008640 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	695a      	ldr	r2, [r3, #20]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	431a      	orrs	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
	...

080086a0 <__errno>:
 80086a0:	4b01      	ldr	r3, [pc, #4]	; (80086a8 <__errno+0x8>)
 80086a2:	6818      	ldr	r0, [r3, #0]
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	20000090 	.word	0x20000090

080086ac <__libc_init_array>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	4d0d      	ldr	r5, [pc, #52]	; (80086e4 <__libc_init_array+0x38>)
 80086b0:	4c0d      	ldr	r4, [pc, #52]	; (80086e8 <__libc_init_array+0x3c>)
 80086b2:	1b64      	subs	r4, r4, r5
 80086b4:	10a4      	asrs	r4, r4, #2
 80086b6:	2600      	movs	r6, #0
 80086b8:	42a6      	cmp	r6, r4
 80086ba:	d109      	bne.n	80086d0 <__libc_init_array+0x24>
 80086bc:	4d0b      	ldr	r5, [pc, #44]	; (80086ec <__libc_init_array+0x40>)
 80086be:	4c0c      	ldr	r4, [pc, #48]	; (80086f0 <__libc_init_array+0x44>)
 80086c0:	f001 f8ac 	bl	800981c <_init>
 80086c4:	1b64      	subs	r4, r4, r5
 80086c6:	10a4      	asrs	r4, r4, #2
 80086c8:	2600      	movs	r6, #0
 80086ca:	42a6      	cmp	r6, r4
 80086cc:	d105      	bne.n	80086da <__libc_init_array+0x2e>
 80086ce:	bd70      	pop	{r4, r5, r6, pc}
 80086d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d4:	4798      	blx	r3
 80086d6:	3601      	adds	r6, #1
 80086d8:	e7ee      	b.n	80086b8 <__libc_init_array+0xc>
 80086da:	f855 3b04 	ldr.w	r3, [r5], #4
 80086de:	4798      	blx	r3
 80086e0:	3601      	adds	r6, #1
 80086e2:	e7f2      	b.n	80086ca <__libc_init_array+0x1e>
 80086e4:	0800c064 	.word	0x0800c064
 80086e8:	0800c064 	.word	0x0800c064
 80086ec:	0800c064 	.word	0x0800c064
 80086f0:	0800c068 	.word	0x0800c068

080086f4 <__itoa>:
 80086f4:	1e93      	subs	r3, r2, #2
 80086f6:	2b22      	cmp	r3, #34	; 0x22
 80086f8:	b510      	push	{r4, lr}
 80086fa:	460c      	mov	r4, r1
 80086fc:	d904      	bls.n	8008708 <__itoa+0x14>
 80086fe:	2300      	movs	r3, #0
 8008700:	700b      	strb	r3, [r1, #0]
 8008702:	461c      	mov	r4, r3
 8008704:	4620      	mov	r0, r4
 8008706:	bd10      	pop	{r4, pc}
 8008708:	2a0a      	cmp	r2, #10
 800870a:	d109      	bne.n	8008720 <__itoa+0x2c>
 800870c:	2800      	cmp	r0, #0
 800870e:	da07      	bge.n	8008720 <__itoa+0x2c>
 8008710:	232d      	movs	r3, #45	; 0x2d
 8008712:	700b      	strb	r3, [r1, #0]
 8008714:	4240      	negs	r0, r0
 8008716:	2101      	movs	r1, #1
 8008718:	4421      	add	r1, r4
 800871a:	f000 f87b 	bl	8008814 <__utoa>
 800871e:	e7f1      	b.n	8008704 <__itoa+0x10>
 8008720:	2100      	movs	r1, #0
 8008722:	e7f9      	b.n	8008718 <__itoa+0x24>

08008724 <itoa>:
 8008724:	f7ff bfe6 	b.w	80086f4 <__itoa>

08008728 <memset>:
 8008728:	4402      	add	r2, r0
 800872a:	4603      	mov	r3, r0
 800872c:	4293      	cmp	r3, r2
 800872e:	d100      	bne.n	8008732 <memset+0xa>
 8008730:	4770      	bx	lr
 8008732:	f803 1b01 	strb.w	r1, [r3], #1
 8008736:	e7f9      	b.n	800872c <memset+0x4>

08008738 <srand>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4b10      	ldr	r3, [pc, #64]	; (800877c <srand+0x44>)
 800873c:	681d      	ldr	r5, [r3, #0]
 800873e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008740:	4604      	mov	r4, r0
 8008742:	b9b3      	cbnz	r3, 8008772 <srand+0x3a>
 8008744:	2018      	movs	r0, #24
 8008746:	f000 f8d7 	bl	80088f8 <malloc>
 800874a:	4602      	mov	r2, r0
 800874c:	63a8      	str	r0, [r5, #56]	; 0x38
 800874e:	b920      	cbnz	r0, 800875a <srand+0x22>
 8008750:	4b0b      	ldr	r3, [pc, #44]	; (8008780 <srand+0x48>)
 8008752:	480c      	ldr	r0, [pc, #48]	; (8008784 <srand+0x4c>)
 8008754:	2142      	movs	r1, #66	; 0x42
 8008756:	f000 f89f 	bl	8008898 <__assert_func>
 800875a:	490b      	ldr	r1, [pc, #44]	; (8008788 <srand+0x50>)
 800875c:	4b0b      	ldr	r3, [pc, #44]	; (800878c <srand+0x54>)
 800875e:	e9c0 1300 	strd	r1, r3, [r0]
 8008762:	4b0b      	ldr	r3, [pc, #44]	; (8008790 <srand+0x58>)
 8008764:	6083      	str	r3, [r0, #8]
 8008766:	230b      	movs	r3, #11
 8008768:	8183      	strh	r3, [r0, #12]
 800876a:	2100      	movs	r1, #0
 800876c:	2001      	movs	r0, #1
 800876e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008772:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008774:	2200      	movs	r2, #0
 8008776:	611c      	str	r4, [r3, #16]
 8008778:	615a      	str	r2, [r3, #20]
 800877a:	bd38      	pop	{r3, r4, r5, pc}
 800877c:	20000090 	.word	0x20000090
 8008780:	0800bef0 	.word	0x0800bef0
 8008784:	0800bf07 	.word	0x0800bf07
 8008788:	abcd330e 	.word	0xabcd330e
 800878c:	e66d1234 	.word	0xe66d1234
 8008790:	0005deec 	.word	0x0005deec

08008794 <rand>:
 8008794:	4b17      	ldr	r3, [pc, #92]	; (80087f4 <rand+0x60>)
 8008796:	b510      	push	{r4, lr}
 8008798:	681c      	ldr	r4, [r3, #0]
 800879a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800879c:	b9b3      	cbnz	r3, 80087cc <rand+0x38>
 800879e:	2018      	movs	r0, #24
 80087a0:	f000 f8aa 	bl	80088f8 <malloc>
 80087a4:	63a0      	str	r0, [r4, #56]	; 0x38
 80087a6:	b928      	cbnz	r0, 80087b4 <rand+0x20>
 80087a8:	4602      	mov	r2, r0
 80087aa:	4b13      	ldr	r3, [pc, #76]	; (80087f8 <rand+0x64>)
 80087ac:	4813      	ldr	r0, [pc, #76]	; (80087fc <rand+0x68>)
 80087ae:	214e      	movs	r1, #78	; 0x4e
 80087b0:	f000 f872 	bl	8008898 <__assert_func>
 80087b4:	4a12      	ldr	r2, [pc, #72]	; (8008800 <rand+0x6c>)
 80087b6:	4b13      	ldr	r3, [pc, #76]	; (8008804 <rand+0x70>)
 80087b8:	e9c0 2300 	strd	r2, r3, [r0]
 80087bc:	4b12      	ldr	r3, [pc, #72]	; (8008808 <rand+0x74>)
 80087be:	6083      	str	r3, [r0, #8]
 80087c0:	230b      	movs	r3, #11
 80087c2:	8183      	strh	r3, [r0, #12]
 80087c4:	2201      	movs	r2, #1
 80087c6:	2300      	movs	r3, #0
 80087c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80087cc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80087ce:	480f      	ldr	r0, [pc, #60]	; (800880c <rand+0x78>)
 80087d0:	690a      	ldr	r2, [r1, #16]
 80087d2:	694b      	ldr	r3, [r1, #20]
 80087d4:	4c0e      	ldr	r4, [pc, #56]	; (8008810 <rand+0x7c>)
 80087d6:	4350      	muls	r0, r2
 80087d8:	fb04 0003 	mla	r0, r4, r3, r0
 80087dc:	fba2 3404 	umull	r3, r4, r2, r4
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	4404      	add	r4, r0
 80087e4:	f144 0000 	adc.w	r0, r4, #0
 80087e8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80087ec:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80087f0:	bd10      	pop	{r4, pc}
 80087f2:	bf00      	nop
 80087f4:	20000090 	.word	0x20000090
 80087f8:	0800bef0 	.word	0x0800bef0
 80087fc:	0800bf07 	.word	0x0800bf07
 8008800:	abcd330e 	.word	0xabcd330e
 8008804:	e66d1234 	.word	0xe66d1234
 8008808:	0005deec 	.word	0x0005deec
 800880c:	5851f42d 	.word	0x5851f42d
 8008810:	4c957f2d 	.word	0x4c957f2d

08008814 <__utoa>:
 8008814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008816:	4c1f      	ldr	r4, [pc, #124]	; (8008894 <__utoa+0x80>)
 8008818:	b08b      	sub	sp, #44	; 0x2c
 800881a:	4605      	mov	r5, r0
 800881c:	460b      	mov	r3, r1
 800881e:	466e      	mov	r6, sp
 8008820:	f104 0c20 	add.w	ip, r4, #32
 8008824:	6820      	ldr	r0, [r4, #0]
 8008826:	6861      	ldr	r1, [r4, #4]
 8008828:	4637      	mov	r7, r6
 800882a:	c703      	stmia	r7!, {r0, r1}
 800882c:	3408      	adds	r4, #8
 800882e:	4564      	cmp	r4, ip
 8008830:	463e      	mov	r6, r7
 8008832:	d1f7      	bne.n	8008824 <__utoa+0x10>
 8008834:	7921      	ldrb	r1, [r4, #4]
 8008836:	7139      	strb	r1, [r7, #4]
 8008838:	1e91      	subs	r1, r2, #2
 800883a:	6820      	ldr	r0, [r4, #0]
 800883c:	6038      	str	r0, [r7, #0]
 800883e:	2922      	cmp	r1, #34	; 0x22
 8008840:	f04f 0100 	mov.w	r1, #0
 8008844:	d904      	bls.n	8008850 <__utoa+0x3c>
 8008846:	7019      	strb	r1, [r3, #0]
 8008848:	460b      	mov	r3, r1
 800884a:	4618      	mov	r0, r3
 800884c:	b00b      	add	sp, #44	; 0x2c
 800884e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008850:	1e58      	subs	r0, r3, #1
 8008852:	4684      	mov	ip, r0
 8008854:	fbb5 f7f2 	udiv	r7, r5, r2
 8008858:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800885c:	fb02 5617 	mls	r6, r2, r7, r5
 8008860:	4476      	add	r6, lr
 8008862:	460c      	mov	r4, r1
 8008864:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008868:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800886c:	462e      	mov	r6, r5
 800886e:	42b2      	cmp	r2, r6
 8008870:	f101 0101 	add.w	r1, r1, #1
 8008874:	463d      	mov	r5, r7
 8008876:	d9ed      	bls.n	8008854 <__utoa+0x40>
 8008878:	2200      	movs	r2, #0
 800887a:	545a      	strb	r2, [r3, r1]
 800887c:	1919      	adds	r1, r3, r4
 800887e:	1aa5      	subs	r5, r4, r2
 8008880:	42aa      	cmp	r2, r5
 8008882:	dae2      	bge.n	800884a <__utoa+0x36>
 8008884:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008888:	780e      	ldrb	r6, [r1, #0]
 800888a:	7006      	strb	r6, [r0, #0]
 800888c:	3201      	adds	r2, #1
 800888e:	f801 5901 	strb.w	r5, [r1], #-1
 8008892:	e7f4      	b.n	800887e <__utoa+0x6a>
 8008894:	0800bf66 	.word	0x0800bf66

08008898 <__assert_func>:
 8008898:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800889a:	4614      	mov	r4, r2
 800889c:	461a      	mov	r2, r3
 800889e:	4b09      	ldr	r3, [pc, #36]	; (80088c4 <__assert_func+0x2c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4605      	mov	r5, r0
 80088a4:	68d8      	ldr	r0, [r3, #12]
 80088a6:	b14c      	cbz	r4, 80088bc <__assert_func+0x24>
 80088a8:	4b07      	ldr	r3, [pc, #28]	; (80088c8 <__assert_func+0x30>)
 80088aa:	9100      	str	r1, [sp, #0]
 80088ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088b0:	4906      	ldr	r1, [pc, #24]	; (80088cc <__assert_func+0x34>)
 80088b2:	462b      	mov	r3, r5
 80088b4:	f000 f80e 	bl	80088d4 <fiprintf>
 80088b8:	f000 fc8e 	bl	80091d8 <abort>
 80088bc:	4b04      	ldr	r3, [pc, #16]	; (80088d0 <__assert_func+0x38>)
 80088be:	461c      	mov	r4, r3
 80088c0:	e7f3      	b.n	80088aa <__assert_func+0x12>
 80088c2:	bf00      	nop
 80088c4:	20000090 	.word	0x20000090
 80088c8:	0800bf8b 	.word	0x0800bf8b
 80088cc:	0800bf98 	.word	0x0800bf98
 80088d0:	0800bfc6 	.word	0x0800bfc6

080088d4 <fiprintf>:
 80088d4:	b40e      	push	{r1, r2, r3}
 80088d6:	b503      	push	{r0, r1, lr}
 80088d8:	4601      	mov	r1, r0
 80088da:	ab03      	add	r3, sp, #12
 80088dc:	4805      	ldr	r0, [pc, #20]	; (80088f4 <fiprintf+0x20>)
 80088de:	f853 2b04 	ldr.w	r2, [r3], #4
 80088e2:	6800      	ldr	r0, [r0, #0]
 80088e4:	9301      	str	r3, [sp, #4]
 80088e6:	f000 f8e3 	bl	8008ab0 <_vfiprintf_r>
 80088ea:	b002      	add	sp, #8
 80088ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80088f0:	b003      	add	sp, #12
 80088f2:	4770      	bx	lr
 80088f4:	20000090 	.word	0x20000090

080088f8 <malloc>:
 80088f8:	4b02      	ldr	r3, [pc, #8]	; (8008904 <malloc+0xc>)
 80088fa:	4601      	mov	r1, r0
 80088fc:	6818      	ldr	r0, [r3, #0]
 80088fe:	f000 b853 	b.w	80089a8 <_malloc_r>
 8008902:	bf00      	nop
 8008904:	20000090 	.word	0x20000090

08008908 <_free_r>:
 8008908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800890a:	2900      	cmp	r1, #0
 800890c:	d048      	beq.n	80089a0 <_free_r+0x98>
 800890e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008912:	9001      	str	r0, [sp, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	f1a1 0404 	sub.w	r4, r1, #4
 800891a:	bfb8      	it	lt
 800891c:	18e4      	addlt	r4, r4, r3
 800891e:	f000 fe81 	bl	8009624 <__malloc_lock>
 8008922:	4a20      	ldr	r2, [pc, #128]	; (80089a4 <_free_r+0x9c>)
 8008924:	9801      	ldr	r0, [sp, #4]
 8008926:	6813      	ldr	r3, [r2, #0]
 8008928:	4615      	mov	r5, r2
 800892a:	b933      	cbnz	r3, 800893a <_free_r+0x32>
 800892c:	6063      	str	r3, [r4, #4]
 800892e:	6014      	str	r4, [r2, #0]
 8008930:	b003      	add	sp, #12
 8008932:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008936:	f000 be7b 	b.w	8009630 <__malloc_unlock>
 800893a:	42a3      	cmp	r3, r4
 800893c:	d90b      	bls.n	8008956 <_free_r+0x4e>
 800893e:	6821      	ldr	r1, [r4, #0]
 8008940:	1862      	adds	r2, r4, r1
 8008942:	4293      	cmp	r3, r2
 8008944:	bf04      	itt	eq
 8008946:	681a      	ldreq	r2, [r3, #0]
 8008948:	685b      	ldreq	r3, [r3, #4]
 800894a:	6063      	str	r3, [r4, #4]
 800894c:	bf04      	itt	eq
 800894e:	1852      	addeq	r2, r2, r1
 8008950:	6022      	streq	r2, [r4, #0]
 8008952:	602c      	str	r4, [r5, #0]
 8008954:	e7ec      	b.n	8008930 <_free_r+0x28>
 8008956:	461a      	mov	r2, r3
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	b10b      	cbz	r3, 8008960 <_free_r+0x58>
 800895c:	42a3      	cmp	r3, r4
 800895e:	d9fa      	bls.n	8008956 <_free_r+0x4e>
 8008960:	6811      	ldr	r1, [r2, #0]
 8008962:	1855      	adds	r5, r2, r1
 8008964:	42a5      	cmp	r5, r4
 8008966:	d10b      	bne.n	8008980 <_free_r+0x78>
 8008968:	6824      	ldr	r4, [r4, #0]
 800896a:	4421      	add	r1, r4
 800896c:	1854      	adds	r4, r2, r1
 800896e:	42a3      	cmp	r3, r4
 8008970:	6011      	str	r1, [r2, #0]
 8008972:	d1dd      	bne.n	8008930 <_free_r+0x28>
 8008974:	681c      	ldr	r4, [r3, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	6053      	str	r3, [r2, #4]
 800897a:	4421      	add	r1, r4
 800897c:	6011      	str	r1, [r2, #0]
 800897e:	e7d7      	b.n	8008930 <_free_r+0x28>
 8008980:	d902      	bls.n	8008988 <_free_r+0x80>
 8008982:	230c      	movs	r3, #12
 8008984:	6003      	str	r3, [r0, #0]
 8008986:	e7d3      	b.n	8008930 <_free_r+0x28>
 8008988:	6825      	ldr	r5, [r4, #0]
 800898a:	1961      	adds	r1, r4, r5
 800898c:	428b      	cmp	r3, r1
 800898e:	bf04      	itt	eq
 8008990:	6819      	ldreq	r1, [r3, #0]
 8008992:	685b      	ldreq	r3, [r3, #4]
 8008994:	6063      	str	r3, [r4, #4]
 8008996:	bf04      	itt	eq
 8008998:	1949      	addeq	r1, r1, r5
 800899a:	6021      	streq	r1, [r4, #0]
 800899c:	6054      	str	r4, [r2, #4]
 800899e:	e7c7      	b.n	8008930 <_free_r+0x28>
 80089a0:	b003      	add	sp, #12
 80089a2:	bd30      	pop	{r4, r5, pc}
 80089a4:	200004ec 	.word	0x200004ec

080089a8 <_malloc_r>:
 80089a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089aa:	1ccd      	adds	r5, r1, #3
 80089ac:	f025 0503 	bic.w	r5, r5, #3
 80089b0:	3508      	adds	r5, #8
 80089b2:	2d0c      	cmp	r5, #12
 80089b4:	bf38      	it	cc
 80089b6:	250c      	movcc	r5, #12
 80089b8:	2d00      	cmp	r5, #0
 80089ba:	4606      	mov	r6, r0
 80089bc:	db01      	blt.n	80089c2 <_malloc_r+0x1a>
 80089be:	42a9      	cmp	r1, r5
 80089c0:	d903      	bls.n	80089ca <_malloc_r+0x22>
 80089c2:	230c      	movs	r3, #12
 80089c4:	6033      	str	r3, [r6, #0]
 80089c6:	2000      	movs	r0, #0
 80089c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089ca:	f000 fe2b 	bl	8009624 <__malloc_lock>
 80089ce:	4921      	ldr	r1, [pc, #132]	; (8008a54 <_malloc_r+0xac>)
 80089d0:	680a      	ldr	r2, [r1, #0]
 80089d2:	4614      	mov	r4, r2
 80089d4:	b99c      	cbnz	r4, 80089fe <_malloc_r+0x56>
 80089d6:	4f20      	ldr	r7, [pc, #128]	; (8008a58 <_malloc_r+0xb0>)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	b923      	cbnz	r3, 80089e6 <_malloc_r+0x3e>
 80089dc:	4621      	mov	r1, r4
 80089de:	4630      	mov	r0, r6
 80089e0:	f000 fb2a 	bl	8009038 <_sbrk_r>
 80089e4:	6038      	str	r0, [r7, #0]
 80089e6:	4629      	mov	r1, r5
 80089e8:	4630      	mov	r0, r6
 80089ea:	f000 fb25 	bl	8009038 <_sbrk_r>
 80089ee:	1c43      	adds	r3, r0, #1
 80089f0:	d123      	bne.n	8008a3a <_malloc_r+0x92>
 80089f2:	230c      	movs	r3, #12
 80089f4:	6033      	str	r3, [r6, #0]
 80089f6:	4630      	mov	r0, r6
 80089f8:	f000 fe1a 	bl	8009630 <__malloc_unlock>
 80089fc:	e7e3      	b.n	80089c6 <_malloc_r+0x1e>
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	1b5b      	subs	r3, r3, r5
 8008a02:	d417      	bmi.n	8008a34 <_malloc_r+0x8c>
 8008a04:	2b0b      	cmp	r3, #11
 8008a06:	d903      	bls.n	8008a10 <_malloc_r+0x68>
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	441c      	add	r4, r3
 8008a0c:	6025      	str	r5, [r4, #0]
 8008a0e:	e004      	b.n	8008a1a <_malloc_r+0x72>
 8008a10:	6863      	ldr	r3, [r4, #4]
 8008a12:	42a2      	cmp	r2, r4
 8008a14:	bf0c      	ite	eq
 8008a16:	600b      	streq	r3, [r1, #0]
 8008a18:	6053      	strne	r3, [r2, #4]
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f000 fe08 	bl	8009630 <__malloc_unlock>
 8008a20:	f104 000b 	add.w	r0, r4, #11
 8008a24:	1d23      	adds	r3, r4, #4
 8008a26:	f020 0007 	bic.w	r0, r0, #7
 8008a2a:	1ac2      	subs	r2, r0, r3
 8008a2c:	d0cc      	beq.n	80089c8 <_malloc_r+0x20>
 8008a2e:	1a1b      	subs	r3, r3, r0
 8008a30:	50a3      	str	r3, [r4, r2]
 8008a32:	e7c9      	b.n	80089c8 <_malloc_r+0x20>
 8008a34:	4622      	mov	r2, r4
 8008a36:	6864      	ldr	r4, [r4, #4]
 8008a38:	e7cc      	b.n	80089d4 <_malloc_r+0x2c>
 8008a3a:	1cc4      	adds	r4, r0, #3
 8008a3c:	f024 0403 	bic.w	r4, r4, #3
 8008a40:	42a0      	cmp	r0, r4
 8008a42:	d0e3      	beq.n	8008a0c <_malloc_r+0x64>
 8008a44:	1a21      	subs	r1, r4, r0
 8008a46:	4630      	mov	r0, r6
 8008a48:	f000 faf6 	bl	8009038 <_sbrk_r>
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	d1dd      	bne.n	8008a0c <_malloc_r+0x64>
 8008a50:	e7cf      	b.n	80089f2 <_malloc_r+0x4a>
 8008a52:	bf00      	nop
 8008a54:	200004ec 	.word	0x200004ec
 8008a58:	200004f0 	.word	0x200004f0

08008a5c <__sfputc_r>:
 8008a5c:	6893      	ldr	r3, [r2, #8]
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	b410      	push	{r4}
 8008a64:	6093      	str	r3, [r2, #8]
 8008a66:	da08      	bge.n	8008a7a <__sfputc_r+0x1e>
 8008a68:	6994      	ldr	r4, [r2, #24]
 8008a6a:	42a3      	cmp	r3, r4
 8008a6c:	db01      	blt.n	8008a72 <__sfputc_r+0x16>
 8008a6e:	290a      	cmp	r1, #10
 8008a70:	d103      	bne.n	8008a7a <__sfputc_r+0x1e>
 8008a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a76:	f000 baef 	b.w	8009058 <__swbuf_r>
 8008a7a:	6813      	ldr	r3, [r2, #0]
 8008a7c:	1c58      	adds	r0, r3, #1
 8008a7e:	6010      	str	r0, [r2, #0]
 8008a80:	7019      	strb	r1, [r3, #0]
 8008a82:	4608      	mov	r0, r1
 8008a84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <__sfputs_r>:
 8008a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8c:	4606      	mov	r6, r0
 8008a8e:	460f      	mov	r7, r1
 8008a90:	4614      	mov	r4, r2
 8008a92:	18d5      	adds	r5, r2, r3
 8008a94:	42ac      	cmp	r4, r5
 8008a96:	d101      	bne.n	8008a9c <__sfputs_r+0x12>
 8008a98:	2000      	movs	r0, #0
 8008a9a:	e007      	b.n	8008aac <__sfputs_r+0x22>
 8008a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aa0:	463a      	mov	r2, r7
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f7ff ffda 	bl	8008a5c <__sfputc_r>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	d1f3      	bne.n	8008a94 <__sfputs_r+0xa>
 8008aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ab0 <_vfiprintf_r>:
 8008ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab4:	460d      	mov	r5, r1
 8008ab6:	b09d      	sub	sp, #116	; 0x74
 8008ab8:	4614      	mov	r4, r2
 8008aba:	4698      	mov	r8, r3
 8008abc:	4606      	mov	r6, r0
 8008abe:	b118      	cbz	r0, 8008ac8 <_vfiprintf_r+0x18>
 8008ac0:	6983      	ldr	r3, [r0, #24]
 8008ac2:	b90b      	cbnz	r3, 8008ac8 <_vfiprintf_r+0x18>
 8008ac4:	f000 fcaa 	bl	800941c <__sinit>
 8008ac8:	4b89      	ldr	r3, [pc, #548]	; (8008cf0 <_vfiprintf_r+0x240>)
 8008aca:	429d      	cmp	r5, r3
 8008acc:	d11b      	bne.n	8008b06 <_vfiprintf_r+0x56>
 8008ace:	6875      	ldr	r5, [r6, #4]
 8008ad0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ad2:	07d9      	lsls	r1, r3, #31
 8008ad4:	d405      	bmi.n	8008ae2 <_vfiprintf_r+0x32>
 8008ad6:	89ab      	ldrh	r3, [r5, #12]
 8008ad8:	059a      	lsls	r2, r3, #22
 8008ada:	d402      	bmi.n	8008ae2 <_vfiprintf_r+0x32>
 8008adc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ade:	f000 fd3b 	bl	8009558 <__retarget_lock_acquire_recursive>
 8008ae2:	89ab      	ldrh	r3, [r5, #12]
 8008ae4:	071b      	lsls	r3, r3, #28
 8008ae6:	d501      	bpl.n	8008aec <_vfiprintf_r+0x3c>
 8008ae8:	692b      	ldr	r3, [r5, #16]
 8008aea:	b9eb      	cbnz	r3, 8008b28 <_vfiprintf_r+0x78>
 8008aec:	4629      	mov	r1, r5
 8008aee:	4630      	mov	r0, r6
 8008af0:	f000 fb04 	bl	80090fc <__swsetup_r>
 8008af4:	b1c0      	cbz	r0, 8008b28 <_vfiprintf_r+0x78>
 8008af6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008af8:	07dc      	lsls	r4, r3, #31
 8008afa:	d50e      	bpl.n	8008b1a <_vfiprintf_r+0x6a>
 8008afc:	f04f 30ff 	mov.w	r0, #4294967295
 8008b00:	b01d      	add	sp, #116	; 0x74
 8008b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b06:	4b7b      	ldr	r3, [pc, #492]	; (8008cf4 <_vfiprintf_r+0x244>)
 8008b08:	429d      	cmp	r5, r3
 8008b0a:	d101      	bne.n	8008b10 <_vfiprintf_r+0x60>
 8008b0c:	68b5      	ldr	r5, [r6, #8]
 8008b0e:	e7df      	b.n	8008ad0 <_vfiprintf_r+0x20>
 8008b10:	4b79      	ldr	r3, [pc, #484]	; (8008cf8 <_vfiprintf_r+0x248>)
 8008b12:	429d      	cmp	r5, r3
 8008b14:	bf08      	it	eq
 8008b16:	68f5      	ldreq	r5, [r6, #12]
 8008b18:	e7da      	b.n	8008ad0 <_vfiprintf_r+0x20>
 8008b1a:	89ab      	ldrh	r3, [r5, #12]
 8008b1c:	0598      	lsls	r0, r3, #22
 8008b1e:	d4ed      	bmi.n	8008afc <_vfiprintf_r+0x4c>
 8008b20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b22:	f000 fd1a 	bl	800955a <__retarget_lock_release_recursive>
 8008b26:	e7e9      	b.n	8008afc <_vfiprintf_r+0x4c>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b2c:	2320      	movs	r3, #32
 8008b2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b32:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b36:	2330      	movs	r3, #48	; 0x30
 8008b38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008cfc <_vfiprintf_r+0x24c>
 8008b3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b40:	f04f 0901 	mov.w	r9, #1
 8008b44:	4623      	mov	r3, r4
 8008b46:	469a      	mov	sl, r3
 8008b48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b4c:	b10a      	cbz	r2, 8008b52 <_vfiprintf_r+0xa2>
 8008b4e:	2a25      	cmp	r2, #37	; 0x25
 8008b50:	d1f9      	bne.n	8008b46 <_vfiprintf_r+0x96>
 8008b52:	ebba 0b04 	subs.w	fp, sl, r4
 8008b56:	d00b      	beq.n	8008b70 <_vfiprintf_r+0xc0>
 8008b58:	465b      	mov	r3, fp
 8008b5a:	4622      	mov	r2, r4
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f7ff ff93 	bl	8008a8a <__sfputs_r>
 8008b64:	3001      	adds	r0, #1
 8008b66:	f000 80aa 	beq.w	8008cbe <_vfiprintf_r+0x20e>
 8008b6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b6c:	445a      	add	r2, fp
 8008b6e:	9209      	str	r2, [sp, #36]	; 0x24
 8008b70:	f89a 3000 	ldrb.w	r3, [sl]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f000 80a2 	beq.w	8008cbe <_vfiprintf_r+0x20e>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b84:	f10a 0a01 	add.w	sl, sl, #1
 8008b88:	9304      	str	r3, [sp, #16]
 8008b8a:	9307      	str	r3, [sp, #28]
 8008b8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b90:	931a      	str	r3, [sp, #104]	; 0x68
 8008b92:	4654      	mov	r4, sl
 8008b94:	2205      	movs	r2, #5
 8008b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b9a:	4858      	ldr	r0, [pc, #352]	; (8008cfc <_vfiprintf_r+0x24c>)
 8008b9c:	f7f7 fb28 	bl	80001f0 <memchr>
 8008ba0:	9a04      	ldr	r2, [sp, #16]
 8008ba2:	b9d8      	cbnz	r0, 8008bdc <_vfiprintf_r+0x12c>
 8008ba4:	06d1      	lsls	r1, r2, #27
 8008ba6:	bf44      	itt	mi
 8008ba8:	2320      	movmi	r3, #32
 8008baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bae:	0713      	lsls	r3, r2, #28
 8008bb0:	bf44      	itt	mi
 8008bb2:	232b      	movmi	r3, #43	; 0x2b
 8008bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8008bbe:	d015      	beq.n	8008bec <_vfiprintf_r+0x13c>
 8008bc0:	9a07      	ldr	r2, [sp, #28]
 8008bc2:	4654      	mov	r4, sl
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	f04f 0c0a 	mov.w	ip, #10
 8008bca:	4621      	mov	r1, r4
 8008bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bd0:	3b30      	subs	r3, #48	; 0x30
 8008bd2:	2b09      	cmp	r3, #9
 8008bd4:	d94e      	bls.n	8008c74 <_vfiprintf_r+0x1c4>
 8008bd6:	b1b0      	cbz	r0, 8008c06 <_vfiprintf_r+0x156>
 8008bd8:	9207      	str	r2, [sp, #28]
 8008bda:	e014      	b.n	8008c06 <_vfiprintf_r+0x156>
 8008bdc:	eba0 0308 	sub.w	r3, r0, r8
 8008be0:	fa09 f303 	lsl.w	r3, r9, r3
 8008be4:	4313      	orrs	r3, r2
 8008be6:	9304      	str	r3, [sp, #16]
 8008be8:	46a2      	mov	sl, r4
 8008bea:	e7d2      	b.n	8008b92 <_vfiprintf_r+0xe2>
 8008bec:	9b03      	ldr	r3, [sp, #12]
 8008bee:	1d19      	adds	r1, r3, #4
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	9103      	str	r1, [sp, #12]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bfbb      	ittet	lt
 8008bf8:	425b      	neglt	r3, r3
 8008bfa:	f042 0202 	orrlt.w	r2, r2, #2
 8008bfe:	9307      	strge	r3, [sp, #28]
 8008c00:	9307      	strlt	r3, [sp, #28]
 8008c02:	bfb8      	it	lt
 8008c04:	9204      	strlt	r2, [sp, #16]
 8008c06:	7823      	ldrb	r3, [r4, #0]
 8008c08:	2b2e      	cmp	r3, #46	; 0x2e
 8008c0a:	d10c      	bne.n	8008c26 <_vfiprintf_r+0x176>
 8008c0c:	7863      	ldrb	r3, [r4, #1]
 8008c0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c10:	d135      	bne.n	8008c7e <_vfiprintf_r+0x1ce>
 8008c12:	9b03      	ldr	r3, [sp, #12]
 8008c14:	1d1a      	adds	r2, r3, #4
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	9203      	str	r2, [sp, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	bfb8      	it	lt
 8008c1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c22:	3402      	adds	r4, #2
 8008c24:	9305      	str	r3, [sp, #20]
 8008c26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d0c <_vfiprintf_r+0x25c>
 8008c2a:	7821      	ldrb	r1, [r4, #0]
 8008c2c:	2203      	movs	r2, #3
 8008c2e:	4650      	mov	r0, sl
 8008c30:	f7f7 fade 	bl	80001f0 <memchr>
 8008c34:	b140      	cbz	r0, 8008c48 <_vfiprintf_r+0x198>
 8008c36:	2340      	movs	r3, #64	; 0x40
 8008c38:	eba0 000a 	sub.w	r0, r0, sl
 8008c3c:	fa03 f000 	lsl.w	r0, r3, r0
 8008c40:	9b04      	ldr	r3, [sp, #16]
 8008c42:	4303      	orrs	r3, r0
 8008c44:	3401      	adds	r4, #1
 8008c46:	9304      	str	r3, [sp, #16]
 8008c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c4c:	482c      	ldr	r0, [pc, #176]	; (8008d00 <_vfiprintf_r+0x250>)
 8008c4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c52:	2206      	movs	r2, #6
 8008c54:	f7f7 facc 	bl	80001f0 <memchr>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d03f      	beq.n	8008cdc <_vfiprintf_r+0x22c>
 8008c5c:	4b29      	ldr	r3, [pc, #164]	; (8008d04 <_vfiprintf_r+0x254>)
 8008c5e:	bb1b      	cbnz	r3, 8008ca8 <_vfiprintf_r+0x1f8>
 8008c60:	9b03      	ldr	r3, [sp, #12]
 8008c62:	3307      	adds	r3, #7
 8008c64:	f023 0307 	bic.w	r3, r3, #7
 8008c68:	3308      	adds	r3, #8
 8008c6a:	9303      	str	r3, [sp, #12]
 8008c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c6e:	443b      	add	r3, r7
 8008c70:	9309      	str	r3, [sp, #36]	; 0x24
 8008c72:	e767      	b.n	8008b44 <_vfiprintf_r+0x94>
 8008c74:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c78:	460c      	mov	r4, r1
 8008c7a:	2001      	movs	r0, #1
 8008c7c:	e7a5      	b.n	8008bca <_vfiprintf_r+0x11a>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	3401      	adds	r4, #1
 8008c82:	9305      	str	r3, [sp, #20]
 8008c84:	4619      	mov	r1, r3
 8008c86:	f04f 0c0a 	mov.w	ip, #10
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c90:	3a30      	subs	r2, #48	; 0x30
 8008c92:	2a09      	cmp	r2, #9
 8008c94:	d903      	bls.n	8008c9e <_vfiprintf_r+0x1ee>
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d0c5      	beq.n	8008c26 <_vfiprintf_r+0x176>
 8008c9a:	9105      	str	r1, [sp, #20]
 8008c9c:	e7c3      	b.n	8008c26 <_vfiprintf_r+0x176>
 8008c9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e7f0      	b.n	8008c8a <_vfiprintf_r+0x1da>
 8008ca8:	ab03      	add	r3, sp, #12
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	462a      	mov	r2, r5
 8008cae:	4b16      	ldr	r3, [pc, #88]	; (8008d08 <_vfiprintf_r+0x258>)
 8008cb0:	a904      	add	r1, sp, #16
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f3af 8000 	nop.w
 8008cb8:	4607      	mov	r7, r0
 8008cba:	1c78      	adds	r0, r7, #1
 8008cbc:	d1d6      	bne.n	8008c6c <_vfiprintf_r+0x1bc>
 8008cbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cc0:	07d9      	lsls	r1, r3, #31
 8008cc2:	d405      	bmi.n	8008cd0 <_vfiprintf_r+0x220>
 8008cc4:	89ab      	ldrh	r3, [r5, #12]
 8008cc6:	059a      	lsls	r2, r3, #22
 8008cc8:	d402      	bmi.n	8008cd0 <_vfiprintf_r+0x220>
 8008cca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ccc:	f000 fc45 	bl	800955a <__retarget_lock_release_recursive>
 8008cd0:	89ab      	ldrh	r3, [r5, #12]
 8008cd2:	065b      	lsls	r3, r3, #25
 8008cd4:	f53f af12 	bmi.w	8008afc <_vfiprintf_r+0x4c>
 8008cd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cda:	e711      	b.n	8008b00 <_vfiprintf_r+0x50>
 8008cdc:	ab03      	add	r3, sp, #12
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	462a      	mov	r2, r5
 8008ce2:	4b09      	ldr	r3, [pc, #36]	; (8008d08 <_vfiprintf_r+0x258>)
 8008ce4:	a904      	add	r1, sp, #16
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	f000 f880 	bl	8008dec <_printf_i>
 8008cec:	e7e4      	b.n	8008cb8 <_vfiprintf_r+0x208>
 8008cee:	bf00      	nop
 8008cf0:	0800c01c 	.word	0x0800c01c
 8008cf4:	0800c03c 	.word	0x0800c03c
 8008cf8:	0800bffc 	.word	0x0800bffc
 8008cfc:	0800bfc7 	.word	0x0800bfc7
 8008d00:	0800bfd1 	.word	0x0800bfd1
 8008d04:	00000000 	.word	0x00000000
 8008d08:	08008a8b 	.word	0x08008a8b
 8008d0c:	0800bfcd 	.word	0x0800bfcd

08008d10 <_printf_common>:
 8008d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d14:	4616      	mov	r6, r2
 8008d16:	4699      	mov	r9, r3
 8008d18:	688a      	ldr	r2, [r1, #8]
 8008d1a:	690b      	ldr	r3, [r1, #16]
 8008d1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d20:	4293      	cmp	r3, r2
 8008d22:	bfb8      	it	lt
 8008d24:	4613      	movlt	r3, r2
 8008d26:	6033      	str	r3, [r6, #0]
 8008d28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d2c:	4607      	mov	r7, r0
 8008d2e:	460c      	mov	r4, r1
 8008d30:	b10a      	cbz	r2, 8008d36 <_printf_common+0x26>
 8008d32:	3301      	adds	r3, #1
 8008d34:	6033      	str	r3, [r6, #0]
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	0699      	lsls	r1, r3, #26
 8008d3a:	bf42      	ittt	mi
 8008d3c:	6833      	ldrmi	r3, [r6, #0]
 8008d3e:	3302      	addmi	r3, #2
 8008d40:	6033      	strmi	r3, [r6, #0]
 8008d42:	6825      	ldr	r5, [r4, #0]
 8008d44:	f015 0506 	ands.w	r5, r5, #6
 8008d48:	d106      	bne.n	8008d58 <_printf_common+0x48>
 8008d4a:	f104 0a19 	add.w	sl, r4, #25
 8008d4e:	68e3      	ldr	r3, [r4, #12]
 8008d50:	6832      	ldr	r2, [r6, #0]
 8008d52:	1a9b      	subs	r3, r3, r2
 8008d54:	42ab      	cmp	r3, r5
 8008d56:	dc26      	bgt.n	8008da6 <_printf_common+0x96>
 8008d58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d5c:	1e13      	subs	r3, r2, #0
 8008d5e:	6822      	ldr	r2, [r4, #0]
 8008d60:	bf18      	it	ne
 8008d62:	2301      	movne	r3, #1
 8008d64:	0692      	lsls	r2, r2, #26
 8008d66:	d42b      	bmi.n	8008dc0 <_printf_common+0xb0>
 8008d68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d6c:	4649      	mov	r1, r9
 8008d6e:	4638      	mov	r0, r7
 8008d70:	47c0      	blx	r8
 8008d72:	3001      	adds	r0, #1
 8008d74:	d01e      	beq.n	8008db4 <_printf_common+0xa4>
 8008d76:	6823      	ldr	r3, [r4, #0]
 8008d78:	68e5      	ldr	r5, [r4, #12]
 8008d7a:	6832      	ldr	r2, [r6, #0]
 8008d7c:	f003 0306 	and.w	r3, r3, #6
 8008d80:	2b04      	cmp	r3, #4
 8008d82:	bf08      	it	eq
 8008d84:	1aad      	subeq	r5, r5, r2
 8008d86:	68a3      	ldr	r3, [r4, #8]
 8008d88:	6922      	ldr	r2, [r4, #16]
 8008d8a:	bf0c      	ite	eq
 8008d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d90:	2500      	movne	r5, #0
 8008d92:	4293      	cmp	r3, r2
 8008d94:	bfc4      	itt	gt
 8008d96:	1a9b      	subgt	r3, r3, r2
 8008d98:	18ed      	addgt	r5, r5, r3
 8008d9a:	2600      	movs	r6, #0
 8008d9c:	341a      	adds	r4, #26
 8008d9e:	42b5      	cmp	r5, r6
 8008da0:	d11a      	bne.n	8008dd8 <_printf_common+0xc8>
 8008da2:	2000      	movs	r0, #0
 8008da4:	e008      	b.n	8008db8 <_printf_common+0xa8>
 8008da6:	2301      	movs	r3, #1
 8008da8:	4652      	mov	r2, sl
 8008daa:	4649      	mov	r1, r9
 8008dac:	4638      	mov	r0, r7
 8008dae:	47c0      	blx	r8
 8008db0:	3001      	adds	r0, #1
 8008db2:	d103      	bne.n	8008dbc <_printf_common+0xac>
 8008db4:	f04f 30ff 	mov.w	r0, #4294967295
 8008db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dbc:	3501      	adds	r5, #1
 8008dbe:	e7c6      	b.n	8008d4e <_printf_common+0x3e>
 8008dc0:	18e1      	adds	r1, r4, r3
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	2030      	movs	r0, #48	; 0x30
 8008dc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008dca:	4422      	add	r2, r4
 8008dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008dd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008dd4:	3302      	adds	r3, #2
 8008dd6:	e7c7      	b.n	8008d68 <_printf_common+0x58>
 8008dd8:	2301      	movs	r3, #1
 8008dda:	4622      	mov	r2, r4
 8008ddc:	4649      	mov	r1, r9
 8008dde:	4638      	mov	r0, r7
 8008de0:	47c0      	blx	r8
 8008de2:	3001      	adds	r0, #1
 8008de4:	d0e6      	beq.n	8008db4 <_printf_common+0xa4>
 8008de6:	3601      	adds	r6, #1
 8008de8:	e7d9      	b.n	8008d9e <_printf_common+0x8e>
	...

08008dec <_printf_i>:
 8008dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008df0:	460c      	mov	r4, r1
 8008df2:	4691      	mov	r9, r2
 8008df4:	7e27      	ldrb	r7, [r4, #24]
 8008df6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008df8:	2f78      	cmp	r7, #120	; 0x78
 8008dfa:	4680      	mov	r8, r0
 8008dfc:	469a      	mov	sl, r3
 8008dfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e02:	d807      	bhi.n	8008e14 <_printf_i+0x28>
 8008e04:	2f62      	cmp	r7, #98	; 0x62
 8008e06:	d80a      	bhi.n	8008e1e <_printf_i+0x32>
 8008e08:	2f00      	cmp	r7, #0
 8008e0a:	f000 80d8 	beq.w	8008fbe <_printf_i+0x1d2>
 8008e0e:	2f58      	cmp	r7, #88	; 0x58
 8008e10:	f000 80a3 	beq.w	8008f5a <_printf_i+0x16e>
 8008e14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008e18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e1c:	e03a      	b.n	8008e94 <_printf_i+0xa8>
 8008e1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e22:	2b15      	cmp	r3, #21
 8008e24:	d8f6      	bhi.n	8008e14 <_printf_i+0x28>
 8008e26:	a001      	add	r0, pc, #4	; (adr r0, 8008e2c <_printf_i+0x40>)
 8008e28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008e2c:	08008e85 	.word	0x08008e85
 8008e30:	08008e99 	.word	0x08008e99
 8008e34:	08008e15 	.word	0x08008e15
 8008e38:	08008e15 	.word	0x08008e15
 8008e3c:	08008e15 	.word	0x08008e15
 8008e40:	08008e15 	.word	0x08008e15
 8008e44:	08008e99 	.word	0x08008e99
 8008e48:	08008e15 	.word	0x08008e15
 8008e4c:	08008e15 	.word	0x08008e15
 8008e50:	08008e15 	.word	0x08008e15
 8008e54:	08008e15 	.word	0x08008e15
 8008e58:	08008fa5 	.word	0x08008fa5
 8008e5c:	08008ec9 	.word	0x08008ec9
 8008e60:	08008f87 	.word	0x08008f87
 8008e64:	08008e15 	.word	0x08008e15
 8008e68:	08008e15 	.word	0x08008e15
 8008e6c:	08008fc7 	.word	0x08008fc7
 8008e70:	08008e15 	.word	0x08008e15
 8008e74:	08008ec9 	.word	0x08008ec9
 8008e78:	08008e15 	.word	0x08008e15
 8008e7c:	08008e15 	.word	0x08008e15
 8008e80:	08008f8f 	.word	0x08008f8f
 8008e84:	680b      	ldr	r3, [r1, #0]
 8008e86:	1d1a      	adds	r2, r3, #4
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	600a      	str	r2, [r1, #0]
 8008e8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008e90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e94:	2301      	movs	r3, #1
 8008e96:	e0a3      	b.n	8008fe0 <_printf_i+0x1f4>
 8008e98:	6825      	ldr	r5, [r4, #0]
 8008e9a:	6808      	ldr	r0, [r1, #0]
 8008e9c:	062e      	lsls	r6, r5, #24
 8008e9e:	f100 0304 	add.w	r3, r0, #4
 8008ea2:	d50a      	bpl.n	8008eba <_printf_i+0xce>
 8008ea4:	6805      	ldr	r5, [r0, #0]
 8008ea6:	600b      	str	r3, [r1, #0]
 8008ea8:	2d00      	cmp	r5, #0
 8008eaa:	da03      	bge.n	8008eb4 <_printf_i+0xc8>
 8008eac:	232d      	movs	r3, #45	; 0x2d
 8008eae:	426d      	negs	r5, r5
 8008eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eb4:	485e      	ldr	r0, [pc, #376]	; (8009030 <_printf_i+0x244>)
 8008eb6:	230a      	movs	r3, #10
 8008eb8:	e019      	b.n	8008eee <_printf_i+0x102>
 8008eba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008ebe:	6805      	ldr	r5, [r0, #0]
 8008ec0:	600b      	str	r3, [r1, #0]
 8008ec2:	bf18      	it	ne
 8008ec4:	b22d      	sxthne	r5, r5
 8008ec6:	e7ef      	b.n	8008ea8 <_printf_i+0xbc>
 8008ec8:	680b      	ldr	r3, [r1, #0]
 8008eca:	6825      	ldr	r5, [r4, #0]
 8008ecc:	1d18      	adds	r0, r3, #4
 8008ece:	6008      	str	r0, [r1, #0]
 8008ed0:	0628      	lsls	r0, r5, #24
 8008ed2:	d501      	bpl.n	8008ed8 <_printf_i+0xec>
 8008ed4:	681d      	ldr	r5, [r3, #0]
 8008ed6:	e002      	b.n	8008ede <_printf_i+0xf2>
 8008ed8:	0669      	lsls	r1, r5, #25
 8008eda:	d5fb      	bpl.n	8008ed4 <_printf_i+0xe8>
 8008edc:	881d      	ldrh	r5, [r3, #0]
 8008ede:	4854      	ldr	r0, [pc, #336]	; (8009030 <_printf_i+0x244>)
 8008ee0:	2f6f      	cmp	r7, #111	; 0x6f
 8008ee2:	bf0c      	ite	eq
 8008ee4:	2308      	moveq	r3, #8
 8008ee6:	230a      	movne	r3, #10
 8008ee8:	2100      	movs	r1, #0
 8008eea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008eee:	6866      	ldr	r6, [r4, #4]
 8008ef0:	60a6      	str	r6, [r4, #8]
 8008ef2:	2e00      	cmp	r6, #0
 8008ef4:	bfa2      	ittt	ge
 8008ef6:	6821      	ldrge	r1, [r4, #0]
 8008ef8:	f021 0104 	bicge.w	r1, r1, #4
 8008efc:	6021      	strge	r1, [r4, #0]
 8008efe:	b90d      	cbnz	r5, 8008f04 <_printf_i+0x118>
 8008f00:	2e00      	cmp	r6, #0
 8008f02:	d04d      	beq.n	8008fa0 <_printf_i+0x1b4>
 8008f04:	4616      	mov	r6, r2
 8008f06:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f0a:	fb03 5711 	mls	r7, r3, r1, r5
 8008f0e:	5dc7      	ldrb	r7, [r0, r7]
 8008f10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f14:	462f      	mov	r7, r5
 8008f16:	42bb      	cmp	r3, r7
 8008f18:	460d      	mov	r5, r1
 8008f1a:	d9f4      	bls.n	8008f06 <_printf_i+0x11a>
 8008f1c:	2b08      	cmp	r3, #8
 8008f1e:	d10b      	bne.n	8008f38 <_printf_i+0x14c>
 8008f20:	6823      	ldr	r3, [r4, #0]
 8008f22:	07df      	lsls	r7, r3, #31
 8008f24:	d508      	bpl.n	8008f38 <_printf_i+0x14c>
 8008f26:	6923      	ldr	r3, [r4, #16]
 8008f28:	6861      	ldr	r1, [r4, #4]
 8008f2a:	4299      	cmp	r1, r3
 8008f2c:	bfde      	ittt	le
 8008f2e:	2330      	movle	r3, #48	; 0x30
 8008f30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f38:	1b92      	subs	r2, r2, r6
 8008f3a:	6122      	str	r2, [r4, #16]
 8008f3c:	f8cd a000 	str.w	sl, [sp]
 8008f40:	464b      	mov	r3, r9
 8008f42:	aa03      	add	r2, sp, #12
 8008f44:	4621      	mov	r1, r4
 8008f46:	4640      	mov	r0, r8
 8008f48:	f7ff fee2 	bl	8008d10 <_printf_common>
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	d14c      	bne.n	8008fea <_printf_i+0x1fe>
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295
 8008f54:	b004      	add	sp, #16
 8008f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f5a:	4835      	ldr	r0, [pc, #212]	; (8009030 <_printf_i+0x244>)
 8008f5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f60:	6823      	ldr	r3, [r4, #0]
 8008f62:	680e      	ldr	r6, [r1, #0]
 8008f64:	061f      	lsls	r7, r3, #24
 8008f66:	f856 5b04 	ldr.w	r5, [r6], #4
 8008f6a:	600e      	str	r6, [r1, #0]
 8008f6c:	d514      	bpl.n	8008f98 <_printf_i+0x1ac>
 8008f6e:	07d9      	lsls	r1, r3, #31
 8008f70:	bf44      	itt	mi
 8008f72:	f043 0320 	orrmi.w	r3, r3, #32
 8008f76:	6023      	strmi	r3, [r4, #0]
 8008f78:	b91d      	cbnz	r5, 8008f82 <_printf_i+0x196>
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	f023 0320 	bic.w	r3, r3, #32
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	2310      	movs	r3, #16
 8008f84:	e7b0      	b.n	8008ee8 <_printf_i+0xfc>
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	f043 0320 	orr.w	r3, r3, #32
 8008f8c:	6023      	str	r3, [r4, #0]
 8008f8e:	2378      	movs	r3, #120	; 0x78
 8008f90:	4828      	ldr	r0, [pc, #160]	; (8009034 <_printf_i+0x248>)
 8008f92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f96:	e7e3      	b.n	8008f60 <_printf_i+0x174>
 8008f98:	065e      	lsls	r6, r3, #25
 8008f9a:	bf48      	it	mi
 8008f9c:	b2ad      	uxthmi	r5, r5
 8008f9e:	e7e6      	b.n	8008f6e <_printf_i+0x182>
 8008fa0:	4616      	mov	r6, r2
 8008fa2:	e7bb      	b.n	8008f1c <_printf_i+0x130>
 8008fa4:	680b      	ldr	r3, [r1, #0]
 8008fa6:	6826      	ldr	r6, [r4, #0]
 8008fa8:	6960      	ldr	r0, [r4, #20]
 8008faa:	1d1d      	adds	r5, r3, #4
 8008fac:	600d      	str	r5, [r1, #0]
 8008fae:	0635      	lsls	r5, r6, #24
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	d501      	bpl.n	8008fb8 <_printf_i+0x1cc>
 8008fb4:	6018      	str	r0, [r3, #0]
 8008fb6:	e002      	b.n	8008fbe <_printf_i+0x1d2>
 8008fb8:	0671      	lsls	r1, r6, #25
 8008fba:	d5fb      	bpl.n	8008fb4 <_printf_i+0x1c8>
 8008fbc:	8018      	strh	r0, [r3, #0]
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	6123      	str	r3, [r4, #16]
 8008fc2:	4616      	mov	r6, r2
 8008fc4:	e7ba      	b.n	8008f3c <_printf_i+0x150>
 8008fc6:	680b      	ldr	r3, [r1, #0]
 8008fc8:	1d1a      	adds	r2, r3, #4
 8008fca:	600a      	str	r2, [r1, #0]
 8008fcc:	681e      	ldr	r6, [r3, #0]
 8008fce:	6862      	ldr	r2, [r4, #4]
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	f7f7 f90c 	bl	80001f0 <memchr>
 8008fd8:	b108      	cbz	r0, 8008fde <_printf_i+0x1f2>
 8008fda:	1b80      	subs	r0, r0, r6
 8008fdc:	6060      	str	r0, [r4, #4]
 8008fde:	6863      	ldr	r3, [r4, #4]
 8008fe0:	6123      	str	r3, [r4, #16]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fe8:	e7a8      	b.n	8008f3c <_printf_i+0x150>
 8008fea:	6923      	ldr	r3, [r4, #16]
 8008fec:	4632      	mov	r2, r6
 8008fee:	4649      	mov	r1, r9
 8008ff0:	4640      	mov	r0, r8
 8008ff2:	47d0      	blx	sl
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	d0ab      	beq.n	8008f50 <_printf_i+0x164>
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	079b      	lsls	r3, r3, #30
 8008ffc:	d413      	bmi.n	8009026 <_printf_i+0x23a>
 8008ffe:	68e0      	ldr	r0, [r4, #12]
 8009000:	9b03      	ldr	r3, [sp, #12]
 8009002:	4298      	cmp	r0, r3
 8009004:	bfb8      	it	lt
 8009006:	4618      	movlt	r0, r3
 8009008:	e7a4      	b.n	8008f54 <_printf_i+0x168>
 800900a:	2301      	movs	r3, #1
 800900c:	4632      	mov	r2, r6
 800900e:	4649      	mov	r1, r9
 8009010:	4640      	mov	r0, r8
 8009012:	47d0      	blx	sl
 8009014:	3001      	adds	r0, #1
 8009016:	d09b      	beq.n	8008f50 <_printf_i+0x164>
 8009018:	3501      	adds	r5, #1
 800901a:	68e3      	ldr	r3, [r4, #12]
 800901c:	9903      	ldr	r1, [sp, #12]
 800901e:	1a5b      	subs	r3, r3, r1
 8009020:	42ab      	cmp	r3, r5
 8009022:	dcf2      	bgt.n	800900a <_printf_i+0x21e>
 8009024:	e7eb      	b.n	8008ffe <_printf_i+0x212>
 8009026:	2500      	movs	r5, #0
 8009028:	f104 0619 	add.w	r6, r4, #25
 800902c:	e7f5      	b.n	800901a <_printf_i+0x22e>
 800902e:	bf00      	nop
 8009030:	0800bfd8 	.word	0x0800bfd8
 8009034:	0800bfe9 	.word	0x0800bfe9

08009038 <_sbrk_r>:
 8009038:	b538      	push	{r3, r4, r5, lr}
 800903a:	4d06      	ldr	r5, [pc, #24]	; (8009054 <_sbrk_r+0x1c>)
 800903c:	2300      	movs	r3, #0
 800903e:	4604      	mov	r4, r0
 8009040:	4608      	mov	r0, r1
 8009042:	602b      	str	r3, [r5, #0]
 8009044:	f7f8 fb5e 	bl	8001704 <_sbrk>
 8009048:	1c43      	adds	r3, r0, #1
 800904a:	d102      	bne.n	8009052 <_sbrk_r+0x1a>
 800904c:	682b      	ldr	r3, [r5, #0]
 800904e:	b103      	cbz	r3, 8009052 <_sbrk_r+0x1a>
 8009050:	6023      	str	r3, [r4, #0]
 8009052:	bd38      	pop	{r3, r4, r5, pc}
 8009054:	20000700 	.word	0x20000700

08009058 <__swbuf_r>:
 8009058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905a:	460e      	mov	r6, r1
 800905c:	4614      	mov	r4, r2
 800905e:	4605      	mov	r5, r0
 8009060:	b118      	cbz	r0, 800906a <__swbuf_r+0x12>
 8009062:	6983      	ldr	r3, [r0, #24]
 8009064:	b90b      	cbnz	r3, 800906a <__swbuf_r+0x12>
 8009066:	f000 f9d9 	bl	800941c <__sinit>
 800906a:	4b21      	ldr	r3, [pc, #132]	; (80090f0 <__swbuf_r+0x98>)
 800906c:	429c      	cmp	r4, r3
 800906e:	d12b      	bne.n	80090c8 <__swbuf_r+0x70>
 8009070:	686c      	ldr	r4, [r5, #4]
 8009072:	69a3      	ldr	r3, [r4, #24]
 8009074:	60a3      	str	r3, [r4, #8]
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	071a      	lsls	r2, r3, #28
 800907a:	d52f      	bpl.n	80090dc <__swbuf_r+0x84>
 800907c:	6923      	ldr	r3, [r4, #16]
 800907e:	b36b      	cbz	r3, 80090dc <__swbuf_r+0x84>
 8009080:	6923      	ldr	r3, [r4, #16]
 8009082:	6820      	ldr	r0, [r4, #0]
 8009084:	1ac0      	subs	r0, r0, r3
 8009086:	6963      	ldr	r3, [r4, #20]
 8009088:	b2f6      	uxtb	r6, r6
 800908a:	4283      	cmp	r3, r0
 800908c:	4637      	mov	r7, r6
 800908e:	dc04      	bgt.n	800909a <__swbuf_r+0x42>
 8009090:	4621      	mov	r1, r4
 8009092:	4628      	mov	r0, r5
 8009094:	f000 f92e 	bl	80092f4 <_fflush_r>
 8009098:	bb30      	cbnz	r0, 80090e8 <__swbuf_r+0x90>
 800909a:	68a3      	ldr	r3, [r4, #8]
 800909c:	3b01      	subs	r3, #1
 800909e:	60a3      	str	r3, [r4, #8]
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	1c5a      	adds	r2, r3, #1
 80090a4:	6022      	str	r2, [r4, #0]
 80090a6:	701e      	strb	r6, [r3, #0]
 80090a8:	6963      	ldr	r3, [r4, #20]
 80090aa:	3001      	adds	r0, #1
 80090ac:	4283      	cmp	r3, r0
 80090ae:	d004      	beq.n	80090ba <__swbuf_r+0x62>
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	07db      	lsls	r3, r3, #31
 80090b4:	d506      	bpl.n	80090c4 <__swbuf_r+0x6c>
 80090b6:	2e0a      	cmp	r6, #10
 80090b8:	d104      	bne.n	80090c4 <__swbuf_r+0x6c>
 80090ba:	4621      	mov	r1, r4
 80090bc:	4628      	mov	r0, r5
 80090be:	f000 f919 	bl	80092f4 <_fflush_r>
 80090c2:	b988      	cbnz	r0, 80090e8 <__swbuf_r+0x90>
 80090c4:	4638      	mov	r0, r7
 80090c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c8:	4b0a      	ldr	r3, [pc, #40]	; (80090f4 <__swbuf_r+0x9c>)
 80090ca:	429c      	cmp	r4, r3
 80090cc:	d101      	bne.n	80090d2 <__swbuf_r+0x7a>
 80090ce:	68ac      	ldr	r4, [r5, #8]
 80090d0:	e7cf      	b.n	8009072 <__swbuf_r+0x1a>
 80090d2:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <__swbuf_r+0xa0>)
 80090d4:	429c      	cmp	r4, r3
 80090d6:	bf08      	it	eq
 80090d8:	68ec      	ldreq	r4, [r5, #12]
 80090da:	e7ca      	b.n	8009072 <__swbuf_r+0x1a>
 80090dc:	4621      	mov	r1, r4
 80090de:	4628      	mov	r0, r5
 80090e0:	f000 f80c 	bl	80090fc <__swsetup_r>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	d0cb      	beq.n	8009080 <__swbuf_r+0x28>
 80090e8:	f04f 37ff 	mov.w	r7, #4294967295
 80090ec:	e7ea      	b.n	80090c4 <__swbuf_r+0x6c>
 80090ee:	bf00      	nop
 80090f0:	0800c01c 	.word	0x0800c01c
 80090f4:	0800c03c 	.word	0x0800c03c
 80090f8:	0800bffc 	.word	0x0800bffc

080090fc <__swsetup_r>:
 80090fc:	4b32      	ldr	r3, [pc, #200]	; (80091c8 <__swsetup_r+0xcc>)
 80090fe:	b570      	push	{r4, r5, r6, lr}
 8009100:	681d      	ldr	r5, [r3, #0]
 8009102:	4606      	mov	r6, r0
 8009104:	460c      	mov	r4, r1
 8009106:	b125      	cbz	r5, 8009112 <__swsetup_r+0x16>
 8009108:	69ab      	ldr	r3, [r5, #24]
 800910a:	b913      	cbnz	r3, 8009112 <__swsetup_r+0x16>
 800910c:	4628      	mov	r0, r5
 800910e:	f000 f985 	bl	800941c <__sinit>
 8009112:	4b2e      	ldr	r3, [pc, #184]	; (80091cc <__swsetup_r+0xd0>)
 8009114:	429c      	cmp	r4, r3
 8009116:	d10f      	bne.n	8009138 <__swsetup_r+0x3c>
 8009118:	686c      	ldr	r4, [r5, #4]
 800911a:	89a3      	ldrh	r3, [r4, #12]
 800911c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009120:	0719      	lsls	r1, r3, #28
 8009122:	d42c      	bmi.n	800917e <__swsetup_r+0x82>
 8009124:	06dd      	lsls	r5, r3, #27
 8009126:	d411      	bmi.n	800914c <__swsetup_r+0x50>
 8009128:	2309      	movs	r3, #9
 800912a:	6033      	str	r3, [r6, #0]
 800912c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009130:	81a3      	strh	r3, [r4, #12]
 8009132:	f04f 30ff 	mov.w	r0, #4294967295
 8009136:	e03e      	b.n	80091b6 <__swsetup_r+0xba>
 8009138:	4b25      	ldr	r3, [pc, #148]	; (80091d0 <__swsetup_r+0xd4>)
 800913a:	429c      	cmp	r4, r3
 800913c:	d101      	bne.n	8009142 <__swsetup_r+0x46>
 800913e:	68ac      	ldr	r4, [r5, #8]
 8009140:	e7eb      	b.n	800911a <__swsetup_r+0x1e>
 8009142:	4b24      	ldr	r3, [pc, #144]	; (80091d4 <__swsetup_r+0xd8>)
 8009144:	429c      	cmp	r4, r3
 8009146:	bf08      	it	eq
 8009148:	68ec      	ldreq	r4, [r5, #12]
 800914a:	e7e6      	b.n	800911a <__swsetup_r+0x1e>
 800914c:	0758      	lsls	r0, r3, #29
 800914e:	d512      	bpl.n	8009176 <__swsetup_r+0x7a>
 8009150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009152:	b141      	cbz	r1, 8009166 <__swsetup_r+0x6a>
 8009154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009158:	4299      	cmp	r1, r3
 800915a:	d002      	beq.n	8009162 <__swsetup_r+0x66>
 800915c:	4630      	mov	r0, r6
 800915e:	f7ff fbd3 	bl	8008908 <_free_r>
 8009162:	2300      	movs	r3, #0
 8009164:	6363      	str	r3, [r4, #52]	; 0x34
 8009166:	89a3      	ldrh	r3, [r4, #12]
 8009168:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800916c:	81a3      	strh	r3, [r4, #12]
 800916e:	2300      	movs	r3, #0
 8009170:	6063      	str	r3, [r4, #4]
 8009172:	6923      	ldr	r3, [r4, #16]
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	89a3      	ldrh	r3, [r4, #12]
 8009178:	f043 0308 	orr.w	r3, r3, #8
 800917c:	81a3      	strh	r3, [r4, #12]
 800917e:	6923      	ldr	r3, [r4, #16]
 8009180:	b94b      	cbnz	r3, 8009196 <__swsetup_r+0x9a>
 8009182:	89a3      	ldrh	r3, [r4, #12]
 8009184:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800918c:	d003      	beq.n	8009196 <__swsetup_r+0x9a>
 800918e:	4621      	mov	r1, r4
 8009190:	4630      	mov	r0, r6
 8009192:	f000 fa07 	bl	80095a4 <__smakebuf_r>
 8009196:	89a0      	ldrh	r0, [r4, #12]
 8009198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800919c:	f010 0301 	ands.w	r3, r0, #1
 80091a0:	d00a      	beq.n	80091b8 <__swsetup_r+0xbc>
 80091a2:	2300      	movs	r3, #0
 80091a4:	60a3      	str	r3, [r4, #8]
 80091a6:	6963      	ldr	r3, [r4, #20]
 80091a8:	425b      	negs	r3, r3
 80091aa:	61a3      	str	r3, [r4, #24]
 80091ac:	6923      	ldr	r3, [r4, #16]
 80091ae:	b943      	cbnz	r3, 80091c2 <__swsetup_r+0xc6>
 80091b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091b4:	d1ba      	bne.n	800912c <__swsetup_r+0x30>
 80091b6:	bd70      	pop	{r4, r5, r6, pc}
 80091b8:	0781      	lsls	r1, r0, #30
 80091ba:	bf58      	it	pl
 80091bc:	6963      	ldrpl	r3, [r4, #20]
 80091be:	60a3      	str	r3, [r4, #8]
 80091c0:	e7f4      	b.n	80091ac <__swsetup_r+0xb0>
 80091c2:	2000      	movs	r0, #0
 80091c4:	e7f7      	b.n	80091b6 <__swsetup_r+0xba>
 80091c6:	bf00      	nop
 80091c8:	20000090 	.word	0x20000090
 80091cc:	0800c01c 	.word	0x0800c01c
 80091d0:	0800c03c 	.word	0x0800c03c
 80091d4:	0800bffc 	.word	0x0800bffc

080091d8 <abort>:
 80091d8:	b508      	push	{r3, lr}
 80091da:	2006      	movs	r0, #6
 80091dc:	f000 fa56 	bl	800968c <raise>
 80091e0:	2001      	movs	r0, #1
 80091e2:	f7f8 fa17 	bl	8001614 <_exit>
	...

080091e8 <__sflush_r>:
 80091e8:	898a      	ldrh	r2, [r1, #12]
 80091ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ee:	4605      	mov	r5, r0
 80091f0:	0710      	lsls	r0, r2, #28
 80091f2:	460c      	mov	r4, r1
 80091f4:	d458      	bmi.n	80092a8 <__sflush_r+0xc0>
 80091f6:	684b      	ldr	r3, [r1, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	dc05      	bgt.n	8009208 <__sflush_r+0x20>
 80091fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091fe:	2b00      	cmp	r3, #0
 8009200:	dc02      	bgt.n	8009208 <__sflush_r+0x20>
 8009202:	2000      	movs	r0, #0
 8009204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800920a:	2e00      	cmp	r6, #0
 800920c:	d0f9      	beq.n	8009202 <__sflush_r+0x1a>
 800920e:	2300      	movs	r3, #0
 8009210:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009214:	682f      	ldr	r7, [r5, #0]
 8009216:	602b      	str	r3, [r5, #0]
 8009218:	d032      	beq.n	8009280 <__sflush_r+0x98>
 800921a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800921c:	89a3      	ldrh	r3, [r4, #12]
 800921e:	075a      	lsls	r2, r3, #29
 8009220:	d505      	bpl.n	800922e <__sflush_r+0x46>
 8009222:	6863      	ldr	r3, [r4, #4]
 8009224:	1ac0      	subs	r0, r0, r3
 8009226:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009228:	b10b      	cbz	r3, 800922e <__sflush_r+0x46>
 800922a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800922c:	1ac0      	subs	r0, r0, r3
 800922e:	2300      	movs	r3, #0
 8009230:	4602      	mov	r2, r0
 8009232:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009234:	6a21      	ldr	r1, [r4, #32]
 8009236:	4628      	mov	r0, r5
 8009238:	47b0      	blx	r6
 800923a:	1c43      	adds	r3, r0, #1
 800923c:	89a3      	ldrh	r3, [r4, #12]
 800923e:	d106      	bne.n	800924e <__sflush_r+0x66>
 8009240:	6829      	ldr	r1, [r5, #0]
 8009242:	291d      	cmp	r1, #29
 8009244:	d82c      	bhi.n	80092a0 <__sflush_r+0xb8>
 8009246:	4a2a      	ldr	r2, [pc, #168]	; (80092f0 <__sflush_r+0x108>)
 8009248:	40ca      	lsrs	r2, r1
 800924a:	07d6      	lsls	r6, r2, #31
 800924c:	d528      	bpl.n	80092a0 <__sflush_r+0xb8>
 800924e:	2200      	movs	r2, #0
 8009250:	6062      	str	r2, [r4, #4]
 8009252:	04d9      	lsls	r1, r3, #19
 8009254:	6922      	ldr	r2, [r4, #16]
 8009256:	6022      	str	r2, [r4, #0]
 8009258:	d504      	bpl.n	8009264 <__sflush_r+0x7c>
 800925a:	1c42      	adds	r2, r0, #1
 800925c:	d101      	bne.n	8009262 <__sflush_r+0x7a>
 800925e:	682b      	ldr	r3, [r5, #0]
 8009260:	b903      	cbnz	r3, 8009264 <__sflush_r+0x7c>
 8009262:	6560      	str	r0, [r4, #84]	; 0x54
 8009264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009266:	602f      	str	r7, [r5, #0]
 8009268:	2900      	cmp	r1, #0
 800926a:	d0ca      	beq.n	8009202 <__sflush_r+0x1a>
 800926c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009270:	4299      	cmp	r1, r3
 8009272:	d002      	beq.n	800927a <__sflush_r+0x92>
 8009274:	4628      	mov	r0, r5
 8009276:	f7ff fb47 	bl	8008908 <_free_r>
 800927a:	2000      	movs	r0, #0
 800927c:	6360      	str	r0, [r4, #52]	; 0x34
 800927e:	e7c1      	b.n	8009204 <__sflush_r+0x1c>
 8009280:	6a21      	ldr	r1, [r4, #32]
 8009282:	2301      	movs	r3, #1
 8009284:	4628      	mov	r0, r5
 8009286:	47b0      	blx	r6
 8009288:	1c41      	adds	r1, r0, #1
 800928a:	d1c7      	bne.n	800921c <__sflush_r+0x34>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d0c4      	beq.n	800921c <__sflush_r+0x34>
 8009292:	2b1d      	cmp	r3, #29
 8009294:	d001      	beq.n	800929a <__sflush_r+0xb2>
 8009296:	2b16      	cmp	r3, #22
 8009298:	d101      	bne.n	800929e <__sflush_r+0xb6>
 800929a:	602f      	str	r7, [r5, #0]
 800929c:	e7b1      	b.n	8009202 <__sflush_r+0x1a>
 800929e:	89a3      	ldrh	r3, [r4, #12]
 80092a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092a4:	81a3      	strh	r3, [r4, #12]
 80092a6:	e7ad      	b.n	8009204 <__sflush_r+0x1c>
 80092a8:	690f      	ldr	r7, [r1, #16]
 80092aa:	2f00      	cmp	r7, #0
 80092ac:	d0a9      	beq.n	8009202 <__sflush_r+0x1a>
 80092ae:	0793      	lsls	r3, r2, #30
 80092b0:	680e      	ldr	r6, [r1, #0]
 80092b2:	bf08      	it	eq
 80092b4:	694b      	ldreq	r3, [r1, #20]
 80092b6:	600f      	str	r7, [r1, #0]
 80092b8:	bf18      	it	ne
 80092ba:	2300      	movne	r3, #0
 80092bc:	eba6 0807 	sub.w	r8, r6, r7
 80092c0:	608b      	str	r3, [r1, #8]
 80092c2:	f1b8 0f00 	cmp.w	r8, #0
 80092c6:	dd9c      	ble.n	8009202 <__sflush_r+0x1a>
 80092c8:	6a21      	ldr	r1, [r4, #32]
 80092ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092cc:	4643      	mov	r3, r8
 80092ce:	463a      	mov	r2, r7
 80092d0:	4628      	mov	r0, r5
 80092d2:	47b0      	blx	r6
 80092d4:	2800      	cmp	r0, #0
 80092d6:	dc06      	bgt.n	80092e6 <__sflush_r+0xfe>
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092de:	81a3      	strh	r3, [r4, #12]
 80092e0:	f04f 30ff 	mov.w	r0, #4294967295
 80092e4:	e78e      	b.n	8009204 <__sflush_r+0x1c>
 80092e6:	4407      	add	r7, r0
 80092e8:	eba8 0800 	sub.w	r8, r8, r0
 80092ec:	e7e9      	b.n	80092c2 <__sflush_r+0xda>
 80092ee:	bf00      	nop
 80092f0:	20400001 	.word	0x20400001

080092f4 <_fflush_r>:
 80092f4:	b538      	push	{r3, r4, r5, lr}
 80092f6:	690b      	ldr	r3, [r1, #16]
 80092f8:	4605      	mov	r5, r0
 80092fa:	460c      	mov	r4, r1
 80092fc:	b913      	cbnz	r3, 8009304 <_fflush_r+0x10>
 80092fe:	2500      	movs	r5, #0
 8009300:	4628      	mov	r0, r5
 8009302:	bd38      	pop	{r3, r4, r5, pc}
 8009304:	b118      	cbz	r0, 800930e <_fflush_r+0x1a>
 8009306:	6983      	ldr	r3, [r0, #24]
 8009308:	b90b      	cbnz	r3, 800930e <_fflush_r+0x1a>
 800930a:	f000 f887 	bl	800941c <__sinit>
 800930e:	4b14      	ldr	r3, [pc, #80]	; (8009360 <_fflush_r+0x6c>)
 8009310:	429c      	cmp	r4, r3
 8009312:	d11b      	bne.n	800934c <_fflush_r+0x58>
 8009314:	686c      	ldr	r4, [r5, #4]
 8009316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d0ef      	beq.n	80092fe <_fflush_r+0xa>
 800931e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009320:	07d0      	lsls	r0, r2, #31
 8009322:	d404      	bmi.n	800932e <_fflush_r+0x3a>
 8009324:	0599      	lsls	r1, r3, #22
 8009326:	d402      	bmi.n	800932e <_fflush_r+0x3a>
 8009328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800932a:	f000 f915 	bl	8009558 <__retarget_lock_acquire_recursive>
 800932e:	4628      	mov	r0, r5
 8009330:	4621      	mov	r1, r4
 8009332:	f7ff ff59 	bl	80091e8 <__sflush_r>
 8009336:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009338:	07da      	lsls	r2, r3, #31
 800933a:	4605      	mov	r5, r0
 800933c:	d4e0      	bmi.n	8009300 <_fflush_r+0xc>
 800933e:	89a3      	ldrh	r3, [r4, #12]
 8009340:	059b      	lsls	r3, r3, #22
 8009342:	d4dd      	bmi.n	8009300 <_fflush_r+0xc>
 8009344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009346:	f000 f908 	bl	800955a <__retarget_lock_release_recursive>
 800934a:	e7d9      	b.n	8009300 <_fflush_r+0xc>
 800934c:	4b05      	ldr	r3, [pc, #20]	; (8009364 <_fflush_r+0x70>)
 800934e:	429c      	cmp	r4, r3
 8009350:	d101      	bne.n	8009356 <_fflush_r+0x62>
 8009352:	68ac      	ldr	r4, [r5, #8]
 8009354:	e7df      	b.n	8009316 <_fflush_r+0x22>
 8009356:	4b04      	ldr	r3, [pc, #16]	; (8009368 <_fflush_r+0x74>)
 8009358:	429c      	cmp	r4, r3
 800935a:	bf08      	it	eq
 800935c:	68ec      	ldreq	r4, [r5, #12]
 800935e:	e7da      	b.n	8009316 <_fflush_r+0x22>
 8009360:	0800c01c 	.word	0x0800c01c
 8009364:	0800c03c 	.word	0x0800c03c
 8009368:	0800bffc 	.word	0x0800bffc

0800936c <std>:
 800936c:	2300      	movs	r3, #0
 800936e:	b510      	push	{r4, lr}
 8009370:	4604      	mov	r4, r0
 8009372:	e9c0 3300 	strd	r3, r3, [r0]
 8009376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800937a:	6083      	str	r3, [r0, #8]
 800937c:	8181      	strh	r1, [r0, #12]
 800937e:	6643      	str	r3, [r0, #100]	; 0x64
 8009380:	81c2      	strh	r2, [r0, #14]
 8009382:	6183      	str	r3, [r0, #24]
 8009384:	4619      	mov	r1, r3
 8009386:	2208      	movs	r2, #8
 8009388:	305c      	adds	r0, #92	; 0x5c
 800938a:	f7ff f9cd 	bl	8008728 <memset>
 800938e:	4b05      	ldr	r3, [pc, #20]	; (80093a4 <std+0x38>)
 8009390:	6263      	str	r3, [r4, #36]	; 0x24
 8009392:	4b05      	ldr	r3, [pc, #20]	; (80093a8 <std+0x3c>)
 8009394:	62a3      	str	r3, [r4, #40]	; 0x28
 8009396:	4b05      	ldr	r3, [pc, #20]	; (80093ac <std+0x40>)
 8009398:	62e3      	str	r3, [r4, #44]	; 0x2c
 800939a:	4b05      	ldr	r3, [pc, #20]	; (80093b0 <std+0x44>)
 800939c:	6224      	str	r4, [r4, #32]
 800939e:	6323      	str	r3, [r4, #48]	; 0x30
 80093a0:	bd10      	pop	{r4, pc}
 80093a2:	bf00      	nop
 80093a4:	080096c5 	.word	0x080096c5
 80093a8:	080096e7 	.word	0x080096e7
 80093ac:	0800971f 	.word	0x0800971f
 80093b0:	08009743 	.word	0x08009743

080093b4 <_cleanup_r>:
 80093b4:	4901      	ldr	r1, [pc, #4]	; (80093bc <_cleanup_r+0x8>)
 80093b6:	f000 b8af 	b.w	8009518 <_fwalk_reent>
 80093ba:	bf00      	nop
 80093bc:	080092f5 	.word	0x080092f5

080093c0 <__sfmoreglue>:
 80093c0:	b570      	push	{r4, r5, r6, lr}
 80093c2:	1e4a      	subs	r2, r1, #1
 80093c4:	2568      	movs	r5, #104	; 0x68
 80093c6:	4355      	muls	r5, r2
 80093c8:	460e      	mov	r6, r1
 80093ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093ce:	f7ff faeb 	bl	80089a8 <_malloc_r>
 80093d2:	4604      	mov	r4, r0
 80093d4:	b140      	cbz	r0, 80093e8 <__sfmoreglue+0x28>
 80093d6:	2100      	movs	r1, #0
 80093d8:	e9c0 1600 	strd	r1, r6, [r0]
 80093dc:	300c      	adds	r0, #12
 80093de:	60a0      	str	r0, [r4, #8]
 80093e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093e4:	f7ff f9a0 	bl	8008728 <memset>
 80093e8:	4620      	mov	r0, r4
 80093ea:	bd70      	pop	{r4, r5, r6, pc}

080093ec <__sfp_lock_acquire>:
 80093ec:	4801      	ldr	r0, [pc, #4]	; (80093f4 <__sfp_lock_acquire+0x8>)
 80093ee:	f000 b8b3 	b.w	8009558 <__retarget_lock_acquire_recursive>
 80093f2:	bf00      	nop
 80093f4:	200006fc 	.word	0x200006fc

080093f8 <__sfp_lock_release>:
 80093f8:	4801      	ldr	r0, [pc, #4]	; (8009400 <__sfp_lock_release+0x8>)
 80093fa:	f000 b8ae 	b.w	800955a <__retarget_lock_release_recursive>
 80093fe:	bf00      	nop
 8009400:	200006fc 	.word	0x200006fc

08009404 <__sinit_lock_acquire>:
 8009404:	4801      	ldr	r0, [pc, #4]	; (800940c <__sinit_lock_acquire+0x8>)
 8009406:	f000 b8a7 	b.w	8009558 <__retarget_lock_acquire_recursive>
 800940a:	bf00      	nop
 800940c:	200006f7 	.word	0x200006f7

08009410 <__sinit_lock_release>:
 8009410:	4801      	ldr	r0, [pc, #4]	; (8009418 <__sinit_lock_release+0x8>)
 8009412:	f000 b8a2 	b.w	800955a <__retarget_lock_release_recursive>
 8009416:	bf00      	nop
 8009418:	200006f7 	.word	0x200006f7

0800941c <__sinit>:
 800941c:	b510      	push	{r4, lr}
 800941e:	4604      	mov	r4, r0
 8009420:	f7ff fff0 	bl	8009404 <__sinit_lock_acquire>
 8009424:	69a3      	ldr	r3, [r4, #24]
 8009426:	b11b      	cbz	r3, 8009430 <__sinit+0x14>
 8009428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800942c:	f7ff bff0 	b.w	8009410 <__sinit_lock_release>
 8009430:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009434:	6523      	str	r3, [r4, #80]	; 0x50
 8009436:	4b13      	ldr	r3, [pc, #76]	; (8009484 <__sinit+0x68>)
 8009438:	4a13      	ldr	r2, [pc, #76]	; (8009488 <__sinit+0x6c>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	62a2      	str	r2, [r4, #40]	; 0x28
 800943e:	42a3      	cmp	r3, r4
 8009440:	bf04      	itt	eq
 8009442:	2301      	moveq	r3, #1
 8009444:	61a3      	streq	r3, [r4, #24]
 8009446:	4620      	mov	r0, r4
 8009448:	f000 f820 	bl	800948c <__sfp>
 800944c:	6060      	str	r0, [r4, #4]
 800944e:	4620      	mov	r0, r4
 8009450:	f000 f81c 	bl	800948c <__sfp>
 8009454:	60a0      	str	r0, [r4, #8]
 8009456:	4620      	mov	r0, r4
 8009458:	f000 f818 	bl	800948c <__sfp>
 800945c:	2200      	movs	r2, #0
 800945e:	60e0      	str	r0, [r4, #12]
 8009460:	2104      	movs	r1, #4
 8009462:	6860      	ldr	r0, [r4, #4]
 8009464:	f7ff ff82 	bl	800936c <std>
 8009468:	68a0      	ldr	r0, [r4, #8]
 800946a:	2201      	movs	r2, #1
 800946c:	2109      	movs	r1, #9
 800946e:	f7ff ff7d 	bl	800936c <std>
 8009472:	68e0      	ldr	r0, [r4, #12]
 8009474:	2202      	movs	r2, #2
 8009476:	2112      	movs	r1, #18
 8009478:	f7ff ff78 	bl	800936c <std>
 800947c:	2301      	movs	r3, #1
 800947e:	61a3      	str	r3, [r4, #24]
 8009480:	e7d2      	b.n	8009428 <__sinit+0xc>
 8009482:	bf00      	nop
 8009484:	0800beec 	.word	0x0800beec
 8009488:	080093b5 	.word	0x080093b5

0800948c <__sfp>:
 800948c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948e:	4607      	mov	r7, r0
 8009490:	f7ff ffac 	bl	80093ec <__sfp_lock_acquire>
 8009494:	4b1e      	ldr	r3, [pc, #120]	; (8009510 <__sfp+0x84>)
 8009496:	681e      	ldr	r6, [r3, #0]
 8009498:	69b3      	ldr	r3, [r6, #24]
 800949a:	b913      	cbnz	r3, 80094a2 <__sfp+0x16>
 800949c:	4630      	mov	r0, r6
 800949e:	f7ff ffbd 	bl	800941c <__sinit>
 80094a2:	3648      	adds	r6, #72	; 0x48
 80094a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094a8:	3b01      	subs	r3, #1
 80094aa:	d503      	bpl.n	80094b4 <__sfp+0x28>
 80094ac:	6833      	ldr	r3, [r6, #0]
 80094ae:	b30b      	cbz	r3, 80094f4 <__sfp+0x68>
 80094b0:	6836      	ldr	r6, [r6, #0]
 80094b2:	e7f7      	b.n	80094a4 <__sfp+0x18>
 80094b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094b8:	b9d5      	cbnz	r5, 80094f0 <__sfp+0x64>
 80094ba:	4b16      	ldr	r3, [pc, #88]	; (8009514 <__sfp+0x88>)
 80094bc:	60e3      	str	r3, [r4, #12]
 80094be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094c2:	6665      	str	r5, [r4, #100]	; 0x64
 80094c4:	f000 f847 	bl	8009556 <__retarget_lock_init_recursive>
 80094c8:	f7ff ff96 	bl	80093f8 <__sfp_lock_release>
 80094cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094d4:	6025      	str	r5, [r4, #0]
 80094d6:	61a5      	str	r5, [r4, #24]
 80094d8:	2208      	movs	r2, #8
 80094da:	4629      	mov	r1, r5
 80094dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094e0:	f7ff f922 	bl	8008728 <memset>
 80094e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094ec:	4620      	mov	r0, r4
 80094ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094f0:	3468      	adds	r4, #104	; 0x68
 80094f2:	e7d9      	b.n	80094a8 <__sfp+0x1c>
 80094f4:	2104      	movs	r1, #4
 80094f6:	4638      	mov	r0, r7
 80094f8:	f7ff ff62 	bl	80093c0 <__sfmoreglue>
 80094fc:	4604      	mov	r4, r0
 80094fe:	6030      	str	r0, [r6, #0]
 8009500:	2800      	cmp	r0, #0
 8009502:	d1d5      	bne.n	80094b0 <__sfp+0x24>
 8009504:	f7ff ff78 	bl	80093f8 <__sfp_lock_release>
 8009508:	230c      	movs	r3, #12
 800950a:	603b      	str	r3, [r7, #0]
 800950c:	e7ee      	b.n	80094ec <__sfp+0x60>
 800950e:	bf00      	nop
 8009510:	0800beec 	.word	0x0800beec
 8009514:	ffff0001 	.word	0xffff0001

08009518 <_fwalk_reent>:
 8009518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800951c:	4606      	mov	r6, r0
 800951e:	4688      	mov	r8, r1
 8009520:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009524:	2700      	movs	r7, #0
 8009526:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800952a:	f1b9 0901 	subs.w	r9, r9, #1
 800952e:	d505      	bpl.n	800953c <_fwalk_reent+0x24>
 8009530:	6824      	ldr	r4, [r4, #0]
 8009532:	2c00      	cmp	r4, #0
 8009534:	d1f7      	bne.n	8009526 <_fwalk_reent+0xe>
 8009536:	4638      	mov	r0, r7
 8009538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800953c:	89ab      	ldrh	r3, [r5, #12]
 800953e:	2b01      	cmp	r3, #1
 8009540:	d907      	bls.n	8009552 <_fwalk_reent+0x3a>
 8009542:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009546:	3301      	adds	r3, #1
 8009548:	d003      	beq.n	8009552 <_fwalk_reent+0x3a>
 800954a:	4629      	mov	r1, r5
 800954c:	4630      	mov	r0, r6
 800954e:	47c0      	blx	r8
 8009550:	4307      	orrs	r7, r0
 8009552:	3568      	adds	r5, #104	; 0x68
 8009554:	e7e9      	b.n	800952a <_fwalk_reent+0x12>

08009556 <__retarget_lock_init_recursive>:
 8009556:	4770      	bx	lr

08009558 <__retarget_lock_acquire_recursive>:
 8009558:	4770      	bx	lr

0800955a <__retarget_lock_release_recursive>:
 800955a:	4770      	bx	lr

0800955c <__swhatbuf_r>:
 800955c:	b570      	push	{r4, r5, r6, lr}
 800955e:	460e      	mov	r6, r1
 8009560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009564:	2900      	cmp	r1, #0
 8009566:	b096      	sub	sp, #88	; 0x58
 8009568:	4614      	mov	r4, r2
 800956a:	461d      	mov	r5, r3
 800956c:	da07      	bge.n	800957e <__swhatbuf_r+0x22>
 800956e:	2300      	movs	r3, #0
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	89b3      	ldrh	r3, [r6, #12]
 8009574:	061a      	lsls	r2, r3, #24
 8009576:	d410      	bmi.n	800959a <__swhatbuf_r+0x3e>
 8009578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800957c:	e00e      	b.n	800959c <__swhatbuf_r+0x40>
 800957e:	466a      	mov	r2, sp
 8009580:	f000 f906 	bl	8009790 <_fstat_r>
 8009584:	2800      	cmp	r0, #0
 8009586:	dbf2      	blt.n	800956e <__swhatbuf_r+0x12>
 8009588:	9a01      	ldr	r2, [sp, #4]
 800958a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800958e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009592:	425a      	negs	r2, r3
 8009594:	415a      	adcs	r2, r3
 8009596:	602a      	str	r2, [r5, #0]
 8009598:	e7ee      	b.n	8009578 <__swhatbuf_r+0x1c>
 800959a:	2340      	movs	r3, #64	; 0x40
 800959c:	2000      	movs	r0, #0
 800959e:	6023      	str	r3, [r4, #0]
 80095a0:	b016      	add	sp, #88	; 0x58
 80095a2:	bd70      	pop	{r4, r5, r6, pc}

080095a4 <__smakebuf_r>:
 80095a4:	898b      	ldrh	r3, [r1, #12]
 80095a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095a8:	079d      	lsls	r5, r3, #30
 80095aa:	4606      	mov	r6, r0
 80095ac:	460c      	mov	r4, r1
 80095ae:	d507      	bpl.n	80095c0 <__smakebuf_r+0x1c>
 80095b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095b4:	6023      	str	r3, [r4, #0]
 80095b6:	6123      	str	r3, [r4, #16]
 80095b8:	2301      	movs	r3, #1
 80095ba:	6163      	str	r3, [r4, #20]
 80095bc:	b002      	add	sp, #8
 80095be:	bd70      	pop	{r4, r5, r6, pc}
 80095c0:	ab01      	add	r3, sp, #4
 80095c2:	466a      	mov	r2, sp
 80095c4:	f7ff ffca 	bl	800955c <__swhatbuf_r>
 80095c8:	9900      	ldr	r1, [sp, #0]
 80095ca:	4605      	mov	r5, r0
 80095cc:	4630      	mov	r0, r6
 80095ce:	f7ff f9eb 	bl	80089a8 <_malloc_r>
 80095d2:	b948      	cbnz	r0, 80095e8 <__smakebuf_r+0x44>
 80095d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095d8:	059a      	lsls	r2, r3, #22
 80095da:	d4ef      	bmi.n	80095bc <__smakebuf_r+0x18>
 80095dc:	f023 0303 	bic.w	r3, r3, #3
 80095e0:	f043 0302 	orr.w	r3, r3, #2
 80095e4:	81a3      	strh	r3, [r4, #12]
 80095e6:	e7e3      	b.n	80095b0 <__smakebuf_r+0xc>
 80095e8:	4b0d      	ldr	r3, [pc, #52]	; (8009620 <__smakebuf_r+0x7c>)
 80095ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	6020      	str	r0, [r4, #0]
 80095f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095f4:	81a3      	strh	r3, [r4, #12]
 80095f6:	9b00      	ldr	r3, [sp, #0]
 80095f8:	6163      	str	r3, [r4, #20]
 80095fa:	9b01      	ldr	r3, [sp, #4]
 80095fc:	6120      	str	r0, [r4, #16]
 80095fe:	b15b      	cbz	r3, 8009618 <__smakebuf_r+0x74>
 8009600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009604:	4630      	mov	r0, r6
 8009606:	f000 f8d5 	bl	80097b4 <_isatty_r>
 800960a:	b128      	cbz	r0, 8009618 <__smakebuf_r+0x74>
 800960c:	89a3      	ldrh	r3, [r4, #12]
 800960e:	f023 0303 	bic.w	r3, r3, #3
 8009612:	f043 0301 	orr.w	r3, r3, #1
 8009616:	81a3      	strh	r3, [r4, #12]
 8009618:	89a0      	ldrh	r0, [r4, #12]
 800961a:	4305      	orrs	r5, r0
 800961c:	81a5      	strh	r5, [r4, #12]
 800961e:	e7cd      	b.n	80095bc <__smakebuf_r+0x18>
 8009620:	080093b5 	.word	0x080093b5

08009624 <__malloc_lock>:
 8009624:	4801      	ldr	r0, [pc, #4]	; (800962c <__malloc_lock+0x8>)
 8009626:	f7ff bf97 	b.w	8009558 <__retarget_lock_acquire_recursive>
 800962a:	bf00      	nop
 800962c:	200006f8 	.word	0x200006f8

08009630 <__malloc_unlock>:
 8009630:	4801      	ldr	r0, [pc, #4]	; (8009638 <__malloc_unlock+0x8>)
 8009632:	f7ff bf92 	b.w	800955a <__retarget_lock_release_recursive>
 8009636:	bf00      	nop
 8009638:	200006f8 	.word	0x200006f8

0800963c <_raise_r>:
 800963c:	291f      	cmp	r1, #31
 800963e:	b538      	push	{r3, r4, r5, lr}
 8009640:	4604      	mov	r4, r0
 8009642:	460d      	mov	r5, r1
 8009644:	d904      	bls.n	8009650 <_raise_r+0x14>
 8009646:	2316      	movs	r3, #22
 8009648:	6003      	str	r3, [r0, #0]
 800964a:	f04f 30ff 	mov.w	r0, #4294967295
 800964e:	bd38      	pop	{r3, r4, r5, pc}
 8009650:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009652:	b112      	cbz	r2, 800965a <_raise_r+0x1e>
 8009654:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009658:	b94b      	cbnz	r3, 800966e <_raise_r+0x32>
 800965a:	4620      	mov	r0, r4
 800965c:	f000 f830 	bl	80096c0 <_getpid_r>
 8009660:	462a      	mov	r2, r5
 8009662:	4601      	mov	r1, r0
 8009664:	4620      	mov	r0, r4
 8009666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800966a:	f000 b817 	b.w	800969c <_kill_r>
 800966e:	2b01      	cmp	r3, #1
 8009670:	d00a      	beq.n	8009688 <_raise_r+0x4c>
 8009672:	1c59      	adds	r1, r3, #1
 8009674:	d103      	bne.n	800967e <_raise_r+0x42>
 8009676:	2316      	movs	r3, #22
 8009678:	6003      	str	r3, [r0, #0]
 800967a:	2001      	movs	r0, #1
 800967c:	e7e7      	b.n	800964e <_raise_r+0x12>
 800967e:	2400      	movs	r4, #0
 8009680:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009684:	4628      	mov	r0, r5
 8009686:	4798      	blx	r3
 8009688:	2000      	movs	r0, #0
 800968a:	e7e0      	b.n	800964e <_raise_r+0x12>

0800968c <raise>:
 800968c:	4b02      	ldr	r3, [pc, #8]	; (8009698 <raise+0xc>)
 800968e:	4601      	mov	r1, r0
 8009690:	6818      	ldr	r0, [r3, #0]
 8009692:	f7ff bfd3 	b.w	800963c <_raise_r>
 8009696:	bf00      	nop
 8009698:	20000090 	.word	0x20000090

0800969c <_kill_r>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	4d07      	ldr	r5, [pc, #28]	; (80096bc <_kill_r+0x20>)
 80096a0:	2300      	movs	r3, #0
 80096a2:	4604      	mov	r4, r0
 80096a4:	4608      	mov	r0, r1
 80096a6:	4611      	mov	r1, r2
 80096a8:	602b      	str	r3, [r5, #0]
 80096aa:	f7f7 ffa3 	bl	80015f4 <_kill>
 80096ae:	1c43      	adds	r3, r0, #1
 80096b0:	d102      	bne.n	80096b8 <_kill_r+0x1c>
 80096b2:	682b      	ldr	r3, [r5, #0]
 80096b4:	b103      	cbz	r3, 80096b8 <_kill_r+0x1c>
 80096b6:	6023      	str	r3, [r4, #0]
 80096b8:	bd38      	pop	{r3, r4, r5, pc}
 80096ba:	bf00      	nop
 80096bc:	20000700 	.word	0x20000700

080096c0 <_getpid_r>:
 80096c0:	f7f7 bf90 	b.w	80015e4 <_getpid>

080096c4 <__sread>:
 80096c4:	b510      	push	{r4, lr}
 80096c6:	460c      	mov	r4, r1
 80096c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096cc:	f000 f894 	bl	80097f8 <_read_r>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	bfab      	itete	ge
 80096d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096d6:	89a3      	ldrhlt	r3, [r4, #12]
 80096d8:	181b      	addge	r3, r3, r0
 80096da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096de:	bfac      	ite	ge
 80096e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80096e2:	81a3      	strhlt	r3, [r4, #12]
 80096e4:	bd10      	pop	{r4, pc}

080096e6 <__swrite>:
 80096e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ea:	461f      	mov	r7, r3
 80096ec:	898b      	ldrh	r3, [r1, #12]
 80096ee:	05db      	lsls	r3, r3, #23
 80096f0:	4605      	mov	r5, r0
 80096f2:	460c      	mov	r4, r1
 80096f4:	4616      	mov	r6, r2
 80096f6:	d505      	bpl.n	8009704 <__swrite+0x1e>
 80096f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096fc:	2302      	movs	r3, #2
 80096fe:	2200      	movs	r2, #0
 8009700:	f000 f868 	bl	80097d4 <_lseek_r>
 8009704:	89a3      	ldrh	r3, [r4, #12]
 8009706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800970a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800970e:	81a3      	strh	r3, [r4, #12]
 8009710:	4632      	mov	r2, r6
 8009712:	463b      	mov	r3, r7
 8009714:	4628      	mov	r0, r5
 8009716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800971a:	f000 b817 	b.w	800974c <_write_r>

0800971e <__sseek>:
 800971e:	b510      	push	{r4, lr}
 8009720:	460c      	mov	r4, r1
 8009722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009726:	f000 f855 	bl	80097d4 <_lseek_r>
 800972a:	1c43      	adds	r3, r0, #1
 800972c:	89a3      	ldrh	r3, [r4, #12]
 800972e:	bf15      	itete	ne
 8009730:	6560      	strne	r0, [r4, #84]	; 0x54
 8009732:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009736:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800973a:	81a3      	strheq	r3, [r4, #12]
 800973c:	bf18      	it	ne
 800973e:	81a3      	strhne	r3, [r4, #12]
 8009740:	bd10      	pop	{r4, pc}

08009742 <__sclose>:
 8009742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009746:	f000 b813 	b.w	8009770 <_close_r>
	...

0800974c <_write_r>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	4d07      	ldr	r5, [pc, #28]	; (800976c <_write_r+0x20>)
 8009750:	4604      	mov	r4, r0
 8009752:	4608      	mov	r0, r1
 8009754:	4611      	mov	r1, r2
 8009756:	2200      	movs	r2, #0
 8009758:	602a      	str	r2, [r5, #0]
 800975a:	461a      	mov	r2, r3
 800975c:	f7f7 ff81 	bl	8001662 <_write>
 8009760:	1c43      	adds	r3, r0, #1
 8009762:	d102      	bne.n	800976a <_write_r+0x1e>
 8009764:	682b      	ldr	r3, [r5, #0]
 8009766:	b103      	cbz	r3, 800976a <_write_r+0x1e>
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	bd38      	pop	{r3, r4, r5, pc}
 800976c:	20000700 	.word	0x20000700

08009770 <_close_r>:
 8009770:	b538      	push	{r3, r4, r5, lr}
 8009772:	4d06      	ldr	r5, [pc, #24]	; (800978c <_close_r+0x1c>)
 8009774:	2300      	movs	r3, #0
 8009776:	4604      	mov	r4, r0
 8009778:	4608      	mov	r0, r1
 800977a:	602b      	str	r3, [r5, #0]
 800977c:	f7f7 ff8d 	bl	800169a <_close>
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	d102      	bne.n	800978a <_close_r+0x1a>
 8009784:	682b      	ldr	r3, [r5, #0]
 8009786:	b103      	cbz	r3, 800978a <_close_r+0x1a>
 8009788:	6023      	str	r3, [r4, #0]
 800978a:	bd38      	pop	{r3, r4, r5, pc}
 800978c:	20000700 	.word	0x20000700

08009790 <_fstat_r>:
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	4d07      	ldr	r5, [pc, #28]	; (80097b0 <_fstat_r+0x20>)
 8009794:	2300      	movs	r3, #0
 8009796:	4604      	mov	r4, r0
 8009798:	4608      	mov	r0, r1
 800979a:	4611      	mov	r1, r2
 800979c:	602b      	str	r3, [r5, #0]
 800979e:	f7f7 ff88 	bl	80016b2 <_fstat>
 80097a2:	1c43      	adds	r3, r0, #1
 80097a4:	d102      	bne.n	80097ac <_fstat_r+0x1c>
 80097a6:	682b      	ldr	r3, [r5, #0]
 80097a8:	b103      	cbz	r3, 80097ac <_fstat_r+0x1c>
 80097aa:	6023      	str	r3, [r4, #0]
 80097ac:	bd38      	pop	{r3, r4, r5, pc}
 80097ae:	bf00      	nop
 80097b0:	20000700 	.word	0x20000700

080097b4 <_isatty_r>:
 80097b4:	b538      	push	{r3, r4, r5, lr}
 80097b6:	4d06      	ldr	r5, [pc, #24]	; (80097d0 <_isatty_r+0x1c>)
 80097b8:	2300      	movs	r3, #0
 80097ba:	4604      	mov	r4, r0
 80097bc:	4608      	mov	r0, r1
 80097be:	602b      	str	r3, [r5, #0]
 80097c0:	f7f7 ff87 	bl	80016d2 <_isatty>
 80097c4:	1c43      	adds	r3, r0, #1
 80097c6:	d102      	bne.n	80097ce <_isatty_r+0x1a>
 80097c8:	682b      	ldr	r3, [r5, #0]
 80097ca:	b103      	cbz	r3, 80097ce <_isatty_r+0x1a>
 80097cc:	6023      	str	r3, [r4, #0]
 80097ce:	bd38      	pop	{r3, r4, r5, pc}
 80097d0:	20000700 	.word	0x20000700

080097d4 <_lseek_r>:
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	4d07      	ldr	r5, [pc, #28]	; (80097f4 <_lseek_r+0x20>)
 80097d8:	4604      	mov	r4, r0
 80097da:	4608      	mov	r0, r1
 80097dc:	4611      	mov	r1, r2
 80097de:	2200      	movs	r2, #0
 80097e0:	602a      	str	r2, [r5, #0]
 80097e2:	461a      	mov	r2, r3
 80097e4:	f7f7 ff80 	bl	80016e8 <_lseek>
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	d102      	bne.n	80097f2 <_lseek_r+0x1e>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	b103      	cbz	r3, 80097f2 <_lseek_r+0x1e>
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	20000700 	.word	0x20000700

080097f8 <_read_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4d07      	ldr	r5, [pc, #28]	; (8009818 <_read_r+0x20>)
 80097fc:	4604      	mov	r4, r0
 80097fe:	4608      	mov	r0, r1
 8009800:	4611      	mov	r1, r2
 8009802:	2200      	movs	r2, #0
 8009804:	602a      	str	r2, [r5, #0]
 8009806:	461a      	mov	r2, r3
 8009808:	f7f7 ff0e 	bl	8001628 <_read>
 800980c:	1c43      	adds	r3, r0, #1
 800980e:	d102      	bne.n	8009816 <_read_r+0x1e>
 8009810:	682b      	ldr	r3, [r5, #0]
 8009812:	b103      	cbz	r3, 8009816 <_read_r+0x1e>
 8009814:	6023      	str	r3, [r4, #0]
 8009816:	bd38      	pop	{r3, r4, r5, pc}
 8009818:	20000700 	.word	0x20000700

0800981c <_init>:
 800981c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981e:	bf00      	nop
 8009820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009822:	bc08      	pop	{r3}
 8009824:	469e      	mov	lr, r3
 8009826:	4770      	bx	lr

08009828 <_fini>:
 8009828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982a:	bf00      	nop
 800982c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800982e:	bc08      	pop	{r3}
 8009830:	469e      	mov	lr, r3
 8009832:	4770      	bx	lr
